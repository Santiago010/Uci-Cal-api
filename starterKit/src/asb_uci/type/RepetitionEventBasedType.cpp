/** @file RepetitionEventBasedType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RepetitionEventBasedType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EventOffsetChoiceType.h"
#include "asb_uci/type/EventWindowChoiceType.h"
#include "asb_uci/type/ReferenceAssetKinematicsType.h"
#include "asb_uci/type/RepetitionEventType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EventOffsetChoiceType.h"
#include "uci/type/EventWindowChoiceType.h"
#include "uci/type/ReferenceAssetKinematicsType.h"
#include "uci/type/RepetitionEventBasedType.h"
#include "uci/type/RepetitionEventType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RepetitionEventBasedType::RepetitionEventBasedType()
  : event_Accessor{boost::make_unique<RepetitionEventType>()} {
}

RepetitionEventBasedType::~RepetitionEventBasedType() = default;

void RepetitionEventBasedType::copy(const uci::type::RepetitionEventBasedType& accessor) {
  copyImpl(accessor, false);
}

void RepetitionEventBasedType::copyImpl(const uci::type::RepetitionEventBasedType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RepetitionEventBasedType&>(accessor);
    setEvent(*(accessorImpl.event_Accessor));
    if (accessorImpl.eventOffset_Accessor) {
      setEventOffset(*(accessorImpl.eventOffset_Accessor));
    } else {
      eventOffset_Accessor.reset();
    }
    if (accessorImpl.eventWindow_Accessor) {
      setEventWindow(*(accessorImpl.eventWindow_Accessor));
    } else {
      eventWindow_Accessor.reset();
    }
    if (accessorImpl.alternateReferenceObject_Accessor) {
      setAlternateReferenceObject(*(accessorImpl.alternateReferenceObject_Accessor));
    } else {
      alternateReferenceObject_Accessor.reset();
    }
    setRepetitionAttempts(accessorImpl.repetitionAttempts_Accessor);
  }
}

void RepetitionEventBasedType::reset() noexcept {
  event_Accessor->reset();
  eventOffset_Accessor.reset();
  eventWindow_Accessor.reset();
  alternateReferenceObject_Accessor.reset();
  repetitionAttempts_Accessor = 0;
}

const uci::type::RepetitionEventType& RepetitionEventBasedType::getEvent() const {
  return *event_Accessor;
}

uci::type::RepetitionEventType& RepetitionEventBasedType::getEvent() {
  return *event_Accessor;
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::setEvent(const uci::type::RepetitionEventType& accessor) {
  if (&accessor != event_Accessor.get()) {
    event_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EventOffsetChoiceType& RepetitionEventBasedType::getEventOffset_() const {
  if (eventOffset_Accessor) {
    return *eventOffset_Accessor;
  }
  throw uci::base::UCIException("Error in getEventOffset(): An attempt was made to get an optional field that was not enabled, call hasEventOffset() to determine if it is safe to call getEventOffset()");
}

const uci::type::EventOffsetChoiceType& RepetitionEventBasedType::getEventOffset() const {
  return getEventOffset_();
}

uci::type::EventOffsetChoiceType& RepetitionEventBasedType::getEventOffset() {
  return getEventOffset_();
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::setEventOffset(const uci::type::EventOffsetChoiceType& accessor) {
  enableEventOffset();
  if (&accessor != eventOffset_Accessor.get()) {
    eventOffset_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionEventBasedType::hasEventOffset() const noexcept {
  return static_cast<bool>(eventOffset_Accessor);
}

uci::type::EventOffsetChoiceType& RepetitionEventBasedType::enableEventOffset(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eventOffsetChoiceType : type};
  if ((!eventOffset_Accessor) || (eventOffset_Accessor->getAccessorType() != requestedType)) {
    eventOffset_Accessor = EventOffsetChoiceType::create(requestedType);
    if (!eventOffset_Accessor) {
      throw uci::base::UCIException("Error in enableEventOffset(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eventOffset_Accessor;
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::clearEventOffset() noexcept {
  eventOffset_Accessor.reset();
  return *this;
}

uci::type::EventWindowChoiceType& RepetitionEventBasedType::getEventWindow_() const {
  if (eventWindow_Accessor) {
    return *eventWindow_Accessor;
  }
  throw uci::base::UCIException("Error in getEventWindow(): An attempt was made to get an optional field that was not enabled, call hasEventWindow() to determine if it is safe to call getEventWindow()");
}

const uci::type::EventWindowChoiceType& RepetitionEventBasedType::getEventWindow() const {
  return getEventWindow_();
}

uci::type::EventWindowChoiceType& RepetitionEventBasedType::getEventWindow() {
  return getEventWindow_();
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::setEventWindow(const uci::type::EventWindowChoiceType& accessor) {
  enableEventWindow();
  if (&accessor != eventWindow_Accessor.get()) {
    eventWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionEventBasedType::hasEventWindow() const noexcept {
  return static_cast<bool>(eventWindow_Accessor);
}

uci::type::EventWindowChoiceType& RepetitionEventBasedType::enableEventWindow(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eventWindowChoiceType : type};
  if ((!eventWindow_Accessor) || (eventWindow_Accessor->getAccessorType() != requestedType)) {
    eventWindow_Accessor = EventWindowChoiceType::create(requestedType);
    if (!eventWindow_Accessor) {
      throw uci::base::UCIException("Error in enableEventWindow(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eventWindow_Accessor;
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::clearEventWindow() noexcept {
  eventWindow_Accessor.reset();
  return *this;
}

uci::type::ReferenceAssetKinematicsType& RepetitionEventBasedType::getAlternateReferenceObject_() const {
  if (alternateReferenceObject_Accessor) {
    return *alternateReferenceObject_Accessor;
  }
  throw uci::base::UCIException("Error in getAlternateReferenceObject(): An attempt was made to get an optional field that was not enabled, call hasAlternateReferenceObject() to determine if it is safe to call getAlternateReferenceObject()");
}

const uci::type::ReferenceAssetKinematicsType& RepetitionEventBasedType::getAlternateReferenceObject() const {
  return getAlternateReferenceObject_();
}

uci::type::ReferenceAssetKinematicsType& RepetitionEventBasedType::getAlternateReferenceObject() {
  return getAlternateReferenceObject_();
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::setAlternateReferenceObject(const uci::type::ReferenceAssetKinematicsType& accessor) {
  enableAlternateReferenceObject();
  if (&accessor != alternateReferenceObject_Accessor.get()) {
    alternateReferenceObject_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RepetitionEventBasedType::hasAlternateReferenceObject() const noexcept {
  return static_cast<bool>(alternateReferenceObject_Accessor);
}

uci::type::ReferenceAssetKinematicsType& RepetitionEventBasedType::enableAlternateReferenceObject(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceAssetKinematicsType : type};
  if ((!alternateReferenceObject_Accessor) || (alternateReferenceObject_Accessor->getAccessorType() != requestedType)) {
    alternateReferenceObject_Accessor = ReferenceAssetKinematicsType::create(requestedType);
    if (!alternateReferenceObject_Accessor) {
      throw uci::base::UCIException("Error in enableAlternateReferenceObject(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *alternateReferenceObject_Accessor;
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::clearAlternateReferenceObject() noexcept {
  alternateReferenceObject_Accessor.reset();
  return *this;
}

xs::UnsignedInt RepetitionEventBasedType::getRepetitionAttempts() const {
  return repetitionAttempts_Accessor;
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::setRepetitionAttempts(xs::UnsignedInt value) {
  repetitionAttempts_Accessor = value;
  return *this;
}


std::unique_ptr<RepetitionEventBasedType> RepetitionEventBasedType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionEventBasedType : type};
  return (requestedType == uci::type::accessorType::repetitionEventBasedType) ? boost::make_unique<RepetitionEventBasedType>() : nullptr;
}

/**  */
namespace RepetitionEventBasedType_Names {

constexpr const char* Extern_Type_Name{"RepetitionEventBasedType"};
constexpr const char* Event_Name{"Event"};
constexpr const char* EventOffset_Name{"EventOffset"};
constexpr const char* EventWindow_Name{"EventWindow"};
constexpr const char* AlternateReferenceObject_Name{"AlternateReferenceObject"};
constexpr const char* RepetitionAttempts_Name{"RepetitionAttempts"};

} // namespace RepetitionEventBasedType_Names

void RepetitionEventBasedType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RepetitionEventBasedType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RepetitionEventBasedType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RepetitionEventBasedType_Names::Event_Name) {
      RepetitionEventType::deserialize(valueType.second, accessor.getEvent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionEventBasedType_Names::EventOffset_Name) {
      EventOffsetChoiceType::deserialize(valueType.second, accessor.enableEventOffset(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionEventBasedType_Names::EventWindow_Name) {
      EventWindowChoiceType::deserialize(valueType.second, accessor.enableEventWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionEventBasedType_Names::AlternateReferenceObject_Name) {
      ReferenceAssetKinematicsType::deserialize(valueType.second, accessor.enableAlternateReferenceObject(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RepetitionEventBasedType_Names::RepetitionAttempts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRepetitionAttempts(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
}

std::string RepetitionEventBasedType::serialize(const uci::type::RepetitionEventBasedType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RepetitionEventBasedType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RepetitionEventBasedType_Names::Extern_Type_Name);
  }
  RepetitionEventType::serialize(accessor.getEvent(), node, RepetitionEventBasedType_Names::Event_Name);
  if (accessor.hasEventOffset()) {
    EventOffsetChoiceType::serialize(accessor.getEventOffset(), node, RepetitionEventBasedType_Names::EventOffset_Name);
  }
  if (accessor.hasEventWindow()) {
    EventWindowChoiceType::serialize(accessor.getEventWindow(), node, RepetitionEventBasedType_Names::EventWindow_Name);
  }
  if (accessor.hasAlternateReferenceObject()) {
    ReferenceAssetKinematicsType::serialize(accessor.getAlternateReferenceObject(), node, RepetitionEventBasedType_Names::AlternateReferenceObject_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRepetitionAttempts(), node, RepetitionEventBasedType_Names::RepetitionAttempts_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RepetitionEventBasedType>().release());
}

uci::type::RepetitionEventBasedType& RepetitionEventBasedType::create(const uci::type::RepetitionEventBasedType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RepetitionEventBasedType> newAccessor{boost::make_unique<asb_uci::type::RepetitionEventBasedType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RepetitionEventBasedType::destroy(uci::type::RepetitionEventBasedType& accessor) {
  delete dynamic_cast<asb_uci::type::RepetitionEventBasedType*>(&accessor);
}

} // namespace type

} // namespace uci

