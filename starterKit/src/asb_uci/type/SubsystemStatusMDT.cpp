/** @file SubsystemStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AboutType.h"
#include "asb_uci/type/ComponentType.h"
#include "asb_uci/type/ProcessingStatusEnum.h"
#include "asb_uci/type/StateTransitionStatusEnum.h"
#include "asb_uci/type/SubsystemEnabledSettingType.h"
#include "asb_uci/type/SubsystemExtendedStatusPET.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SubsystemStateEnum.h"
#include "asb_uci/type/SubsystemSupportedSettingType.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AboutType.h"
#include "uci/type/ComponentType.h"
#include "uci/type/ProcessingStatusEnum.h"
#include "uci/type/StateTransitionStatusEnum.h"
#include "uci/type/SubsystemEnabledSettingType.h"
#include "uci/type/SubsystemExtendedStatusPET.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemStateEnum.h"
#include "uci/type/SubsystemStatusMDT.h"
#include "uci/type/SubsystemSupportedSettingType.h"
#include "uci/type/VisibleString256Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemStatusMDT::SubsystemStatusMDT()
  : subsystemID_Accessor{boost::make_unique<SubsystemID_Type>()},
    subsystemState_Accessor{boost::make_unique<SubsystemStateEnum>()},
    enabledSetting_Accessor{boost::make_unique<EnabledSetting>(0, 8)},
    commandableSubsystemSettingParameters_Accessor{boost::make_unique<CommandableSubsystemSettingParameters>(0, 8)},
    commandableSubsystemState_Accessor{boost::make_unique<CommandableSubsystemState>(0, 14)},
    about_Accessor{boost::make_unique<AboutType>()},
    subsystemComponent_Accessor{boost::make_unique<SubsystemComponent>(0, SIZE_MAX)} {
}

SubsystemStatusMDT::~SubsystemStatusMDT() = default;

void SubsystemStatusMDT::copy(const uci::type::SubsystemStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void SubsystemStatusMDT::copyImpl(const uci::type::SubsystemStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemStatusMDT&>(accessor);
    setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    setSubsystemState(*(accessorImpl.subsystemState_Accessor));
    if (accessorImpl.subsystemStateDescription_Accessor) {
      setSubsystemStateDescription(*(accessorImpl.subsystemStateDescription_Accessor));
    } else {
      subsystemStateDescription_Accessor.reset();
    }
    setEnabledSetting(*(accessorImpl.enabledSetting_Accessor));
    setCommandableSubsystemSettingParameters(*(accessorImpl.commandableSubsystemSettingParameters_Accessor));
    if (accessorImpl.eraseStatus_Accessor) {
      setEraseStatus(*(accessorImpl.eraseStatus_Accessor));
    } else {
      eraseStatus_Accessor.reset();
    }
    if (accessorImpl.stateTransitionStatus_Accessor) {
      setStateTransitionStatus(*(accessorImpl.stateTransitionStatus_Accessor));
    } else {
      stateTransitionStatus_Accessor.reset();
    }
    setCommandableSubsystemState(*(accessorImpl.commandableSubsystemState_Accessor));
    setAbout(*(accessorImpl.about_Accessor));
    if (accessorImpl.extendedStatus_Accessor) {
      setExtendedStatus(*(accessorImpl.extendedStatus_Accessor));
    } else {
      extendedStatus_Accessor.reset();
    }
    setSubsystemComponent(*(accessorImpl.subsystemComponent_Accessor));
  }
}

void SubsystemStatusMDT::reset() noexcept {
  subsystemID_Accessor->reset();
  subsystemState_Accessor->reset();
  subsystemStateDescription_Accessor.reset();
  enabledSetting_Accessor->reset();
  commandableSubsystemSettingParameters_Accessor->reset();
  eraseStatus_Accessor.reset();
  stateTransitionStatus_Accessor.reset();
  commandableSubsystemState_Accessor->reset();
  about_Accessor->reset();
  extendedStatus_Accessor.reset();
  subsystemComponent_Accessor->reset();
}

const uci::type::SubsystemID_Type& SubsystemStatusMDT::getSubsystemID() const {
  return *subsystemID_Accessor;
}

uci::type::SubsystemID_Type& SubsystemStatusMDT::getSubsystemID() {
  return *subsystemID_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemStateEnum& SubsystemStatusMDT::getSubsystemState() const {
  return *subsystemState_Accessor;
}

uci::type::SubsystemStateEnum& SubsystemStatusMDT::getSubsystemState() {
  return *subsystemState_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemState(const uci::type::SubsystemStateEnum& accessor) {
  if (&accessor != subsystemState_Accessor.get()) {
    subsystemState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemState(uci::type::SubsystemStateEnum::EnumerationItem value) {
  subsystemState_Accessor->setValue(value);
  return *this;
}


uci::type::VisibleString256Type& SubsystemStatusMDT::getSubsystemStateDescription_() const {
  if (subsystemStateDescription_Accessor) {
    return *subsystemStateDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemStateDescription(): An attempt was made to get an optional field that was not enabled, call hasSubsystemStateDescription() to determine if it is safe to call getSubsystemStateDescription()");
}

const uci::type::VisibleString256Type& SubsystemStatusMDT::getSubsystemStateDescription() const {
  return getSubsystemStateDescription_();
}

uci::type::VisibleString256Type& SubsystemStatusMDT::getSubsystemStateDescription() {
  return getSubsystemStateDescription_();
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemStateDescription(const uci::type::VisibleString256Type& value) {
  return setSubsystemStateDescription(value.c_str());
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemStateDescription(const std::string& value) {
  return setSubsystemStateDescription(value.c_str());
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemStateDescription(const char* value) {
  enableSubsystemStateDescription().setStringValue(value);
  return *this;
}

bool SubsystemStatusMDT::hasSubsystemStateDescription() const noexcept {
  return static_cast<bool>(subsystemStateDescription_Accessor);
}

uci::type::VisibleString256Type& SubsystemStatusMDT::enableSubsystemStateDescription(uci::base::accessorType::AccessorType type) {
  if (!subsystemStateDescription_Accessor) {
    subsystemStateDescription_Accessor = VisibleString256Type::create(type);
  }
  return *subsystemStateDescription_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::clearSubsystemStateDescription() noexcept {
  subsystemStateDescription_Accessor.reset();
  return *this;
}

const uci::type::SubsystemStatusMDT::EnabledSetting& SubsystemStatusMDT::getEnabledSetting() const {
  return *enabledSetting_Accessor;
}

uci::type::SubsystemStatusMDT::EnabledSetting& SubsystemStatusMDT::getEnabledSetting() {
  return *enabledSetting_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setEnabledSetting(const uci::type::SubsystemStatusMDT::EnabledSetting& accessor) {
  if (&accessor != enabledSetting_Accessor.get()) {
    enabledSetting_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& SubsystemStatusMDT::getCommandableSubsystemSettingParameters() const {
  return *commandableSubsystemSettingParameters_Accessor;
}

uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& SubsystemStatusMDT::getCommandableSubsystemSettingParameters() {
  return *commandableSubsystemSettingParameters_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setCommandableSubsystemSettingParameters(const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& accessor) {
  if (&accessor != commandableSubsystemSettingParameters_Accessor.get()) {
    commandableSubsystemSettingParameters_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ProcessingStatusEnum& SubsystemStatusMDT::getEraseStatus_() const {
  if (eraseStatus_Accessor) {
    return *eraseStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getEraseStatus(): An attempt was made to get an optional field that was not enabled, call hasEraseStatus() to determine if it is safe to call getEraseStatus()");
}

const uci::type::ProcessingStatusEnum& SubsystemStatusMDT::getEraseStatus() const {
  return getEraseStatus_();
}

uci::type::ProcessingStatusEnum& SubsystemStatusMDT::getEraseStatus() {
  return getEraseStatus_();
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setEraseStatus(const uci::type::ProcessingStatusEnum& accessor) {
  enableEraseStatus();
  if (&accessor != eraseStatus_Accessor.get()) {
    eraseStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setEraseStatus(const uci::type::ProcessingStatusEnum::EnumerationItem value) {
  enableEraseStatus().setValue(value);
  return *this;
}

bool SubsystemStatusMDT::hasEraseStatus() const noexcept {
  return static_cast<bool>(eraseStatus_Accessor);
}

uci::type::ProcessingStatusEnum& SubsystemStatusMDT::enableEraseStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::processingStatusEnum : type};
  if ((!eraseStatus_Accessor) || (eraseStatus_Accessor->getAccessorType() != requestedType)) {
    eraseStatus_Accessor = ProcessingStatusEnum::create(requestedType);
    if (!eraseStatus_Accessor) {
      throw uci::base::UCIException("Error in enableEraseStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eraseStatus_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::clearEraseStatus() noexcept {
  eraseStatus_Accessor.reset();
  return *this;
}

uci::type::StateTransitionStatusEnum& SubsystemStatusMDT::getStateTransitionStatus_() const {
  if (stateTransitionStatus_Accessor) {
    return *stateTransitionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getStateTransitionStatus(): An attempt was made to get an optional field that was not enabled, call hasStateTransitionStatus() to determine if it is safe to call getStateTransitionStatus()");
}

const uci::type::StateTransitionStatusEnum& SubsystemStatusMDT::getStateTransitionStatus() const {
  return getStateTransitionStatus_();
}

uci::type::StateTransitionStatusEnum& SubsystemStatusMDT::getStateTransitionStatus() {
  return getStateTransitionStatus_();
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setStateTransitionStatus(const uci::type::StateTransitionStatusEnum& accessor) {
  enableStateTransitionStatus();
  if (&accessor != stateTransitionStatus_Accessor.get()) {
    stateTransitionStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setStateTransitionStatus(const uci::type::StateTransitionStatusEnum::EnumerationItem value) {
  enableStateTransitionStatus().setValue(value);
  return *this;
}

bool SubsystemStatusMDT::hasStateTransitionStatus() const noexcept {
  return static_cast<bool>(stateTransitionStatus_Accessor);
}

uci::type::StateTransitionStatusEnum& SubsystemStatusMDT::enableStateTransitionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::stateTransitionStatusEnum : type};
  if ((!stateTransitionStatus_Accessor) || (stateTransitionStatus_Accessor->getAccessorType() != requestedType)) {
    stateTransitionStatus_Accessor = StateTransitionStatusEnum::create(requestedType);
    if (!stateTransitionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableStateTransitionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stateTransitionStatus_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::clearStateTransitionStatus() noexcept {
  stateTransitionStatus_Accessor.reset();
  return *this;
}

const uci::type::SubsystemStatusMDT::CommandableSubsystemState& SubsystemStatusMDT::getCommandableSubsystemState() const {
  return *commandableSubsystemState_Accessor;
}

uci::type::SubsystemStatusMDT::CommandableSubsystemState& SubsystemStatusMDT::getCommandableSubsystemState() {
  return *commandableSubsystemState_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setCommandableSubsystemState(const uci::type::SubsystemStatusMDT::CommandableSubsystemState& accessor) {
  if (&accessor != commandableSubsystemState_Accessor.get()) {
    commandableSubsystemState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AboutType& SubsystemStatusMDT::getAbout() const {
  return *about_Accessor;
}

uci::type::AboutType& SubsystemStatusMDT::getAbout() {
  return *about_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setAbout(const uci::type::AboutType& accessor) {
  if (&accessor != about_Accessor.get()) {
    about_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemExtendedStatusPET& SubsystemStatusMDT::getExtendedStatus_() const {
  if (extendedStatus_Accessor) {
    return *extendedStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getExtendedStatus(): An attempt was made to get an optional field that was not enabled, call hasExtendedStatus() to determine if it is safe to call getExtendedStatus()");
}

const uci::type::SubsystemExtendedStatusPET& SubsystemStatusMDT::getExtendedStatus() const {
  return getExtendedStatus_();
}

uci::type::SubsystemExtendedStatusPET& SubsystemStatusMDT::getExtendedStatus() {
  return getExtendedStatus_();
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setExtendedStatus(const uci::type::SubsystemExtendedStatusPET& accessor) {
  enableExtendedStatus(accessor.getAccessorType());
  if (&accessor != extendedStatus_Accessor.get()) {
    extendedStatus_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SubsystemStatusMDT::hasExtendedStatus() const noexcept {
  return static_cast<bool>(extendedStatus_Accessor);
}

uci::type::SubsystemExtendedStatusPET& SubsystemStatusMDT::enableExtendedStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemExtendedStatusPET : type};
  if ((!extendedStatus_Accessor) || (extendedStatus_Accessor->getAccessorType() != requestedType)) {
    extendedStatus_Accessor = SubsystemExtendedStatusPET::create(requestedType);
    if (!extendedStatus_Accessor) {
      throw uci::base::UCIException("Error in enableExtendedStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *extendedStatus_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::clearExtendedStatus() noexcept {
  extendedStatus_Accessor.reset();
  return *this;
}

const uci::type::SubsystemStatusMDT::SubsystemComponent& SubsystemStatusMDT::getSubsystemComponent() const {
  return *subsystemComponent_Accessor;
}

uci::type::SubsystemStatusMDT::SubsystemComponent& SubsystemStatusMDT::getSubsystemComponent() {
  return *subsystemComponent_Accessor;
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::setSubsystemComponent(const uci::type::SubsystemStatusMDT::SubsystemComponent& accessor) {
  if (&accessor != subsystemComponent_Accessor.get()) {
    subsystemComponent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SubsystemStatusMDT> SubsystemStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemStatusMDT : type};
  return (requestedType == uci::type::accessorType::subsystemStatusMDT) ? boost::make_unique<SubsystemStatusMDT>() : nullptr;
}

/**  */
namespace SubsystemStatusMDT_Names {

constexpr const char* Extern_Type_Name{"SubsystemStatusMDT"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* SubsystemState_Name{"SubsystemState"};
constexpr const char* SubsystemStateDescription_Name{"SubsystemStateDescription"};
constexpr const char* EnabledSetting_Name{"EnabledSetting"};
constexpr const char* CommandableSubsystemSettingParameters_Name{"CommandableSubsystemSettingParameters"};
constexpr const char* EraseStatus_Name{"EraseStatus"};
constexpr const char* StateTransitionStatus_Name{"StateTransitionStatus"};
constexpr const char* CommandableSubsystemState_Name{"CommandableSubsystemState"};
constexpr const char* About_Name{"About"};
constexpr const char* ExtendedStatus_Name{"ExtendedStatus"};
constexpr const char* SubsystemComponent_Name{"SubsystemComponent"};

} // namespace SubsystemStatusMDT_Names

void SubsystemStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSubsystemState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemStateDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSubsystemStateDescription(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::EnabledSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::EnabledSetting& boundedList = accessor.getEnabledSetting();
        const uci::type::SubsystemStatusMDT::EnabledSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemEnabledSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::CommandableSubsystemSettingParameters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& boundedList = accessor.getCommandableSubsystemSettingParameters();
        const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SubsystemSupportedSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::EraseStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEraseStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::StateTransitionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableStateTransitionStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::CommandableSubsystemState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::CommandableSubsystemState& boundedList = accessor.getCommandableSubsystemState();
        const uci::type::SubsystemStatusMDT::CommandableSubsystemState::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::About_Name) {
      AboutType::deserialize(valueType.second, accessor.getAbout(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::ExtendedStatus_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExtendedStatus(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemComponent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::SubsystemComponent& boundedList = accessor.getSubsystemComponent();
        const uci::type::SubsystemStatusMDT::SubsystemComponent::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string SubsystemStatusMDT::serialize(const uci::type::SubsystemStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemStatusMDT_Names::Extern_Type_Name);
  }
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SubsystemStatusMDT_Names::SubsystemID_Name);
  SubsystemStateEnum::serialize(accessor.getSubsystemState(), node, SubsystemStatusMDT_Names::SubsystemState_Name, false);
  if (accessor.hasSubsystemStateDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getSubsystemStateDescription(), node, SubsystemStatusMDT_Names::SubsystemStateDescription_Name);
  }
  {
    const uci::type::SubsystemStatusMDT::EnabledSetting& boundedList = accessor.getEnabledSetting();
    for (uci::type::SubsystemStatusMDT::EnabledSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemEnabledSettingType::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::EnabledSetting_Name);
    }
  }
  {
    const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& boundedList = accessor.getCommandableSubsystemSettingParameters();
    for (uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SubsystemSupportedSettingType::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::CommandableSubsystemSettingParameters_Name);
    }
  }
  if (accessor.hasEraseStatus()) {
    ProcessingStatusEnum::serialize(accessor.getEraseStatus(), node, SubsystemStatusMDT_Names::EraseStatus_Name, false);
  }
  if (accessor.hasStateTransitionStatus()) {
    StateTransitionStatusEnum::serialize(accessor.getStateTransitionStatus(), node, SubsystemStatusMDT_Names::StateTransitionStatus_Name, false);
  }
  {
    const uci::type::SubsystemStatusMDT::CommandableSubsystemState& boundedList = accessor.getCommandableSubsystemState();
    for (uci::type::SubsystemStatusMDT::CommandableSubsystemState::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SubsystemStateEnum::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::CommandableSubsystemState_Name, false);
    }
  }
  AboutType::serialize(accessor.getAbout(), node, SubsystemStatusMDT_Names::About_Name);
  if (accessor.hasExtendedStatus()) {
    SubsystemExtendedStatusPET::serialize(accessor.getExtendedStatus(), node, SubsystemStatusMDT_Names::ExtendedStatus_Name);
  }
  {
    const uci::type::SubsystemStatusMDT::SubsystemComponent& boundedList = accessor.getSubsystemComponent();
    for (uci::type::SubsystemStatusMDT::SubsystemComponent::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentType::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::SubsystemComponent_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemStatusMDT>().release());
}

uci::type::SubsystemStatusMDT& SubsystemStatusMDT::create(const uci::type::SubsystemStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemStatusMDT> newAccessor{boost::make_unique<asb_uci::type::SubsystemStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemStatusMDT::destroy(uci::type::SubsystemStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

