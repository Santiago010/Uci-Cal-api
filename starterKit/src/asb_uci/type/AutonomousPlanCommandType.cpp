/** @file AutonomousPlanCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AutonomousPlanCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "asb_uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "asb_uci/type/PlanPartsType.h"
#include "asb_uci/type/PlanningProcessID_Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AutonomousPlanCommandType.h"
#include "uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "uci/type/PlanPartsType.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AutonomousPlanCommandType::AutonomousPlanCommandType()
  : planningProcessID_Accessor{boost::make_unique<PlanningProcessID_Type>()},
    otherSystemConstrainingPlans_Accessor{boost::make_unique<OtherSystemConstrainingPlans>(0, 4)} {
}

AutonomousPlanCommandType::~AutonomousPlanCommandType() = default;

void AutonomousPlanCommandType::copy(const uci::type::AutonomousPlanCommandType& accessor) {
  copyImpl(accessor, false);
}

void AutonomousPlanCommandType::copyImpl(const uci::type::AutonomousPlanCommandType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::autonomousPlanCommandType)) {
      const auto& accessorImpl = dynamic_cast<const AutonomousPlanCommandType&>(accessor);
      setPlanningProcessID(*(accessorImpl.planningProcessID_Accessor));
      if (accessorImpl.constrainingPlans_Accessor) {
        setConstrainingPlans(*(accessorImpl.constrainingPlans_Accessor));
      } else {
        constrainingPlans_Accessor.reset();
      }
      setOtherSystemConstrainingPlans(*(accessorImpl.otherSystemConstrainingPlans_Accessor));
      if (accessorImpl.outputPlanParts_Accessor) {
        setOutputPlanParts(*(accessorImpl.outputPlanParts_Accessor));
      } else {
        outputPlanParts_Accessor.reset();
      }
      setResultsInMissionPlan(accessorImpl.resultsInMissionPlan_Accessor);
      setForPlanningUseOnly(accessorImpl.forPlanningUseOnly_Accessor);
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void AutonomousPlanCommandType::reset() noexcept {
  planningProcessID_Accessor->reset();
  constrainingPlans_Accessor.reset();
  otherSystemConstrainingPlans_Accessor->reset();
  outputPlanParts_Accessor.reset();
  resultsInMissionPlan_Accessor = false;
  forPlanningUseOnly_Accessor = false;
}

const uci::type::PlanningProcessID_Type& AutonomousPlanCommandType::getPlanningProcessID() const {
  return *planningProcessID_Accessor;
}

uci::type::PlanningProcessID_Type& AutonomousPlanCommandType::getPlanningProcessID() {
  return *planningProcessID_Accessor;
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::setPlanningProcessID(const uci::type::PlanningProcessID_Type& accessor) {
  if (&accessor != planningProcessID_Accessor.get()) {
    planningProcessID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AutonomousPlanningConstrainingPlansType& AutonomousPlanCommandType::getConstrainingPlans_() const {
  if (constrainingPlans_Accessor) {
    return *constrainingPlans_Accessor;
  }
  throw uci::base::UCIException("Error in getConstrainingPlans(): An attempt was made to get an optional field that was not enabled, call hasConstrainingPlans() to determine if it is safe to call getConstrainingPlans()");
}

const uci::type::AutonomousPlanningConstrainingPlansType& AutonomousPlanCommandType::getConstrainingPlans() const {
  return getConstrainingPlans_();
}

uci::type::AutonomousPlanningConstrainingPlansType& AutonomousPlanCommandType::getConstrainingPlans() {
  return getConstrainingPlans_();
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::setConstrainingPlans(const uci::type::AutonomousPlanningConstrainingPlansType& accessor) {
  enableConstrainingPlans(accessor.getAccessorType());
  if (&accessor != constrainingPlans_Accessor.get()) {
    constrainingPlans_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AutonomousPlanCommandType::hasConstrainingPlans() const noexcept {
  return static_cast<bool>(constrainingPlans_Accessor);
}

uci::type::AutonomousPlanningConstrainingPlansType& AutonomousPlanCommandType::enableConstrainingPlans(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::autonomousPlanningConstrainingPlansType : type};
  if ((!constrainingPlans_Accessor) || (constrainingPlans_Accessor->getAccessorType() != requestedType)) {
    constrainingPlans_Accessor = AutonomousPlanningConstrainingPlansType::create(requestedType);
    if (!constrainingPlans_Accessor) {
      throw uci::base::UCIException("Error in enableConstrainingPlans(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *constrainingPlans_Accessor;
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::clearConstrainingPlans() noexcept {
  constrainingPlans_Accessor.reset();
  return *this;
}

const uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans& AutonomousPlanCommandType::getOtherSystemConstrainingPlans() const {
  return *otherSystemConstrainingPlans_Accessor;
}

uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans& AutonomousPlanCommandType::getOtherSystemConstrainingPlans() {
  return *otherSystemConstrainingPlans_Accessor;
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::setOtherSystemConstrainingPlans(const uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans& accessor) {
  if (&accessor != otherSystemConstrainingPlans_Accessor.get()) {
    otherSystemConstrainingPlans_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanPartsType& AutonomousPlanCommandType::getOutputPlanParts_() const {
  if (outputPlanParts_Accessor) {
    return *outputPlanParts_Accessor;
  }
  throw uci::base::UCIException("Error in getOutputPlanParts(): An attempt was made to get an optional field that was not enabled, call hasOutputPlanParts() to determine if it is safe to call getOutputPlanParts()");
}

const uci::type::PlanPartsType& AutonomousPlanCommandType::getOutputPlanParts() const {
  return getOutputPlanParts_();
}

uci::type::PlanPartsType& AutonomousPlanCommandType::getOutputPlanParts() {
  return getOutputPlanParts_();
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::setOutputPlanParts(const uci::type::PlanPartsType& accessor) {
  enableOutputPlanParts(accessor.getAccessorType());
  if (&accessor != outputPlanParts_Accessor.get()) {
    outputPlanParts_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AutonomousPlanCommandType::hasOutputPlanParts() const noexcept {
  return static_cast<bool>(outputPlanParts_Accessor);
}

uci::type::PlanPartsType& AutonomousPlanCommandType::enableOutputPlanParts(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planPartsType : type};
  if ((!outputPlanParts_Accessor) || (outputPlanParts_Accessor->getAccessorType() != requestedType)) {
    outputPlanParts_Accessor = PlanPartsType::create(requestedType);
    if (!outputPlanParts_Accessor) {
      throw uci::base::UCIException("Error in enableOutputPlanParts(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *outputPlanParts_Accessor;
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::clearOutputPlanParts() noexcept {
  outputPlanParts_Accessor.reset();
  return *this;
}

xs::Boolean AutonomousPlanCommandType::getResultsInMissionPlan() const {
  return resultsInMissionPlan_Accessor;
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::setResultsInMissionPlan(xs::Boolean value) {
  resultsInMissionPlan_Accessor = value;
  return *this;
}


xs::Boolean AutonomousPlanCommandType::getForPlanningUseOnly() const {
  return forPlanningUseOnly_Accessor;
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::setForPlanningUseOnly(xs::Boolean value) {
  forPlanningUseOnly_Accessor = value;
  return *this;
}


std::unique_ptr<AutonomousPlanCommandType> AutonomousPlanCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::autonomousPlanCommandType : type};
  return std::unique_ptr<AutonomousPlanCommandType>(dynamic_cast<AutonomousPlanCommandType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace AutonomousPlanCommandType_Names {

constexpr const char* Extern_Type_Name{"AutonomousPlanCommandType"};
constexpr const char* PlanningProcessID_Name{"PlanningProcessID"};
constexpr const char* ConstrainingPlans_Name{"ConstrainingPlans"};
constexpr const char* OtherSystemConstrainingPlans_Name{"OtherSystemConstrainingPlans"};
constexpr const char* OutputPlanParts_Name{"OutputPlanParts"};
constexpr const char* ResultsInMissionPlan_Name{"ResultsInMissionPlan"};
constexpr const char* ForPlanningUseOnly_Name{"ForPlanningUseOnly"};

} // namespace AutonomousPlanCommandType_Names

void AutonomousPlanCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AutonomousPlanCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AutonomousPlanCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AutonomousPlanCommandType_Names::PlanningProcessID_Name) {
      PlanningProcessID_Type::deserialize(valueType.second, accessor.getPlanningProcessID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AutonomousPlanCommandType_Names::ConstrainingPlans_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableConstrainingPlans(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AutonomousPlanCommandType_Names::OtherSystemConstrainingPlans_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans& boundedList = accessor.getOtherSystemConstrainingPlans();
        const uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::AutonomousPlanningOtherSystemConstrainingPlansType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AutonomousPlanCommandType_Names::OutputPlanParts_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOutputPlanParts(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AutonomousPlanCommandType_Names::ResultsInMissionPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResultsInMissionPlan(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + AutonomousPlanCommandType_Names::ForPlanningUseOnly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForPlanningUseOnly(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string AutonomousPlanCommandType::serialize(const uci::type::AutonomousPlanCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AutonomousPlanCommandType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::autonomousPlanCommandType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, AutonomousPlanCommandType_Names::Extern_Type_Name);
    }
    PlanningProcessID_Type::serialize(accessor.getPlanningProcessID(), node, AutonomousPlanCommandType_Names::PlanningProcessID_Name);
    if (accessor.hasConstrainingPlans()) {
      AutonomousPlanningConstrainingPlansType::serialize(accessor.getConstrainingPlans(), node, AutonomousPlanCommandType_Names::ConstrainingPlans_Name);
    }
    {
      const uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans& boundedList = accessor.getOtherSystemConstrainingPlans();
      for (uci::type::AutonomousPlanCommandType::OtherSystemConstrainingPlans::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::AutonomousPlanningOtherSystemConstrainingPlansType::serialize(boundedList.at(i), node, AutonomousPlanCommandType_Names::OtherSystemConstrainingPlans_Name);
      }
    }
    if (accessor.hasOutputPlanParts()) {
      PlanPartsType::serialize(accessor.getOutputPlanParts(), node, AutonomousPlanCommandType_Names::OutputPlanParts_Name);
    }
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getResultsInMissionPlan(), node, AutonomousPlanCommandType_Names::ResultsInMissionPlan_Name);
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getForPlanningUseOnly(), node, AutonomousPlanCommandType_Names::ForPlanningUseOnly_Name);
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AutonomousPlanCommandType>().release());
}

uci::type::AutonomousPlanCommandType& AutonomousPlanCommandType::create(const uci::type::AutonomousPlanCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AutonomousPlanCommandType> newAccessor{boost::make_unique<asb_uci::type::AutonomousPlanCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AutonomousPlanCommandType::destroy(uci::type::AutonomousPlanCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::AutonomousPlanCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

