/** @file SMTI_CollectionOptionsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SMTI_CollectionOptionsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "asb_uci/type/HRR_OptionsType.h"
#include "asb_uci/type/RadarCollectionOptionsType.h"
#include "asb_uci/type/RangeDopplerResolutionType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "uci/type/DecibelType.h"
#include "uci/type/HRR_OptionsType.h"
#include "uci/type/RangeDopplerResolutionType.h"
#include "uci/type/SMTI_CollectionOptionsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_CollectionOptionsType::SMTI_CollectionOptionsType() = default;

SMTI_CollectionOptionsType::~SMTI_CollectionOptionsType() = default;

void SMTI_CollectionOptionsType::copy(const uci::type::SMTI_CollectionOptionsType& accessor) {
  copyImpl(accessor, false);
}

void SMTI_CollectionOptionsType::copyImpl(const uci::type::SMTI_CollectionOptionsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    RadarCollectionOptionsType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SMTI_CollectionOptionsType&>(accessor);
    if (accessorImpl.hasTracking()) {
      setTracking(accessorImpl.getTracking());
    } else {
      clearTracking();
    }
    if (accessorImpl.hasFTI()) {
      setFTI(accessorImpl.getFTI());
    } else {
      clearFTI();
    }
    if (accessorImpl.resolution_Accessor) {
      setResolution(*(accessorImpl.resolution_Accessor));
    } else {
      resolution_Accessor.reset();
    }
    if (accessorImpl.hasSignalToNoiseRatio()) {
      setSignalToNoiseRatio(accessorImpl.getSignalToNoiseRatio());
    } else {
      clearSignalToNoiseRatio();
    }
    if (accessorImpl.hRR_Options_Accessor) {
      setHRR_Options(*(accessorImpl.hRR_Options_Accessor));
    } else {
      hRR_Options_Accessor.reset();
    }
    if (accessorImpl.cOARPS_SMTI_CollectionOption_Accessor) {
      setCOARPS_SMTI_CollectionOption(*(accessorImpl.cOARPS_SMTI_CollectionOption_Accessor));
    } else {
      cOARPS_SMTI_CollectionOption_Accessor.reset();
    }
  }
}

void SMTI_CollectionOptionsType::reset() noexcept {
  RadarCollectionOptionsType::reset();
  clearTracking();
  clearFTI();
  resolution_Accessor.reset();
  clearSignalToNoiseRatio();
  hRR_Options_Accessor.reset();
  cOARPS_SMTI_CollectionOption_Accessor.reset();
}

xs::Boolean SMTI_CollectionOptionsType::getTracking() const {
  if (tracking_Accessor) {
    return *tracking_Accessor;
  }
  throw uci::base::UCIException("Error in getTracking(): An attempt was made to get an optional field that was not enabled, call hasTracking() to determine if it is safe to call getTracking()");
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setTracking(xs::Boolean value) {
  tracking_Accessor = value;
  return *this;
}

bool SMTI_CollectionOptionsType::hasTracking() const noexcept {
  return tracking_Accessor.has_value();
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::clearTracking() noexcept {
  tracking_Accessor.reset();
  return *this;
}

xs::Boolean SMTI_CollectionOptionsType::getFTI() const {
  if (fTI_Accessor) {
    return *fTI_Accessor;
  }
  throw uci::base::UCIException("Error in getFTI(): An attempt was made to get an optional field that was not enabled, call hasFTI() to determine if it is safe to call getFTI()");
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setFTI(xs::Boolean value) {
  fTI_Accessor = value;
  return *this;
}

bool SMTI_CollectionOptionsType::hasFTI() const noexcept {
  return fTI_Accessor.has_value();
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::clearFTI() noexcept {
  fTI_Accessor.reset();
  return *this;
}

uci::type::RangeDopplerResolutionType& SMTI_CollectionOptionsType::getResolution_() const {
  if (resolution_Accessor) {
    return *resolution_Accessor;
  }
  throw uci::base::UCIException("Error in getResolution(): An attempt was made to get an optional field that was not enabled, call hasResolution() to determine if it is safe to call getResolution()");
}

const uci::type::RangeDopplerResolutionType& SMTI_CollectionOptionsType::getResolution() const {
  return getResolution_();
}

uci::type::RangeDopplerResolutionType& SMTI_CollectionOptionsType::getResolution() {
  return getResolution_();
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setResolution(const uci::type::RangeDopplerResolutionType& accessor) {
  enableResolution();
  if (&accessor != resolution_Accessor.get()) {
    resolution_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionOptionsType::hasResolution() const noexcept {
  return static_cast<bool>(resolution_Accessor);
}

uci::type::RangeDopplerResolutionType& SMTI_CollectionOptionsType::enableResolution(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rangeDopplerResolutionType : type};
  if ((!resolution_Accessor) || (resolution_Accessor->getAccessorType() != requestedType)) {
    resolution_Accessor = RangeDopplerResolutionType::create(requestedType);
    if (!resolution_Accessor) {
      throw uci::base::UCIException("Error in enableResolution(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resolution_Accessor;
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::clearResolution() noexcept {
  resolution_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SMTI_CollectionOptionsType::getSignalToNoiseRatio() const {
  if (signalToNoiseRatio_Accessor) {
    return *signalToNoiseRatio_Accessor;
  }
  throw uci::base::UCIException("Error in getSignalToNoiseRatio(): An attempt was made to get an optional field that was not enabled, call hasSignalToNoiseRatio() to determine if it is safe to call getSignalToNoiseRatio()");
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setSignalToNoiseRatio(uci::type::DecibelTypeValue value) {
  signalToNoiseRatio_Accessor = value;
  return *this;
}

bool SMTI_CollectionOptionsType::hasSignalToNoiseRatio() const noexcept {
  return signalToNoiseRatio_Accessor.has_value();
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::clearSignalToNoiseRatio() noexcept {
  signalToNoiseRatio_Accessor.reset();
  return *this;
}

uci::type::HRR_OptionsType& SMTI_CollectionOptionsType::getHRR_Options_() const {
  if (hRR_Options_Accessor) {
    return *hRR_Options_Accessor;
  }
  throw uci::base::UCIException("Error in getHRR_Options(): An attempt was made to get an optional field that was not enabled, call hasHRR_Options() to determine if it is safe to call getHRR_Options()");
}

const uci::type::HRR_OptionsType& SMTI_CollectionOptionsType::getHRR_Options() const {
  return getHRR_Options_();
}

uci::type::HRR_OptionsType& SMTI_CollectionOptionsType::getHRR_Options() {
  return getHRR_Options_();
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setHRR_Options(const uci::type::HRR_OptionsType& accessor) {
  enableHRR_Options();
  if (&accessor != hRR_Options_Accessor.get()) {
    hRR_Options_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_CollectionOptionsType::hasHRR_Options() const noexcept {
  return static_cast<bool>(hRR_Options_Accessor);
}

uci::type::HRR_OptionsType& SMTI_CollectionOptionsType::enableHRR_Options(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::hRR_OptionsType : type};
  if ((!hRR_Options_Accessor) || (hRR_Options_Accessor->getAccessorType() != requestedType)) {
    hRR_Options_Accessor = HRR_OptionsType::create(requestedType);
    if (!hRR_Options_Accessor) {
      throw uci::base::UCIException("Error in enableHRR_Options(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *hRR_Options_Accessor;
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::clearHRR_Options() noexcept {
  hRR_Options_Accessor.reset();
  return *this;
}

uci::type::COARPS_SMTI_CollectionOptionsEnum& SMTI_CollectionOptionsType::getCOARPS_SMTI_CollectionOption_() const {
  if (cOARPS_SMTI_CollectionOption_Accessor) {
    return *cOARPS_SMTI_CollectionOption_Accessor;
  }
  throw uci::base::UCIException("Error in getCOARPS_SMTI_CollectionOption(): An attempt was made to get an optional field that was not enabled, call hasCOARPS_SMTI_CollectionOption() to determine if it is safe to call getCOARPS_SMTI_CollectionOption()");
}

const uci::type::COARPS_SMTI_CollectionOptionsEnum& SMTI_CollectionOptionsType::getCOARPS_SMTI_CollectionOption() const {
  return getCOARPS_SMTI_CollectionOption_();
}

uci::type::COARPS_SMTI_CollectionOptionsEnum& SMTI_CollectionOptionsType::getCOARPS_SMTI_CollectionOption() {
  return getCOARPS_SMTI_CollectionOption_();
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setCOARPS_SMTI_CollectionOption(const uci::type::COARPS_SMTI_CollectionOptionsEnum& accessor) {
  enableCOARPS_SMTI_CollectionOption();
  if (&accessor != cOARPS_SMTI_CollectionOption_Accessor.get()) {
    cOARPS_SMTI_CollectionOption_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::setCOARPS_SMTI_CollectionOption(const uci::type::COARPS_SMTI_CollectionOptionsEnum::EnumerationItem value) {
  enableCOARPS_SMTI_CollectionOption().setValue(value);
  return *this;
}

bool SMTI_CollectionOptionsType::hasCOARPS_SMTI_CollectionOption() const noexcept {
  return static_cast<bool>(cOARPS_SMTI_CollectionOption_Accessor);
}

uci::type::COARPS_SMTI_CollectionOptionsEnum& SMTI_CollectionOptionsType::enableCOARPS_SMTI_CollectionOption(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cOARPS_SMTI_CollectionOptionsEnum : type};
  if ((!cOARPS_SMTI_CollectionOption_Accessor) || (cOARPS_SMTI_CollectionOption_Accessor->getAccessorType() != requestedType)) {
    cOARPS_SMTI_CollectionOption_Accessor = COARPS_SMTI_CollectionOptionsEnum::create(requestedType);
    if (!cOARPS_SMTI_CollectionOption_Accessor) {
      throw uci::base::UCIException("Error in enableCOARPS_SMTI_CollectionOption(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cOARPS_SMTI_CollectionOption_Accessor;
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::clearCOARPS_SMTI_CollectionOption() noexcept {
  cOARPS_SMTI_CollectionOption_Accessor.reset();
  return *this;
}

std::unique_ptr<SMTI_CollectionOptionsType> SMTI_CollectionOptionsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_CollectionOptionsType : type};
  return (requestedType == uci::type::accessorType::sMTI_CollectionOptionsType) ? boost::make_unique<SMTI_CollectionOptionsType>() : nullptr;
}

/**  */
namespace SMTI_CollectionOptionsType_Names {

constexpr const char* Extern_Type_Name{"SMTI_CollectionOptionsType"};
constexpr const char* Tracking_Name{"Tracking"};
constexpr const char* FTI_Name{"FTI"};
constexpr const char* Resolution_Name{"Resolution"};
constexpr const char* SignalToNoiseRatio_Name{"SignalToNoiseRatio"};
constexpr const char* HRR_Options_Name{"HRR_Options"};
constexpr const char* COARPS_SMTI_CollectionOption_Name{"COARPS_SMTI_CollectionOption"};

} // namespace SMTI_CollectionOptionsType_Names

void SMTI_CollectionOptionsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_CollectionOptionsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_CollectionOptionsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_CollectionOptionsType_Names::Tracking_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTracking(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_CollectionOptionsType_Names::FTI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFTI(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_CollectionOptionsType_Names::Resolution_Name) {
      RangeDopplerResolutionType::deserialize(valueType.second, accessor.enableResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_CollectionOptionsType_Names::SignalToNoiseRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSignalToNoiseRatio(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_CollectionOptionsType_Names::HRR_Options_Name) {
      HRR_OptionsType::deserialize(valueType.second, accessor.enableHRR_Options(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_CollectionOptionsType_Names::COARPS_SMTI_CollectionOption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCOARPS_SMTI_CollectionOption().setValueFromName(*value);
      }
    }
  }
  RadarCollectionOptionsType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SMTI_CollectionOptionsType::serialize(const uci::type::SMTI_CollectionOptionsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_CollectionOptionsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_CollectionOptionsType_Names::Extern_Type_Name);
  }
  RadarCollectionOptionsType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasTracking()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getTracking(), node, SMTI_CollectionOptionsType_Names::Tracking_Name);
  }
  if (accessor.hasFTI()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getFTI(), node, SMTI_CollectionOptionsType_Names::FTI_Name);
  }
  if (accessor.hasResolution()) {
    RangeDopplerResolutionType::serialize(accessor.getResolution(), node, SMTI_CollectionOptionsType_Names::Resolution_Name);
  }
  if (accessor.hasSignalToNoiseRatio()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSignalToNoiseRatio(), node, SMTI_CollectionOptionsType_Names::SignalToNoiseRatio_Name);
  }
  if (accessor.hasHRR_Options()) {
    HRR_OptionsType::serialize(accessor.getHRR_Options(), node, SMTI_CollectionOptionsType_Names::HRR_Options_Name);
  }
  if (accessor.hasCOARPS_SMTI_CollectionOption()) {
    COARPS_SMTI_CollectionOptionsEnum::serialize(accessor.getCOARPS_SMTI_CollectionOption(), node, SMTI_CollectionOptionsType_Names::COARPS_SMTI_CollectionOption_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_CollectionOptionsType>().release());
}

uci::type::SMTI_CollectionOptionsType& SMTI_CollectionOptionsType::create(const uci::type::SMTI_CollectionOptionsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_CollectionOptionsType> newAccessor{boost::make_unique<asb_uci::type::SMTI_CollectionOptionsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_CollectionOptionsType::destroy(uci::type::SMTI_CollectionOptionsType& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_CollectionOptionsType*>(&accessor);
}

} // namespace type

} // namespace uci

