/** @file RequirementPlanConstraintType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RequirementPlanConstraintType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActionPlanConstraintType.h"
#include "../../../include/asb_uci/type/EffectPlanConstraintType.h"
#include "../../../include/asb_uci/type/ResponsePlanConstraintType.h"
#include "../../../include/asb_uci/type/TaskPlanConstraintType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionPlanConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RequirementPlanConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponsePlanConstraintType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskPlanConstraintType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementPlanConstraintType::RequirementPlanConstraintType() = default;

RequirementPlanConstraintType::~RequirementPlanConstraintType() = default;

void RequirementPlanConstraintType::copy(const uci::type::RequirementPlanConstraintType& accessor) {
  copyImpl(accessor, false);
}

void RequirementPlanConstraintType::copyImpl(const uci::type::RequirementPlanConstraintType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementPlanConstraintType&>(accessor);
    if (accessorImpl.proposedEffectPlan_Accessor) {
      setProposedEffectPlan(*(accessorImpl.proposedEffectPlan_Accessor));
    } else {
      proposedEffectPlan_Accessor.reset();
    }
    if (accessorImpl.proposedActionPlan_Accessor) {
      setProposedActionPlan(*(accessorImpl.proposedActionPlan_Accessor));
    } else {
      proposedActionPlan_Accessor.reset();
    }
    if (accessorImpl.proposedTaskPlan_Accessor) {
      setProposedTaskPlan(*(accessorImpl.proposedTaskPlan_Accessor));
    } else {
      proposedTaskPlan_Accessor.reset();
    }
    if (accessorImpl.proposedResponsePlan_Accessor) {
      setProposedResponsePlan(*(accessorImpl.proposedResponsePlan_Accessor));
    } else {
      proposedResponsePlan_Accessor.reset();
    }
  }
}

void RequirementPlanConstraintType::reset() noexcept {
  proposedEffectPlan_Accessor.reset();
  proposedActionPlan_Accessor.reset();
  proposedTaskPlan_Accessor.reset();
  proposedResponsePlan_Accessor.reset();
}

uci::type::EffectPlanConstraintType& RequirementPlanConstraintType::getProposedEffectPlan_() const {
  if (proposedEffectPlan_Accessor) {
    return *proposedEffectPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getProposedEffectPlan(): An attempt was made to get an optional field that was not enabled, call hasProposedEffectPlan() to determine if it is safe to call getProposedEffectPlan()");
}

const uci::type::EffectPlanConstraintType& RequirementPlanConstraintType::getProposedEffectPlan() const {
  return getProposedEffectPlan_();
}

uci::type::EffectPlanConstraintType& RequirementPlanConstraintType::getProposedEffectPlan() {
  return getProposedEffectPlan_();
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::setProposedEffectPlan(const uci::type::EffectPlanConstraintType& accessor) {
  enableProposedEffectPlan();
  if (&accessor != proposedEffectPlan_Accessor.get()) {
    proposedEffectPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementPlanConstraintType::hasProposedEffectPlan() const noexcept {
  return static_cast<bool>(proposedEffectPlan_Accessor);
}

uci::type::EffectPlanConstraintType& RequirementPlanConstraintType::enableProposedEffectPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanConstraintType : type};
  if ((!proposedEffectPlan_Accessor) || (proposedEffectPlan_Accessor->getAccessorType() != requestedType)) {
    proposedEffectPlan_Accessor = EffectPlanConstraintType::create(requestedType);
    if (!proposedEffectPlan_Accessor) {
      throw uci::base::UCIException("Error in enableProposedEffectPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *proposedEffectPlan_Accessor;
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::clearProposedEffectPlan() noexcept {
  proposedEffectPlan_Accessor.reset();
  return *this;
}

uci::type::ActionPlanConstraintType& RequirementPlanConstraintType::getProposedActionPlan_() const {
  if (proposedActionPlan_Accessor) {
    return *proposedActionPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getProposedActionPlan(): An attempt was made to get an optional field that was not enabled, call hasProposedActionPlan() to determine if it is safe to call getProposedActionPlan()");
}

const uci::type::ActionPlanConstraintType& RequirementPlanConstraintType::getProposedActionPlan() const {
  return getProposedActionPlan_();
}

uci::type::ActionPlanConstraintType& RequirementPlanConstraintType::getProposedActionPlan() {
  return getProposedActionPlan_();
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::setProposedActionPlan(const uci::type::ActionPlanConstraintType& accessor) {
  enableProposedActionPlan();
  if (&accessor != proposedActionPlan_Accessor.get()) {
    proposedActionPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementPlanConstraintType::hasProposedActionPlan() const noexcept {
  return static_cast<bool>(proposedActionPlan_Accessor);
}

uci::type::ActionPlanConstraintType& RequirementPlanConstraintType::enableProposedActionPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanConstraintType : type};
  if ((!proposedActionPlan_Accessor) || (proposedActionPlan_Accessor->getAccessorType() != requestedType)) {
    proposedActionPlan_Accessor = ActionPlanConstraintType::create(requestedType);
    if (!proposedActionPlan_Accessor) {
      throw uci::base::UCIException("Error in enableProposedActionPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *proposedActionPlan_Accessor;
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::clearProposedActionPlan() noexcept {
  proposedActionPlan_Accessor.reset();
  return *this;
}

uci::type::TaskPlanConstraintType& RequirementPlanConstraintType::getProposedTaskPlan_() const {
  if (proposedTaskPlan_Accessor) {
    return *proposedTaskPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getProposedTaskPlan(): An attempt was made to get an optional field that was not enabled, call hasProposedTaskPlan() to determine if it is safe to call getProposedTaskPlan()");
}

const uci::type::TaskPlanConstraintType& RequirementPlanConstraintType::getProposedTaskPlan() const {
  return getProposedTaskPlan_();
}

uci::type::TaskPlanConstraintType& RequirementPlanConstraintType::getProposedTaskPlan() {
  return getProposedTaskPlan_();
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::setProposedTaskPlan(const uci::type::TaskPlanConstraintType& accessor) {
  enableProposedTaskPlan();
  if (&accessor != proposedTaskPlan_Accessor.get()) {
    proposedTaskPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementPlanConstraintType::hasProposedTaskPlan() const noexcept {
  return static_cast<bool>(proposedTaskPlan_Accessor);
}

uci::type::TaskPlanConstraintType& RequirementPlanConstraintType::enableProposedTaskPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskPlanConstraintType : type};
  if ((!proposedTaskPlan_Accessor) || (proposedTaskPlan_Accessor->getAccessorType() != requestedType)) {
    proposedTaskPlan_Accessor = TaskPlanConstraintType::create(requestedType);
    if (!proposedTaskPlan_Accessor) {
      throw uci::base::UCIException("Error in enableProposedTaskPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *proposedTaskPlan_Accessor;
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::clearProposedTaskPlan() noexcept {
  proposedTaskPlan_Accessor.reset();
  return *this;
}

uci::type::ResponsePlanConstraintType& RequirementPlanConstraintType::getProposedResponsePlan_() const {
  if (proposedResponsePlan_Accessor) {
    return *proposedResponsePlan_Accessor;
  }
  throw uci::base::UCIException("Error in getProposedResponsePlan(): An attempt was made to get an optional field that was not enabled, call hasProposedResponsePlan() to determine if it is safe to call getProposedResponsePlan()");
}

const uci::type::ResponsePlanConstraintType& RequirementPlanConstraintType::getProposedResponsePlan() const {
  return getProposedResponsePlan_();
}

uci::type::ResponsePlanConstraintType& RequirementPlanConstraintType::getProposedResponsePlan() {
  return getProposedResponsePlan_();
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::setProposedResponsePlan(const uci::type::ResponsePlanConstraintType& accessor) {
  enableProposedResponsePlan();
  if (&accessor != proposedResponsePlan_Accessor.get()) {
    proposedResponsePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RequirementPlanConstraintType::hasProposedResponsePlan() const noexcept {
  return static_cast<bool>(proposedResponsePlan_Accessor);
}

uci::type::ResponsePlanConstraintType& RequirementPlanConstraintType::enableProposedResponsePlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanConstraintType : type};
  if ((!proposedResponsePlan_Accessor) || (proposedResponsePlan_Accessor->getAccessorType() != requestedType)) {
    proposedResponsePlan_Accessor = ResponsePlanConstraintType::create(requestedType);
    if (!proposedResponsePlan_Accessor) {
      throw uci::base::UCIException("Error in enableProposedResponsePlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *proposedResponsePlan_Accessor;
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::clearProposedResponsePlan() noexcept {
  proposedResponsePlan_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementPlanConstraintType> RequirementPlanConstraintType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementPlanConstraintType : type};
  return (requestedType == uci::type::accessorType::requirementPlanConstraintType) ? boost::make_unique<RequirementPlanConstraintType>() : nullptr;
}

/**  */
namespace RequirementPlanConstraintType_Names {

constexpr const char* Extern_Type_Name{"RequirementPlanConstraintType"};
constexpr const char* ProposedEffectPlan_Name{"ProposedEffectPlan"};
constexpr const char* ProposedActionPlan_Name{"ProposedActionPlan"};
constexpr const char* ProposedTaskPlan_Name{"ProposedTaskPlan"};
constexpr const char* ProposedResponsePlan_Name{"ProposedResponsePlan"};

} // namespace RequirementPlanConstraintType_Names

void RequirementPlanConstraintType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementPlanConstraintType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementPlanConstraintType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementPlanConstraintType_Names::ProposedEffectPlan_Name) {
      EffectPlanConstraintType::deserialize(valueType.second, accessor.enableProposedEffectPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementPlanConstraintType_Names::ProposedActionPlan_Name) {
      ActionPlanConstraintType::deserialize(valueType.second, accessor.enableProposedActionPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementPlanConstraintType_Names::ProposedTaskPlan_Name) {
      TaskPlanConstraintType::deserialize(valueType.second, accessor.enableProposedTaskPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementPlanConstraintType_Names::ProposedResponsePlan_Name) {
      ResponsePlanConstraintType::deserialize(valueType.second, accessor.enableProposedResponsePlan(), nodeName, nsPrefix);
    }
  }
}

std::string RequirementPlanConstraintType::serialize(const uci::type::RequirementPlanConstraintType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementPlanConstraintType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementPlanConstraintType_Names::Extern_Type_Name);
  }
  if (accessor.hasProposedEffectPlan()) {
    EffectPlanConstraintType::serialize(accessor.getProposedEffectPlan(), node, RequirementPlanConstraintType_Names::ProposedEffectPlan_Name);
  }
  if (accessor.hasProposedActionPlan()) {
    ActionPlanConstraintType::serialize(accessor.getProposedActionPlan(), node, RequirementPlanConstraintType_Names::ProposedActionPlan_Name);
  }
  if (accessor.hasProposedTaskPlan()) {
    TaskPlanConstraintType::serialize(accessor.getProposedTaskPlan(), node, RequirementPlanConstraintType_Names::ProposedTaskPlan_Name);
  }
  if (accessor.hasProposedResponsePlan()) {
    ResponsePlanConstraintType::serialize(accessor.getProposedResponsePlan(), node, RequirementPlanConstraintType_Names::ProposedResponsePlan_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementPlanConstraintType>().release());
}

uci::type::RequirementPlanConstraintType& RequirementPlanConstraintType::create(const uci::type::RequirementPlanConstraintType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementPlanConstraintType> newAccessor{boost::make_unique<asb_uci::type::RequirementPlanConstraintType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementPlanConstraintType::destroy(uci::type::RequirementPlanConstraintType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementPlanConstraintType*>(&accessor);
}

} // namespace type

} // namespace uci

