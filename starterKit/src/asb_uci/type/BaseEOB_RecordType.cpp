/** @file BaseEOB_RecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/BaseEOB_RecordType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AlphanumericDashSpaceUnderscoreString3Type.h"
#include "asb_uci/type/EOB_CodesType.h"
#include "asb_uci/type/EOB_FixedPositionType.h"
#include "asb_uci/type/EOB_RecordID_Type.h"
#include "asb_uci/type/IdentityType.h"
#include "asb_uci/type/MobilityEnum.h"
#include "asb_uci/type/OB_OperationalStatusEnum.h"
#include "asb_uci/type/OrderOfBattleTimestampsType.h"
#include "asb_uci/type/SecurityInformationType.h"
#include "asb_uci/type/VisibleString512Type.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString3Type.h"
#include "uci/type/BaseEOB_RecordType.h"
#include "uci/type/EOB_CodesType.h"
#include "uci/type/EOB_FixedPositionType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/IdentityType.h"
#include "uci/type/MobilityEnum.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/VisibleString512Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

BaseEOB_RecordType::BaseEOB_RecordType()
  : securityInformation_Accessor{boost::make_unique<SecurityInformationType>()},
    eOB_RecordID_Accessor{boost::make_unique<EOB_RecordID_Type>()},
    timestamps_Accessor{boost::make_unique<OrderOfBattleTimestampsType>()},
    identity_Accessor{boost::make_unique<IdentityType>()},
    position_Accessor{boost::make_unique<EOB_FixedPositionType>()} {
}

BaseEOB_RecordType::~BaseEOB_RecordType() = default;

void BaseEOB_RecordType::copy(const uci::type::BaseEOB_RecordType& accessor) {
  copyImpl(accessor, false);
}

void BaseEOB_RecordType::copyImpl(const uci::type::BaseEOB_RecordType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::baseEOB_RecordType)) {
      const auto& accessorImpl = dynamic_cast<const BaseEOB_RecordType&>(accessor);
      setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
      setEOB_RecordID(*(accessorImpl.eOB_RecordID_Accessor));
      setTimestamps(*(accessorImpl.timestamps_Accessor));
      setIdentity(*(accessorImpl.identity_Accessor));
      setPosition(*(accessorImpl.position_Accessor));
      if (accessorImpl.mobility_Accessor) {
        setMobility(*(accessorImpl.mobility_Accessor));
      } else {
        mobility_Accessor.reset();
      }
      if (accessorImpl.eOB_Codes_Accessor) {
        setEOB_Codes(*(accessorImpl.eOB_Codes_Accessor));
      } else {
        eOB_Codes_Accessor.reset();
      }
      if (accessorImpl.siteOperationalStatus_Accessor) {
        setSiteOperationalStatus(*(accessorImpl.siteOperationalStatus_Accessor));
      } else {
        siteOperationalStatus_Accessor.reset();
      }
      if (accessorImpl.recordOwner_Accessor) {
        setRecordOwner(*(accessorImpl.recordOwner_Accessor));
      } else {
        recordOwner_Accessor.reset();
      }
      if (accessorImpl.remarksText_Accessor) {
        setRemarksText(*(accessorImpl.remarksText_Accessor));
      } else {
        remarksText_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void BaseEOB_RecordType::reset() noexcept {
  securityInformation_Accessor->reset();
  eOB_RecordID_Accessor->reset();
  timestamps_Accessor->reset();
  if (identity_Accessor->getAccessorType() != uci::type::accessorType::identityType) {
    identity_Accessor = boost::make_unique<IdentityType>();
  } else {
    identity_Accessor->reset();
  }
  position_Accessor->reset();
  mobility_Accessor.reset();
  eOB_Codes_Accessor.reset();
  siteOperationalStatus_Accessor.reset();
  recordOwner_Accessor.reset();
  remarksText_Accessor.reset();
}

const uci::type::SecurityInformationType& BaseEOB_RecordType::getSecurityInformation() const {
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& BaseEOB_RecordType::getSecurityInformation() {
  return *securityInformation_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EOB_RecordID_Type& BaseEOB_RecordType::getEOB_RecordID() const {
  return *eOB_RecordID_Accessor;
}

uci::type::EOB_RecordID_Type& BaseEOB_RecordType::getEOB_RecordID() {
  return *eOB_RecordID_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setEOB_RecordID(const uci::type::EOB_RecordID_Type& accessor) {
  if (&accessor != eOB_RecordID_Accessor.get()) {
    eOB_RecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderOfBattleTimestampsType& BaseEOB_RecordType::getTimestamps() const {
  return *timestamps_Accessor;
}

uci::type::OrderOfBattleTimestampsType& BaseEOB_RecordType::getTimestamps() {
  return *timestamps_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) {
  if (&accessor != timestamps_Accessor.get()) {
    timestamps_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::IdentityType& BaseEOB_RecordType::getIdentity() const {
  return *identity_Accessor;
}

uci::type::IdentityType& BaseEOB_RecordType::getIdentity() {
  return *identity_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setIdentity(const uci::type::IdentityType& accessor) {
  enableIdentity(accessor.getAccessorType());
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::IdentityType& BaseEOB_RecordType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::identityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = IdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

const uci::type::EOB_FixedPositionType& BaseEOB_RecordType::getPosition() const {
  return *position_Accessor;
}

uci::type::EOB_FixedPositionType& BaseEOB_RecordType::getPosition() {
  return *position_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setPosition(const uci::type::EOB_FixedPositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MobilityEnum& BaseEOB_RecordType::getMobility_() const {
  if (mobility_Accessor) {
    return *mobility_Accessor;
  }
  throw uci::base::UCIException("Error in getMobility(): An attempt was made to get an optional field that was not enabled, call hasMobility() to determine if it is safe to call getMobility()");
}

const uci::type::MobilityEnum& BaseEOB_RecordType::getMobility() const {
  return getMobility_();
}

uci::type::MobilityEnum& BaseEOB_RecordType::getMobility() {
  return getMobility_();
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setMobility(const uci::type::MobilityEnum& accessor) {
  enableMobility();
  if (&accessor != mobility_Accessor.get()) {
    mobility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setMobility(const uci::type::MobilityEnum::EnumerationItem value) {
  enableMobility().setValue(value);
  return *this;
}

bool BaseEOB_RecordType::hasMobility() const noexcept {
  return static_cast<bool>(mobility_Accessor);
}

uci::type::MobilityEnum& BaseEOB_RecordType::enableMobility(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mobilityEnum : type};
  if ((!mobility_Accessor) || (mobility_Accessor->getAccessorType() != requestedType)) {
    mobility_Accessor = MobilityEnum::create(requestedType);
    if (!mobility_Accessor) {
      throw uci::base::UCIException("Error in enableMobility(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mobility_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::clearMobility() noexcept {
  mobility_Accessor.reset();
  return *this;
}

uci::type::EOB_CodesType& BaseEOB_RecordType::getEOB_Codes_() const {
  if (eOB_Codes_Accessor) {
    return *eOB_Codes_Accessor;
  }
  throw uci::base::UCIException("Error in getEOB_Codes(): An attempt was made to get an optional field that was not enabled, call hasEOB_Codes() to determine if it is safe to call getEOB_Codes()");
}

const uci::type::EOB_CodesType& BaseEOB_RecordType::getEOB_Codes() const {
  return getEOB_Codes_();
}

uci::type::EOB_CodesType& BaseEOB_RecordType::getEOB_Codes() {
  return getEOB_Codes_();
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setEOB_Codes(const uci::type::EOB_CodesType& accessor) {
  enableEOB_Codes();
  if (&accessor != eOB_Codes_Accessor.get()) {
    eOB_Codes_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool BaseEOB_RecordType::hasEOB_Codes() const noexcept {
  return static_cast<bool>(eOB_Codes_Accessor);
}

uci::type::EOB_CodesType& BaseEOB_RecordType::enableEOB_Codes(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eOB_CodesType : type};
  if ((!eOB_Codes_Accessor) || (eOB_Codes_Accessor->getAccessorType() != requestedType)) {
    eOB_Codes_Accessor = EOB_CodesType::create(requestedType);
    if (!eOB_Codes_Accessor) {
      throw uci::base::UCIException("Error in enableEOB_Codes(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eOB_Codes_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::clearEOB_Codes() noexcept {
  eOB_Codes_Accessor.reset();
  return *this;
}

uci::type::OB_OperationalStatusEnum& BaseEOB_RecordType::getSiteOperationalStatus_() const {
  if (siteOperationalStatus_Accessor) {
    return *siteOperationalStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getSiteOperationalStatus(): An attempt was made to get an optional field that was not enabled, call hasSiteOperationalStatus() to determine if it is safe to call getSiteOperationalStatus()");
}

const uci::type::OB_OperationalStatusEnum& BaseEOB_RecordType::getSiteOperationalStatus() const {
  return getSiteOperationalStatus_();
}

uci::type::OB_OperationalStatusEnum& BaseEOB_RecordType::getSiteOperationalStatus() {
  return getSiteOperationalStatus_();
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setSiteOperationalStatus(const uci::type::OB_OperationalStatusEnum& accessor) {
  enableSiteOperationalStatus();
  if (&accessor != siteOperationalStatus_Accessor.get()) {
    siteOperationalStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setSiteOperationalStatus(const uci::type::OB_OperationalStatusEnum::EnumerationItem value) {
  enableSiteOperationalStatus().setValue(value);
  return *this;
}

bool BaseEOB_RecordType::hasSiteOperationalStatus() const noexcept {
  return static_cast<bool>(siteOperationalStatus_Accessor);
}

uci::type::OB_OperationalStatusEnum& BaseEOB_RecordType::enableSiteOperationalStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::oB_OperationalStatusEnum : type};
  if ((!siteOperationalStatus_Accessor) || (siteOperationalStatus_Accessor->getAccessorType() != requestedType)) {
    siteOperationalStatus_Accessor = OB_OperationalStatusEnum::create(requestedType);
    if (!siteOperationalStatus_Accessor) {
      throw uci::base::UCIException("Error in enableSiteOperationalStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *siteOperationalStatus_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::clearSiteOperationalStatus() noexcept {
  siteOperationalStatus_Accessor.reset();
  return *this;
}

uci::type::AlphanumericDashSpaceUnderscoreString3Type& BaseEOB_RecordType::getRecordOwner_() const {
  if (recordOwner_Accessor) {
    return *recordOwner_Accessor;
  }
  throw uci::base::UCIException("Error in getRecordOwner(): An attempt was made to get an optional field that was not enabled, call hasRecordOwner() to determine if it is safe to call getRecordOwner()");
}

const uci::type::AlphanumericDashSpaceUnderscoreString3Type& BaseEOB_RecordType::getRecordOwner() const {
  return getRecordOwner_();
}

uci::type::AlphanumericDashSpaceUnderscoreString3Type& BaseEOB_RecordType::getRecordOwner() {
  return getRecordOwner_();
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setRecordOwner(const uci::type::AlphanumericDashSpaceUnderscoreString3Type& value) {
  return setRecordOwner(value.c_str());
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setRecordOwner(const std::string& value) {
  return setRecordOwner(value.c_str());
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setRecordOwner(const char* value) {
  enableRecordOwner().setStringValue(value);
  return *this;
}

bool BaseEOB_RecordType::hasRecordOwner() const noexcept {
  return static_cast<bool>(recordOwner_Accessor);
}

uci::type::AlphanumericDashSpaceUnderscoreString3Type& BaseEOB_RecordType::enableRecordOwner(uci::base::accessorType::AccessorType type) {
  if (!recordOwner_Accessor) {
    recordOwner_Accessor = AlphanumericDashSpaceUnderscoreString3Type::create(type);
  }
  return *recordOwner_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::clearRecordOwner() noexcept {
  recordOwner_Accessor.reset();
  return *this;
}

uci::type::VisibleString512Type& BaseEOB_RecordType::getRemarksText_() const {
  if (remarksText_Accessor) {
    return *remarksText_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarksText(): An attempt was made to get an optional field that was not enabled, call hasRemarksText() to determine if it is safe to call getRemarksText()");
}

const uci::type::VisibleString512Type& BaseEOB_RecordType::getRemarksText() const {
  return getRemarksText_();
}

uci::type::VisibleString512Type& BaseEOB_RecordType::getRemarksText() {
  return getRemarksText_();
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setRemarksText(const uci::type::VisibleString512Type& value) {
  return setRemarksText(value.c_str());
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setRemarksText(const std::string& value) {
  return setRemarksText(value.c_str());
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::setRemarksText(const char* value) {
  enableRemarksText().setStringValue(value);
  return *this;
}

bool BaseEOB_RecordType::hasRemarksText() const noexcept {
  return static_cast<bool>(remarksText_Accessor);
}

uci::type::VisibleString512Type& BaseEOB_RecordType::enableRemarksText(uci::base::accessorType::AccessorType type) {
  if (!remarksText_Accessor) {
    remarksText_Accessor = VisibleString512Type::create(type);
  }
  return *remarksText_Accessor;
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::clearRemarksText() noexcept {
  remarksText_Accessor.reset();
  return *this;
}

std::unique_ptr<BaseEOB_RecordType> BaseEOB_RecordType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::baseEOB_RecordType : type};
  return std::unique_ptr<BaseEOB_RecordType>(dynamic_cast<BaseEOB_RecordType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace BaseEOB_RecordType_Names {

constexpr const char* Extern_Type_Name{"BaseEOB_RecordType"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* EOB_RecordID_Name{"EOB_RecordID"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Mobility_Name{"Mobility"};
constexpr const char* EOB_Codes_Name{"EOB_Codes"};
constexpr const char* SiteOperationalStatus_Name{"SiteOperationalStatus"};
constexpr const char* RecordOwner_Name{"RecordOwner"};
constexpr const char* RemarksText_Name{"RemarksText"};

} // namespace BaseEOB_RecordType_Names

void BaseEOB_RecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::BaseEOB_RecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = BaseEOB_RecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::EOB_RecordID_Name) {
      EOB_RecordID_Type::deserialize(valueType.second, accessor.getEOB_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.getTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Identity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIdentity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Position_Name) {
      EOB_FixedPositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::EOB_Codes_Name) {
      EOB_CodesType::deserialize(valueType.second, accessor.enableEOB_Codes(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::SiteOperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSiteOperationalStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::RecordOwner_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRecordOwner(*value);
      }
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::RemarksText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarksText(*value);
      }
    }
  }
}

std::string BaseEOB_RecordType::serialize(const uci::type::BaseEOB_RecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? BaseEOB_RecordType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::baseEOB_RecordType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, BaseEOB_RecordType_Names::Extern_Type_Name);
    }
    SecurityInformationType::serialize(accessor.getSecurityInformation(), node, BaseEOB_RecordType_Names::SecurityInformation_Name);
    EOB_RecordID_Type::serialize(accessor.getEOB_RecordID(), node, BaseEOB_RecordType_Names::EOB_RecordID_Name);
    OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, BaseEOB_RecordType_Names::Timestamps_Name);
    IdentityType::serialize(accessor.getIdentity(), node, BaseEOB_RecordType_Names::Identity_Name);
    EOB_FixedPositionType::serialize(accessor.getPosition(), node, BaseEOB_RecordType_Names::Position_Name);
    if (accessor.hasMobility()) {
      MobilityEnum::serialize(accessor.getMobility(), node, BaseEOB_RecordType_Names::Mobility_Name, false);
    }
    if (accessor.hasEOB_Codes()) {
      EOB_CodesType::serialize(accessor.getEOB_Codes(), node, BaseEOB_RecordType_Names::EOB_Codes_Name);
    }
    if (accessor.hasSiteOperationalStatus()) {
      OB_OperationalStatusEnum::serialize(accessor.getSiteOperationalStatus(), node, BaseEOB_RecordType_Names::SiteOperationalStatus_Name, false);
    }
    if (accessor.hasRecordOwner()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getRecordOwner(), node, BaseEOB_RecordType_Names::RecordOwner_Name);
    }
    if (accessor.hasRemarksText()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getRemarksText(), node, BaseEOB_RecordType_Names::RemarksText_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::BaseEOB_RecordType>().release());
}

uci::type::BaseEOB_RecordType& BaseEOB_RecordType::create(const uci::type::BaseEOB_RecordType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::BaseEOB_RecordType> newAccessor{boost::make_unique<asb_uci::type::BaseEOB_RecordType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void BaseEOB_RecordType::destroy(uci::type::BaseEOB_RecordType& accessor) {
  delete dynamic_cast<asb_uci::type::BaseEOB_RecordType*>(&accessor);
}

} // namespace type

} // namespace uci

