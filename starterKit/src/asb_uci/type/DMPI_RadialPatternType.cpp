/** @file DMPI_RadialPatternType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DMPI_RadialPatternType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DMPI_PatternType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DMPI_RadialPatternType.h"
#include "uci/type/DistanceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_RadialPatternType::DMPI_RadialPatternType() = default;

DMPI_RadialPatternType::~DMPI_RadialPatternType() = default;

void DMPI_RadialPatternType::copy(const uci::type::DMPI_RadialPatternType& accessor) {
  copyImpl(accessor, false);
}

void DMPI_RadialPatternType::copyImpl(const uci::type::DMPI_RadialPatternType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DMPI_PatternType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const DMPI_RadialPatternType&>(accessor);
    setNumberOfRadials(accessorImpl.numberOfRadials_Accessor);
    setRadialSpacing(accessorImpl.radialSpacing_Accessor);
    setDMPIS_PerRadial(accessorImpl.dMPIS_PerRadial_Accessor);
  }
}

void DMPI_RadialPatternType::reset() noexcept {
  DMPI_PatternType::reset();
  numberOfRadials_Accessor = 0;
  radialSpacing_Accessor = 0.0;
  dMPIS_PerRadial_Accessor = 0;
}

xs::UnsignedInt DMPI_RadialPatternType::getNumberOfRadials() const {
  return numberOfRadials_Accessor;
}

uci::type::DMPI_RadialPatternType& DMPI_RadialPatternType::setNumberOfRadials(xs::UnsignedInt value) {
  numberOfRadials_Accessor = value;
  return *this;
}


uci::type::DistanceTypeValue DMPI_RadialPatternType::getRadialSpacing() const {
  return radialSpacing_Accessor;
}

uci::type::DMPI_RadialPatternType& DMPI_RadialPatternType::setRadialSpacing(uci::type::DistanceTypeValue value) {
  radialSpacing_Accessor = value;
  return *this;
}


xs::UnsignedInt DMPI_RadialPatternType::getDMPIS_PerRadial() const {
  return dMPIS_PerRadial_Accessor;
}

uci::type::DMPI_RadialPatternType& DMPI_RadialPatternType::setDMPIS_PerRadial(xs::UnsignedInt value) {
  dMPIS_PerRadial_Accessor = value;
  return *this;
}


std::unique_ptr<DMPI_RadialPatternType> DMPI_RadialPatternType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_RadialPatternType : type};
  return (requestedType == uci::type::accessorType::dMPI_RadialPatternType) ? boost::make_unique<DMPI_RadialPatternType>() : nullptr;
}

/**  */
namespace DMPI_RadialPatternType_Names {

constexpr const char* Extern_Type_Name{"DMPI_RadialPatternType"};
constexpr const char* NumberOfRadials_Name{"NumberOfRadials"};
constexpr const char* RadialSpacing_Name{"RadialSpacing"};
constexpr const char* DMPIS_PerRadial_Name{"DMPIS_PerRadial"};

} // namespace DMPI_RadialPatternType_Names

void DMPI_RadialPatternType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_RadialPatternType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_RadialPatternType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_RadialPatternType_Names::NumberOfRadials_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfRadials(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + DMPI_RadialPatternType_Names::RadialSpacing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRadialSpacing(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DMPI_RadialPatternType_Names::DMPIS_PerRadial_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDMPIS_PerRadial(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
  DMPI_PatternType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string DMPI_RadialPatternType::serialize(const uci::type::DMPI_RadialPatternType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_RadialPatternType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_RadialPatternType_Names::Extern_Type_Name);
  }
  DMPI_PatternType::serialize(accessor, node, "", false, false, false);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfRadials(), node, DMPI_RadialPatternType_Names::NumberOfRadials_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRadialSpacing(), node, DMPI_RadialPatternType_Names::RadialSpacing_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDMPIS_PerRadial(), node, DMPI_RadialPatternType_Names::DMPIS_PerRadial_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_RadialPatternType& DMPI_RadialPatternType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_RadialPatternType>().release());
}

uci::type::DMPI_RadialPatternType& DMPI_RadialPatternType::create(const uci::type::DMPI_RadialPatternType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_RadialPatternType> newAccessor{boost::make_unique<asb_uci::type::DMPI_RadialPatternType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_RadialPatternType::destroy(uci::type::DMPI_RadialPatternType& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_RadialPatternType*>(&accessor);
}

} // namespace type

} // namespace uci

