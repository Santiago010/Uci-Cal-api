/** @file WorkingSOB_MDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/WorkingSOB_MDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/OrbitRegimeType.h"
#include "../../../include/asb_uci/type/OrderOfBattleTimestampsType.h"
#include "../../../include/asb_uci/type/SOB_C2_RecordType.h"
#include "../../../include/asb_uci/type/SOB_SatelliteRecordType.h"
#include "../../../include/asb_uci/type/WorkingSOB_ID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitRegimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrderOfBattleTimestampsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_C2_RecordType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SOB_SatelliteRecordType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingSOB_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WorkingSOB_MDT.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

WorkingSOB_MDT::WorkingSOB_MDT()
  : workingSOB_ID_Accessor{boost::make_unique<WorkingSOB_ID_Type>()},
    orbit_Accessor{boost::make_unique<Orbit>(0, 11)},
    timestamps_Accessor{boost::make_unique<OrderOfBattleTimestampsType>()},
    satelliteRecord_Accessor{boost::make_unique<SatelliteRecord>(1, SIZE_MAX)},
    c2_Record_Accessor{boost::make_unique<C2_Record>(0, SIZE_MAX)} {
}

WorkingSOB_MDT::~WorkingSOB_MDT() = default;

void WorkingSOB_MDT::copy(const uci::type::WorkingSOB_MDT& accessor) {
  copyImpl(accessor, false);
}

void WorkingSOB_MDT::copyImpl(const uci::type::WorkingSOB_MDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const WorkingSOB_MDT&>(accessor);
    setWorkingSOB_ID(*(accessorImpl.workingSOB_ID_Accessor));
    setOrbit(*(accessorImpl.orbit_Accessor));
    setTimestamps(*(accessorImpl.timestamps_Accessor));
    setSatelliteRecord(*(accessorImpl.satelliteRecord_Accessor));
    setC2_Record(*(accessorImpl.c2_Record_Accessor));
  }
}

void WorkingSOB_MDT::reset() noexcept {
  DataRecordBaseType::reset();
  workingSOB_ID_Accessor->reset();
  orbit_Accessor->reset();
  timestamps_Accessor->reset();
  satelliteRecord_Accessor->reset();
  c2_Record_Accessor->reset();
}

const uci::type::WorkingSOB_ID_Type& WorkingSOB_MDT::getWorkingSOB_ID() const {
  return *workingSOB_ID_Accessor;
}

uci::type::WorkingSOB_ID_Type& WorkingSOB_MDT::getWorkingSOB_ID() {
  return *workingSOB_ID_Accessor;
}

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::setWorkingSOB_ID(const uci::type::WorkingSOB_ID_Type& accessor) {
  if (&accessor != workingSOB_ID_Accessor.get()) {
    workingSOB_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::WorkingSOB_MDT::Orbit& WorkingSOB_MDT::getOrbit() const {
  return *orbit_Accessor;
}

uci::type::WorkingSOB_MDT::Orbit& WorkingSOB_MDT::getOrbit() {
  return *orbit_Accessor;
}

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::setOrbit(const uci::type::WorkingSOB_MDT::Orbit& accessor) {
  if (&accessor != orbit_Accessor.get()) {
    orbit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OrderOfBattleTimestampsType& WorkingSOB_MDT::getTimestamps() const {
  return *timestamps_Accessor;
}

uci::type::OrderOfBattleTimestampsType& WorkingSOB_MDT::getTimestamps() {
  return *timestamps_Accessor;
}

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::setTimestamps(const uci::type::OrderOfBattleTimestampsType& accessor) {
  if (&accessor != timestamps_Accessor.get()) {
    timestamps_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::WorkingSOB_MDT::SatelliteRecord& WorkingSOB_MDT::getSatelliteRecord() const {
  return *satelliteRecord_Accessor;
}

uci::type::WorkingSOB_MDT::SatelliteRecord& WorkingSOB_MDT::getSatelliteRecord() {
  return *satelliteRecord_Accessor;
}

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::setSatelliteRecord(const uci::type::WorkingSOB_MDT::SatelliteRecord& accessor) {
  if (&accessor != satelliteRecord_Accessor.get()) {
    satelliteRecord_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::WorkingSOB_MDT::C2_Record& WorkingSOB_MDT::getC2_Record() const {
  return *c2_Record_Accessor;
}

uci::type::WorkingSOB_MDT::C2_Record& WorkingSOB_MDT::getC2_Record() {
  return *c2_Record_Accessor;
}

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::setC2_Record(const uci::type::WorkingSOB_MDT::C2_Record& accessor) {
  if (&accessor != c2_Record_Accessor.get()) {
    c2_Record_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<WorkingSOB_MDT> WorkingSOB_MDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::workingSOB_MDT : type};
  return (requestedType == uci::type::accessorType::workingSOB_MDT) ? boost::make_unique<WorkingSOB_MDT>() : nullptr;
}

/**  */
namespace WorkingSOB_MDT_Names {

constexpr const char* Extern_Type_Name{"WorkingSOB_MDT"};
constexpr const char* WorkingSOB_ID_Name{"WorkingSOB_ID"};
constexpr const char* Orbit_Name{"Orbit"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* SatelliteRecord_Name{"SatelliteRecord"};
constexpr const char* C2_Record_Name{"C2_Record"};

} // namespace WorkingSOB_MDT_Names

void WorkingSOB_MDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WorkingSOB_MDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WorkingSOB_MDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::WorkingSOB_ID_Name) {
      WorkingSOB_ID_Type::deserialize(valueType.second, accessor.getWorkingSOB_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::Orbit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingSOB_MDT::Orbit& boundedList = accessor.getOrbit();
        const uci::type::WorkingSOB_MDT::Orbit::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitRegimeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.getTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::SatelliteRecord_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingSOB_MDT::SatelliteRecord& boundedList = accessor.getSatelliteRecord();
        const uci::type::WorkingSOB_MDT::SatelliteRecord::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SOB_SatelliteRecordType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::C2_Record_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingSOB_MDT::C2_Record& boundedList = accessor.getC2_Record();
        const uci::type::WorkingSOB_MDT::C2_Record::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SOB_C2_RecordType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string WorkingSOB_MDT::serialize(const uci::type::WorkingSOB_MDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? WorkingSOB_MDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, WorkingSOB_MDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  WorkingSOB_ID_Type::serialize(accessor.getWorkingSOB_ID(), node, WorkingSOB_MDT_Names::WorkingSOB_ID_Name);
  {
    const uci::type::WorkingSOB_MDT::Orbit& boundedList = accessor.getOrbit();
    for (uci::type::WorkingSOB_MDT::Orbit::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitRegimeType::serialize(boundedList.at(i), node, WorkingSOB_MDT_Names::Orbit_Name);
    }
  }
  OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, WorkingSOB_MDT_Names::Timestamps_Name);
  {
    const uci::type::WorkingSOB_MDT::SatelliteRecord& boundedList = accessor.getSatelliteRecord();
    for (uci::type::WorkingSOB_MDT::SatelliteRecord::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SOB_SatelliteRecordType::serialize(boundedList.at(i), node, WorkingSOB_MDT_Names::SatelliteRecord_Name);
    }
  }
  {
    const uci::type::WorkingSOB_MDT::C2_Record& boundedList = accessor.getC2_Record();
    for (uci::type::WorkingSOB_MDT::C2_Record::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SOB_C2_RecordType::serialize(boundedList.at(i), node, WorkingSOB_MDT_Names::C2_Record_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::WorkingSOB_MDT>().release());
}

uci::type::WorkingSOB_MDT& WorkingSOB_MDT::create(const uci::type::WorkingSOB_MDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::WorkingSOB_MDT> newAccessor{boost::make_unique<asb_uci::type::WorkingSOB_MDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void WorkingSOB_MDT::destroy(uci::type::WorkingSOB_MDT& accessor) {
  delete dynamic_cast<asb_uci::type::WorkingSOB_MDT*>(&accessor);
}

} // namespace type

} // namespace uci

