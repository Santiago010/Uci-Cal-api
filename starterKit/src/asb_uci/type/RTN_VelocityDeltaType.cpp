/** @file RTN_VelocityDeltaType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RTN_VelocityDeltaType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RTN_VelocityDeltaType.h"
#include "uci/type/SpeedType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RTN_VelocityDeltaType::RTN_VelocityDeltaType() = default;

RTN_VelocityDeltaType::~RTN_VelocityDeltaType() = default;

void RTN_VelocityDeltaType::copy(const uci::type::RTN_VelocityDeltaType& accessor) {
  copyImpl(accessor, false);
}

void RTN_VelocityDeltaType::copyImpl(const uci::type::RTN_VelocityDeltaType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RTN_VelocityDeltaType&>(accessor);
    if (accessorImpl.hasRadialDelta()) {
      setRadialDelta(accessorImpl.getRadialDelta());
    } else {
      clearRadialDelta();
    }
    if (accessorImpl.hasTransverseDelta()) {
      setTransverseDelta(accessorImpl.getTransverseDelta());
    } else {
      clearTransverseDelta();
    }
    if (accessorImpl.hasNormalDelta()) {
      setNormalDelta(accessorImpl.getNormalDelta());
    } else {
      clearNormalDelta();
    }
  }
}

void RTN_VelocityDeltaType::reset() noexcept {
  clearRadialDelta();
  clearTransverseDelta();
  clearNormalDelta();
}

uci::type::SpeedTypeValue RTN_VelocityDeltaType::getRadialDelta() const {
  if (radialDelta_Accessor) {
    return *radialDelta_Accessor;
  }
  throw uci::base::UCIException("Error in getRadialDelta(): An attempt was made to get an optional field that was not enabled, call hasRadialDelta() to determine if it is safe to call getRadialDelta()");
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::setRadialDelta(uci::type::SpeedTypeValue value) {
  radialDelta_Accessor = value;
  return *this;
}

bool RTN_VelocityDeltaType::hasRadialDelta() const noexcept {
  return radialDelta_Accessor.has_value();
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::clearRadialDelta() noexcept {
  radialDelta_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue RTN_VelocityDeltaType::getTransverseDelta() const {
  if (transverseDelta_Accessor) {
    return *transverseDelta_Accessor;
  }
  throw uci::base::UCIException("Error in getTransverseDelta(): An attempt was made to get an optional field that was not enabled, call hasTransverseDelta() to determine if it is safe to call getTransverseDelta()");
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::setTransverseDelta(uci::type::SpeedTypeValue value) {
  transverseDelta_Accessor = value;
  return *this;
}

bool RTN_VelocityDeltaType::hasTransverseDelta() const noexcept {
  return transverseDelta_Accessor.has_value();
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::clearTransverseDelta() noexcept {
  transverseDelta_Accessor.reset();
  return *this;
}

uci::type::SpeedTypeValue RTN_VelocityDeltaType::getNormalDelta() const {
  if (normalDelta_Accessor) {
    return *normalDelta_Accessor;
  }
  throw uci::base::UCIException("Error in getNormalDelta(): An attempt was made to get an optional field that was not enabled, call hasNormalDelta() to determine if it is safe to call getNormalDelta()");
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::setNormalDelta(uci::type::SpeedTypeValue value) {
  normalDelta_Accessor = value;
  return *this;
}

bool RTN_VelocityDeltaType::hasNormalDelta() const noexcept {
  return normalDelta_Accessor.has_value();
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::clearNormalDelta() noexcept {
  normalDelta_Accessor.reset();
  return *this;
}

std::unique_ptr<RTN_VelocityDeltaType> RTN_VelocityDeltaType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rTN_VelocityDeltaType : type};
  return (requestedType == uci::type::accessorType::rTN_VelocityDeltaType) ? boost::make_unique<RTN_VelocityDeltaType>() : nullptr;
}

/**  */
namespace RTN_VelocityDeltaType_Names {

constexpr const char* Extern_Type_Name{"RTN_VelocityDeltaType"};
constexpr const char* RadialDelta_Name{"RadialDelta"};
constexpr const char* TransverseDelta_Name{"TransverseDelta"};
constexpr const char* NormalDelta_Name{"NormalDelta"};

} // namespace RTN_VelocityDeltaType_Names

void RTN_VelocityDeltaType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RTN_VelocityDeltaType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RTN_VelocityDeltaType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RTN_VelocityDeltaType_Names::RadialDelta_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRadialDelta(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RTN_VelocityDeltaType_Names::TransverseDelta_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransverseDelta(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RTN_VelocityDeltaType_Names::NormalDelta_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNormalDelta(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string RTN_VelocityDeltaType::serialize(const uci::type::RTN_VelocityDeltaType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RTN_VelocityDeltaType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RTN_VelocityDeltaType_Names::Extern_Type_Name);
  }
  if (accessor.hasRadialDelta()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRadialDelta(), node, RTN_VelocityDeltaType_Names::RadialDelta_Name);
  }
  if (accessor.hasTransverseDelta()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTransverseDelta(), node, RTN_VelocityDeltaType_Names::TransverseDelta_Name);
  }
  if (accessor.hasNormalDelta()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getNormalDelta(), node, RTN_VelocityDeltaType_Names::NormalDelta_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RTN_VelocityDeltaType>().release());
}

uci::type::RTN_VelocityDeltaType& RTN_VelocityDeltaType::create(const uci::type::RTN_VelocityDeltaType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RTN_VelocityDeltaType> newAccessor{boost::make_unique<asb_uci::type::RTN_VelocityDeltaType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RTN_VelocityDeltaType::destroy(uci::type::RTN_VelocityDeltaType& accessor) {
  delete dynamic_cast<asb_uci::type::RTN_VelocityDeltaType*>(&accessor);
}

} // namespace type

} // namespace uci

