/** @file IFF_SettingsCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_SettingsCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilitySettingsCommandBaseType.h"
#include "../../../include/asb_uci/type/ElectronicProtectionOptionsDefaultType.h"
#include "../../../include/asb_uci/type/EmconSettingType.h"
#include "../../../include/asb_uci/type/EmissionBalanceEnum.h"
#include "../../../include/asb_uci/type/IFF_MessageOutputsEnum.h"
#include "../../../include/asb_uci/type/IFF_ModesAvailableType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ElectronicProtectionOptionsDefaultType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmconSettingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmissionBalanceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_MessageOutputsEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_ModesAvailableType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_SettingsCommandMDT.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_SettingsCommandMDT::IFF_SettingsCommandMDT()
  : electronicProtectionOptions_Accessor{boost::make_unique<ElectronicProtectionOptions>(0, SIZE_MAX)},
    messageOutput_Accessor{boost::make_unique<MessageOutput>(0, 5)} {
}

IFF_SettingsCommandMDT::~IFF_SettingsCommandMDT() = default;

void IFF_SettingsCommandMDT::copy(const uci::type::IFF_SettingsCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void IFF_SettingsCommandMDT::copyImpl(const uci::type::IFF_SettingsCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilitySettingsCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const IFF_SettingsCommandMDT&>(accessor);
    if (accessorImpl.iFF_InterrogatorReceiverModesAvailable_Accessor) {
      setIFF_InterrogatorReceiverModesAvailable(*(accessorImpl.iFF_InterrogatorReceiverModesAvailable_Accessor));
    } else {
      iFF_InterrogatorReceiverModesAvailable_Accessor.reset();
    }
    setElectronicProtectionOptions(*(accessorImpl.electronicProtectionOptions_Accessor));
    if (accessorImpl.emissionBalanceState_Accessor) {
      setEmissionBalanceState(*(accessorImpl.emissionBalanceState_Accessor));
    } else {
      emissionBalanceState_Accessor.reset();
    }
    setMessageOutput(*(accessorImpl.messageOutput_Accessor));
    if (accessorImpl.hasUnassignAll()) {
      setUnassignAll(accessorImpl.getUnassignAll());
    } else {
      clearUnassignAll();
    }
    if (accessorImpl.defaultEmcon_Accessor) {
      setDefaultEmcon(*(accessorImpl.defaultEmcon_Accessor));
    } else {
      defaultEmcon_Accessor.reset();
    }
  }
}

void IFF_SettingsCommandMDT::reset() noexcept {
  CapabilitySettingsCommandBaseType::reset();
  iFF_InterrogatorReceiverModesAvailable_Accessor.reset();
  electronicProtectionOptions_Accessor->reset();
  emissionBalanceState_Accessor.reset();
  messageOutput_Accessor->reset();
  clearUnassignAll();
  defaultEmcon_Accessor.reset();
}

uci::type::IFF_ModesAvailableType& IFF_SettingsCommandMDT::getIFF_InterrogatorReceiverModesAvailable_() const {
  if (iFF_InterrogatorReceiverModesAvailable_Accessor) {
    return *iFF_InterrogatorReceiverModesAvailable_Accessor;
  }
  throw uci::base::UCIException("Error in getIFF_InterrogatorReceiverModesAvailable(): An attempt was made to get an optional field that was not enabled, call hasIFF_InterrogatorReceiverModesAvailable() to determine if it is safe to call getIFF_InterrogatorReceiverModesAvailable()");
}

const uci::type::IFF_ModesAvailableType& IFF_SettingsCommandMDT::getIFF_InterrogatorReceiverModesAvailable() const {
  return getIFF_InterrogatorReceiverModesAvailable_();
}

uci::type::IFF_ModesAvailableType& IFF_SettingsCommandMDT::getIFF_InterrogatorReceiverModesAvailable() {
  return getIFF_InterrogatorReceiverModesAvailable_();
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setIFF_InterrogatorReceiverModesAvailable(const uci::type::IFF_ModesAvailableType& accessor) {
  enableIFF_InterrogatorReceiverModesAvailable();
  if (&accessor != iFF_InterrogatorReceiverModesAvailable_Accessor.get()) {
    iFF_InterrogatorReceiverModesAvailable_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_SettingsCommandMDT::hasIFF_InterrogatorReceiverModesAvailable() const noexcept {
  return static_cast<bool>(iFF_InterrogatorReceiverModesAvailable_Accessor);
}

uci::type::IFF_ModesAvailableType& IFF_SettingsCommandMDT::enableIFF_InterrogatorReceiverModesAvailable(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_ModesAvailableType : type};
  if ((!iFF_InterrogatorReceiverModesAvailable_Accessor) || (iFF_InterrogatorReceiverModesAvailable_Accessor->getAccessorType() != requestedType)) {
    iFF_InterrogatorReceiverModesAvailable_Accessor = IFF_ModesAvailableType::create(requestedType);
    if (!iFF_InterrogatorReceiverModesAvailable_Accessor) {
      throw uci::base::UCIException("Error in enableIFF_InterrogatorReceiverModesAvailable(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iFF_InterrogatorReceiverModesAvailable_Accessor;
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::clearIFF_InterrogatorReceiverModesAvailable() noexcept {
  iFF_InterrogatorReceiverModesAvailable_Accessor.reset();
  return *this;
}

const uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions& IFF_SettingsCommandMDT::getElectronicProtectionOptions() const {
  return *electronicProtectionOptions_Accessor;
}

uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions& IFF_SettingsCommandMDT::getElectronicProtectionOptions() {
  return *electronicProtectionOptions_Accessor;
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setElectronicProtectionOptions(const uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions& accessor) {
  if (&accessor != electronicProtectionOptions_Accessor.get()) {
    electronicProtectionOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EmissionBalanceEnum& IFF_SettingsCommandMDT::getEmissionBalanceState_() const {
  if (emissionBalanceState_Accessor) {
    return *emissionBalanceState_Accessor;
  }
  throw uci::base::UCIException("Error in getEmissionBalanceState(): An attempt was made to get an optional field that was not enabled, call hasEmissionBalanceState() to determine if it is safe to call getEmissionBalanceState()");
}

const uci::type::EmissionBalanceEnum& IFF_SettingsCommandMDT::getEmissionBalanceState() const {
  return getEmissionBalanceState_();
}

uci::type::EmissionBalanceEnum& IFF_SettingsCommandMDT::getEmissionBalanceState() {
  return getEmissionBalanceState_();
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setEmissionBalanceState(const uci::type::EmissionBalanceEnum& accessor) {
  enableEmissionBalanceState();
  if (&accessor != emissionBalanceState_Accessor.get()) {
    emissionBalanceState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setEmissionBalanceState(const uci::type::EmissionBalanceEnum::EnumerationItem value) {
  enableEmissionBalanceState().setValue(value);
  return *this;
}

bool IFF_SettingsCommandMDT::hasEmissionBalanceState() const noexcept {
  return static_cast<bool>(emissionBalanceState_Accessor);
}

uci::type::EmissionBalanceEnum& IFF_SettingsCommandMDT::enableEmissionBalanceState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emissionBalanceEnum : type};
  if ((!emissionBalanceState_Accessor) || (emissionBalanceState_Accessor->getAccessorType() != requestedType)) {
    emissionBalanceState_Accessor = EmissionBalanceEnum::create(requestedType);
    if (!emissionBalanceState_Accessor) {
      throw uci::base::UCIException("Error in enableEmissionBalanceState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emissionBalanceState_Accessor;
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::clearEmissionBalanceState() noexcept {
  emissionBalanceState_Accessor.reset();
  return *this;
}

const uci::type::IFF_SettingsCommandMDT::MessageOutput& IFF_SettingsCommandMDT::getMessageOutput() const {
  return *messageOutput_Accessor;
}

uci::type::IFF_SettingsCommandMDT::MessageOutput& IFF_SettingsCommandMDT::getMessageOutput() {
  return *messageOutput_Accessor;
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setMessageOutput(const uci::type::IFF_SettingsCommandMDT::MessageOutput& accessor) {
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean IFF_SettingsCommandMDT::getUnassignAll() const {
  if (unassignAll_Accessor) {
    return *unassignAll_Accessor;
  }
  throw uci::base::UCIException("Error in getUnassignAll(): An attempt was made to get an optional field that was not enabled, call hasUnassignAll() to determine if it is safe to call getUnassignAll()");
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setUnassignAll(xs::Boolean value) {
  unassignAll_Accessor = value;
  return *this;
}

bool IFF_SettingsCommandMDT::hasUnassignAll() const noexcept {
  return unassignAll_Accessor.has_value();
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::clearUnassignAll() noexcept {
  unassignAll_Accessor.reset();
  return *this;
}

uci::type::EmconSettingType& IFF_SettingsCommandMDT::getDefaultEmcon_() const {
  if (defaultEmcon_Accessor) {
    return *defaultEmcon_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultEmcon(): An attempt was made to get an optional field that was not enabled, call hasDefaultEmcon() to determine if it is safe to call getDefaultEmcon()");
}

const uci::type::EmconSettingType& IFF_SettingsCommandMDT::getDefaultEmcon() const {
  return getDefaultEmcon_();
}

uci::type::EmconSettingType& IFF_SettingsCommandMDT::getDefaultEmcon() {
  return getDefaultEmcon_();
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::setDefaultEmcon(const uci::type::EmconSettingType& accessor) {
  enableDefaultEmcon();
  if (&accessor != defaultEmcon_Accessor.get()) {
    defaultEmcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_SettingsCommandMDT::hasDefaultEmcon() const noexcept {
  return static_cast<bool>(defaultEmcon_Accessor);
}

uci::type::EmconSettingType& IFF_SettingsCommandMDT::enableDefaultEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconSettingType : type};
  if ((!defaultEmcon_Accessor) || (defaultEmcon_Accessor->getAccessorType() != requestedType)) {
    defaultEmcon_Accessor = EmconSettingType::create(requestedType);
    if (!defaultEmcon_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultEmcon_Accessor;
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::clearDefaultEmcon() noexcept {
  defaultEmcon_Accessor.reset();
  return *this;
}

std::unique_ptr<IFF_SettingsCommandMDT> IFF_SettingsCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_SettingsCommandMDT : type};
  return (requestedType == uci::type::accessorType::iFF_SettingsCommandMDT) ? boost::make_unique<IFF_SettingsCommandMDT>() : nullptr;
}

/**  */
namespace IFF_SettingsCommandMDT_Names {

constexpr const char* Extern_Type_Name{"IFF_SettingsCommandMDT"};
constexpr const char* IFF_InterrogatorReceiverModesAvailable_Name{"IFF_InterrogatorReceiverModesAvailable"};
constexpr const char* ElectronicProtectionOptions_Name{"ElectronicProtectionOptions"};
constexpr const char* EmissionBalanceState_Name{"EmissionBalanceState"};
constexpr const char* MessageOutput_Name{"MessageOutput"};
constexpr const char* UnassignAll_Name{"UnassignAll"};
constexpr const char* DefaultEmcon_Name{"DefaultEmcon"};

} // namespace IFF_SettingsCommandMDT_Names

void IFF_SettingsCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_SettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_SettingsCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_SettingsCommandMDT_Names::IFF_InterrogatorReceiverModesAvailable_Name) {
      IFF_ModesAvailableType::deserialize(valueType.second, accessor.enableIFF_InterrogatorReceiverModesAvailable(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_SettingsCommandMDT_Names::ElectronicProtectionOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions& boundedList = accessor.getElectronicProtectionOptions();
        const uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElectronicProtectionOptionsDefaultType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IFF_SettingsCommandMDT_Names::EmissionBalanceState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEmissionBalanceState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_SettingsCommandMDT_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IFF_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
        const uci::type::IFF_SettingsCommandMDT::MessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_SettingsCommandMDT_Names::UnassignAll_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnassignAll(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_SettingsCommandMDT_Names::DefaultEmcon_Name) {
      EmconSettingType::deserialize(valueType.second, accessor.enableDefaultEmcon(), nodeName, nsPrefix);
    }
  }
  CapabilitySettingsCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string IFF_SettingsCommandMDT::serialize(const uci::type::IFF_SettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_SettingsCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_SettingsCommandMDT_Names::Extern_Type_Name);
  }
  CapabilitySettingsCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasIFF_InterrogatorReceiverModesAvailable()) {
    IFF_ModesAvailableType::serialize(accessor.getIFF_InterrogatorReceiverModesAvailable(), node, IFF_SettingsCommandMDT_Names::IFF_InterrogatorReceiverModesAvailable_Name);
  }
  {
    const uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions& boundedList = accessor.getElectronicProtectionOptions();
    for (uci::type::IFF_SettingsCommandMDT::ElectronicProtectionOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ElectronicProtectionOptionsDefaultType::serialize(boundedList.at(i), node, IFF_SettingsCommandMDT_Names::ElectronicProtectionOptions_Name);
    }
  }
  if (accessor.hasEmissionBalanceState()) {
    EmissionBalanceEnum::serialize(accessor.getEmissionBalanceState(), node, IFF_SettingsCommandMDT_Names::EmissionBalanceState_Name, false);
  }
  {
    const uci::type::IFF_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
    for (uci::type::IFF_SettingsCommandMDT::MessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      IFF_MessageOutputsEnum::serialize(boundedList.at(i), node, IFF_SettingsCommandMDT_Names::MessageOutput_Name, false);
    }
  }
  if (accessor.hasUnassignAll()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUnassignAll(), node, IFF_SettingsCommandMDT_Names::UnassignAll_Name);
  }
  if (accessor.hasDefaultEmcon()) {
    EmconSettingType::serialize(accessor.getDefaultEmcon(), node, IFF_SettingsCommandMDT_Names::DefaultEmcon_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_SettingsCommandMDT>().release());
}

uci::type::IFF_SettingsCommandMDT& IFF_SettingsCommandMDT::create(const uci::type::IFF_SettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_SettingsCommandMDT> newAccessor{boost::make_unique<asb_uci::type::IFF_SettingsCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_SettingsCommandMDT::destroy(uci::type::IFF_SettingsCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_SettingsCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

