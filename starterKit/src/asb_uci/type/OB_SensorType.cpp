/** @file OB_SensorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OB_SensorType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityEphemerisBasisChoiceType.h"
#include "asb_uci/type/FieldOfRegardType.h"
#include "asb_uci/type/KinematicsType.h"
#include "asb_uci/type/OB_SensorID_Type.h"
#include "asb_uci/type/OB_SensorIdentityType.h"
#include "asb_uci/type/SensorFieldOfViewType.h"
#include "asb_uci/type/VisualMagnitudeLimitsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EntityEphemerisBasisChoiceType.h"
#include "uci/type/FieldOfRegardType.h"
#include "uci/type/KinematicsType.h"
#include "uci/type/OB_SensorID_Type.h"
#include "uci/type/OB_SensorIdentityType.h"
#include "uci/type/OB_SensorType.h"
#include "uci/type/SensorFieldOfViewType.h"
#include "uci/type/VisualMagnitudeLimitsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OB_SensorType::OB_SensorType()
  : sensorID_Accessor{boost::make_unique<OB_SensorID_Type>()} {
}

OB_SensorType::~OB_SensorType() = default;

void OB_SensorType::copy(const uci::type::OB_SensorType& accessor) {
  copyImpl(accessor, false);
}

void OB_SensorType::copyImpl(const uci::type::OB_SensorType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OB_SensorType&>(accessor);
    setSensorID(*(accessorImpl.sensorID_Accessor));
    if (accessorImpl.identity_Accessor) {
      setIdentity(*(accessorImpl.identity_Accessor));
    } else {
      identity_Accessor.reset();
    }
    if (accessorImpl.fieldOfRegard_Accessor) {
      setFieldOfRegard(*(accessorImpl.fieldOfRegard_Accessor));
    } else {
      fieldOfRegard_Accessor.reset();
    }
    if (accessorImpl.fieldOfView_Accessor) {
      setFieldOfView(*(accessorImpl.fieldOfView_Accessor));
    } else {
      fieldOfView_Accessor.reset();
    }
    if (accessorImpl.visualMagnitudeLimits_Accessor) {
      setVisualMagnitudeLimits(*(accessorImpl.visualMagnitudeLimits_Accessor));
    } else {
      visualMagnitudeLimits_Accessor.reset();
    }
    if (accessorImpl.hasPrimaryApertureDiameter()) {
      setPrimaryApertureDiameter(accessorImpl.getPrimaryApertureDiameter());
    } else {
      clearPrimaryApertureDiameter();
    }
    if (accessorImpl.hasResolution()) {
      setResolution(accessorImpl.getResolution());
    } else {
      clearResolution();
    }
    if (accessorImpl.kinematics_Accessor) {
      setKinematics(*(accessorImpl.kinematics_Accessor));
    } else {
      kinematics_Accessor.reset();
    }
    if (accessorImpl.orbitalKinematics_Accessor) {
      setOrbitalKinematics(*(accessorImpl.orbitalKinematics_Accessor));
    } else {
      orbitalKinematics_Accessor.reset();
    }
  }
}

void OB_SensorType::reset() noexcept {
  sensorID_Accessor->reset();
  identity_Accessor.reset();
  fieldOfRegard_Accessor.reset();
  fieldOfView_Accessor.reset();
  visualMagnitudeLimits_Accessor.reset();
  clearPrimaryApertureDiameter();
  clearResolution();
  kinematics_Accessor.reset();
  orbitalKinematics_Accessor.reset();
}

const uci::type::OB_SensorID_Type& OB_SensorType::getSensorID() const {
  return *sensorID_Accessor;
}

uci::type::OB_SensorID_Type& OB_SensorType::getSensorID() {
  return *sensorID_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::setSensorID(const uci::type::OB_SensorID_Type& accessor) {
  if (&accessor != sensorID_Accessor.get()) {
    sensorID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OB_SensorIdentityType& OB_SensorType::getIdentity_() const {
  if (identity_Accessor) {
    return *identity_Accessor;
  }
  throw uci::base::UCIException("Error in getIdentity(): An attempt was made to get an optional field that was not enabled, call hasIdentity() to determine if it is safe to call getIdentity()");
}

const uci::type::OB_SensorIdentityType& OB_SensorType::getIdentity() const {
  return getIdentity_();
}

uci::type::OB_SensorIdentityType& OB_SensorType::getIdentity() {
  return getIdentity_();
}

uci::type::OB_SensorType& OB_SensorType::setIdentity(const uci::type::OB_SensorIdentityType& accessor) {
  enableIdentity();
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OB_SensorType::hasIdentity() const noexcept {
  return static_cast<bool>(identity_Accessor);
}

uci::type::OB_SensorIdentityType& OB_SensorType::enableIdentity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::oB_SensorIdentityType : type};
  if ((!identity_Accessor) || (identity_Accessor->getAccessorType() != requestedType)) {
    identity_Accessor = OB_SensorIdentityType::create(requestedType);
    if (!identity_Accessor) {
      throw uci::base::UCIException("Error in enableIdentity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *identity_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::clearIdentity() noexcept {
  identity_Accessor.reset();
  return *this;
}

uci::type::FieldOfRegardType& OB_SensorType::getFieldOfRegard_() const {
  if (fieldOfRegard_Accessor) {
    return *fieldOfRegard_Accessor;
  }
  throw uci::base::UCIException("Error in getFieldOfRegard(): An attempt was made to get an optional field that was not enabled, call hasFieldOfRegard() to determine if it is safe to call getFieldOfRegard()");
}

const uci::type::FieldOfRegardType& OB_SensorType::getFieldOfRegard() const {
  return getFieldOfRegard_();
}

uci::type::FieldOfRegardType& OB_SensorType::getFieldOfRegard() {
  return getFieldOfRegard_();
}

uci::type::OB_SensorType& OB_SensorType::setFieldOfRegard(const uci::type::FieldOfRegardType& accessor) {
  enableFieldOfRegard();
  if (&accessor != fieldOfRegard_Accessor.get()) {
    fieldOfRegard_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OB_SensorType::hasFieldOfRegard() const noexcept {
  return static_cast<bool>(fieldOfRegard_Accessor);
}

uci::type::FieldOfRegardType& OB_SensorType::enableFieldOfRegard(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fieldOfRegardType : type};
  if ((!fieldOfRegard_Accessor) || (fieldOfRegard_Accessor->getAccessorType() != requestedType)) {
    fieldOfRegard_Accessor = FieldOfRegardType::create(requestedType);
    if (!fieldOfRegard_Accessor) {
      throw uci::base::UCIException("Error in enableFieldOfRegard(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fieldOfRegard_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::clearFieldOfRegard() noexcept {
  fieldOfRegard_Accessor.reset();
  return *this;
}

uci::type::SensorFieldOfViewType& OB_SensorType::getFieldOfView_() const {
  if (fieldOfView_Accessor) {
    return *fieldOfView_Accessor;
  }
  throw uci::base::UCIException("Error in getFieldOfView(): An attempt was made to get an optional field that was not enabled, call hasFieldOfView() to determine if it is safe to call getFieldOfView()");
}

const uci::type::SensorFieldOfViewType& OB_SensorType::getFieldOfView() const {
  return getFieldOfView_();
}

uci::type::SensorFieldOfViewType& OB_SensorType::getFieldOfView() {
  return getFieldOfView_();
}

uci::type::OB_SensorType& OB_SensorType::setFieldOfView(const uci::type::SensorFieldOfViewType& accessor) {
  enableFieldOfView();
  if (&accessor != fieldOfView_Accessor.get()) {
    fieldOfView_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OB_SensorType::hasFieldOfView() const noexcept {
  return static_cast<bool>(fieldOfView_Accessor);
}

uci::type::SensorFieldOfViewType& OB_SensorType::enableFieldOfView(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sensorFieldOfViewType : type};
  if ((!fieldOfView_Accessor) || (fieldOfView_Accessor->getAccessorType() != requestedType)) {
    fieldOfView_Accessor = SensorFieldOfViewType::create(requestedType);
    if (!fieldOfView_Accessor) {
      throw uci::base::UCIException("Error in enableFieldOfView(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fieldOfView_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::clearFieldOfView() noexcept {
  fieldOfView_Accessor.reset();
  return *this;
}

uci::type::VisualMagnitudeLimitsType& OB_SensorType::getVisualMagnitudeLimits_() const {
  if (visualMagnitudeLimits_Accessor) {
    return *visualMagnitudeLimits_Accessor;
  }
  throw uci::base::UCIException("Error in getVisualMagnitudeLimits(): An attempt was made to get an optional field that was not enabled, call hasVisualMagnitudeLimits() to determine if it is safe to call getVisualMagnitudeLimits()");
}

const uci::type::VisualMagnitudeLimitsType& OB_SensorType::getVisualMagnitudeLimits() const {
  return getVisualMagnitudeLimits_();
}

uci::type::VisualMagnitudeLimitsType& OB_SensorType::getVisualMagnitudeLimits() {
  return getVisualMagnitudeLimits_();
}

uci::type::OB_SensorType& OB_SensorType::setVisualMagnitudeLimits(const uci::type::VisualMagnitudeLimitsType& accessor) {
  enableVisualMagnitudeLimits();
  if (&accessor != visualMagnitudeLimits_Accessor.get()) {
    visualMagnitudeLimits_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OB_SensorType::hasVisualMagnitudeLimits() const noexcept {
  return static_cast<bool>(visualMagnitudeLimits_Accessor);
}

uci::type::VisualMagnitudeLimitsType& OB_SensorType::enableVisualMagnitudeLimits(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::visualMagnitudeLimitsType : type};
  if ((!visualMagnitudeLimits_Accessor) || (visualMagnitudeLimits_Accessor->getAccessorType() != requestedType)) {
    visualMagnitudeLimits_Accessor = VisualMagnitudeLimitsType::create(requestedType);
    if (!visualMagnitudeLimits_Accessor) {
      throw uci::base::UCIException("Error in enableVisualMagnitudeLimits(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *visualMagnitudeLimits_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::clearVisualMagnitudeLimits() noexcept {
  visualMagnitudeLimits_Accessor.reset();
  return *this;
}

uci::type::DistanceTypeValue OB_SensorType::getPrimaryApertureDiameter() const {
  if (primaryApertureDiameter_Accessor) {
    return *primaryApertureDiameter_Accessor;
  }
  throw uci::base::UCIException("Error in getPrimaryApertureDiameter(): An attempt was made to get an optional field that was not enabled, call hasPrimaryApertureDiameter() to determine if it is safe to call getPrimaryApertureDiameter()");
}

uci::type::OB_SensorType& OB_SensorType::setPrimaryApertureDiameter(uci::type::DistanceTypeValue value) {
  primaryApertureDiameter_Accessor = value;
  return *this;
}

bool OB_SensorType::hasPrimaryApertureDiameter() const noexcept {
  return primaryApertureDiameter_Accessor.has_value();
}

uci::type::OB_SensorType& OB_SensorType::clearPrimaryApertureDiameter() noexcept {
  primaryApertureDiameter_Accessor.reset();
  return *this;
}

uci::type::AnglePositiveTypeValue OB_SensorType::getResolution() const {
  if (resolution_Accessor) {
    return *resolution_Accessor;
  }
  throw uci::base::UCIException("Error in getResolution(): An attempt was made to get an optional field that was not enabled, call hasResolution() to determine if it is safe to call getResolution()");
}

uci::type::OB_SensorType& OB_SensorType::setResolution(uci::type::AnglePositiveTypeValue value) {
  resolution_Accessor = value;
  return *this;
}

bool OB_SensorType::hasResolution() const noexcept {
  return resolution_Accessor.has_value();
}

uci::type::OB_SensorType& OB_SensorType::clearResolution() noexcept {
  resolution_Accessor.reset();
  return *this;
}

uci::type::KinematicsType& OB_SensorType::getKinematics_() const {
  if (kinematics_Accessor) {
    return *kinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematics(): An attempt was made to get an optional field that was not enabled, call hasKinematics() to determine if it is safe to call getKinematics()");
}

const uci::type::KinematicsType& OB_SensorType::getKinematics() const {
  return getKinematics_();
}

uci::type::KinematicsType& OB_SensorType::getKinematics() {
  return getKinematics_();
}

uci::type::OB_SensorType& OB_SensorType::setKinematics(const uci::type::KinematicsType& accessor) {
  enableKinematics();
  if (&accessor != kinematics_Accessor.get()) {
    kinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OB_SensorType::hasKinematics() const noexcept {
  return static_cast<bool>(kinematics_Accessor);
}

uci::type::KinematicsType& OB_SensorType::enableKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::kinematicsType : type};
  if ((!kinematics_Accessor) || (kinematics_Accessor->getAccessorType() != requestedType)) {
    kinematics_Accessor = KinematicsType::create(requestedType);
    if (!kinematics_Accessor) {
      throw uci::base::UCIException("Error in enableKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematics_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::clearKinematics() noexcept {
  kinematics_Accessor.reset();
  return *this;
}

uci::type::EntityEphemerisBasisChoiceType& OB_SensorType::getOrbitalKinematics_() const {
  if (orbitalKinematics_Accessor) {
    return *orbitalKinematics_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalKinematics(): An attempt was made to get an optional field that was not enabled, call hasOrbitalKinematics() to determine if it is safe to call getOrbitalKinematics()");
}

const uci::type::EntityEphemerisBasisChoiceType& OB_SensorType::getOrbitalKinematics() const {
  return getOrbitalKinematics_();
}

uci::type::EntityEphemerisBasisChoiceType& OB_SensorType::getOrbitalKinematics() {
  return getOrbitalKinematics_();
}

uci::type::OB_SensorType& OB_SensorType::setOrbitalKinematics(const uci::type::EntityEphemerisBasisChoiceType& accessor) {
  enableOrbitalKinematics();
  if (&accessor != orbitalKinematics_Accessor.get()) {
    orbitalKinematics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OB_SensorType::hasOrbitalKinematics() const noexcept {
  return static_cast<bool>(orbitalKinematics_Accessor);
}

uci::type::EntityEphemerisBasisChoiceType& OB_SensorType::enableOrbitalKinematics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityEphemerisBasisChoiceType : type};
  if ((!orbitalKinematics_Accessor) || (orbitalKinematics_Accessor->getAccessorType() != requestedType)) {
    orbitalKinematics_Accessor = EntityEphemerisBasisChoiceType::create(requestedType);
    if (!orbitalKinematics_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitalKinematics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalKinematics_Accessor;
}

uci::type::OB_SensorType& OB_SensorType::clearOrbitalKinematics() noexcept {
  orbitalKinematics_Accessor.reset();
  return *this;
}

std::unique_ptr<OB_SensorType> OB_SensorType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::oB_SensorType : type};
  return (requestedType == uci::type::accessorType::oB_SensorType) ? boost::make_unique<OB_SensorType>() : nullptr;
}

/**  */
namespace OB_SensorType_Names {

constexpr const char* Extern_Type_Name{"OB_SensorType"};
constexpr const char* SensorID_Name{"SensorID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* FieldOfRegard_Name{"FieldOfRegard"};
constexpr const char* FieldOfView_Name{"FieldOfView"};
constexpr const char* VisualMagnitudeLimits_Name{"VisualMagnitudeLimits"};
constexpr const char* PrimaryApertureDiameter_Name{"PrimaryApertureDiameter"};
constexpr const char* Resolution_Name{"Resolution"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* OrbitalKinematics_Name{"OrbitalKinematics"};

} // namespace OB_SensorType_Names

void OB_SensorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OB_SensorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OB_SensorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::SensorID_Name) {
      OB_SensorID_Type::deserialize(valueType.second, accessor.getSensorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::Identity_Name) {
      OB_SensorIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::FieldOfRegard_Name) {
      FieldOfRegardType::deserialize(valueType.second, accessor.enableFieldOfRegard(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::FieldOfView_Name) {
      SensorFieldOfViewType::deserialize(valueType.second, accessor.enableFieldOfView(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::VisualMagnitudeLimits_Name) {
      VisualMagnitudeLimitsType::deserialize(valueType.second, accessor.enableVisualMagnitudeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::PrimaryApertureDiameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrimaryApertureDiameter(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::Kinematics_Name) {
      KinematicsType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::OrbitalKinematics_Name) {
      EntityEphemerisBasisChoiceType::deserialize(valueType.second, accessor.enableOrbitalKinematics(), nodeName, nsPrefix);
    }
  }
}

std::string OB_SensorType::serialize(const uci::type::OB_SensorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OB_SensorType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OB_SensorType_Names::Extern_Type_Name);
  }
  OB_SensorID_Type::serialize(accessor.getSensorID(), node, OB_SensorType_Names::SensorID_Name);
  if (accessor.hasIdentity()) {
    OB_SensorIdentityType::serialize(accessor.getIdentity(), node, OB_SensorType_Names::Identity_Name);
  }
  if (accessor.hasFieldOfRegard()) {
    FieldOfRegardType::serialize(accessor.getFieldOfRegard(), node, OB_SensorType_Names::FieldOfRegard_Name);
  }
  if (accessor.hasFieldOfView()) {
    SensorFieldOfViewType::serialize(accessor.getFieldOfView(), node, OB_SensorType_Names::FieldOfView_Name);
  }
  if (accessor.hasVisualMagnitudeLimits()) {
    VisualMagnitudeLimitsType::serialize(accessor.getVisualMagnitudeLimits(), node, OB_SensorType_Names::VisualMagnitudeLimits_Name);
  }
  if (accessor.hasPrimaryApertureDiameter()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPrimaryApertureDiameter(), node, OB_SensorType_Names::PrimaryApertureDiameter_Name);
  }
  if (accessor.hasResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getResolution(), node, OB_SensorType_Names::Resolution_Name);
  }
  if (accessor.hasKinematics()) {
    KinematicsType::serialize(accessor.getKinematics(), node, OB_SensorType_Names::Kinematics_Name);
  }
  if (accessor.hasOrbitalKinematics()) {
    EntityEphemerisBasisChoiceType::serialize(accessor.getOrbitalKinematics(), node, OB_SensorType_Names::OrbitalKinematics_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OB_SensorType& OB_SensorType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OB_SensorType>().release());
}

uci::type::OB_SensorType& OB_SensorType::create(const uci::type::OB_SensorType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OB_SensorType> newAccessor{boost::make_unique<asb_uci::type::OB_SensorType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OB_SensorType::destroy(uci::type::OB_SensorType& accessor) {
  delete dynamic_cast<asb_uci::type::OB_SensorType*>(&accessor);
}

} // namespace type

} // namespace uci

