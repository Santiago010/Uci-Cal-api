/** @file PlanningTriggerType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PlanningTriggerType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PlanningByCaseTriggerType.h"
#include "asb_uci/type/PlanningByResultTriggerType.h"
#include "asb_uci/type/PlanningTriggerSourceEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PlanningByCaseTriggerType.h"
#include "uci/type/PlanningByResultTriggerType.h"
#include "uci/type/PlanningTriggerSourceEnum.h"
#include "uci/type/PlanningTriggerType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanningTriggerType::PlanningTriggerType()
  : source_Accessor{boost::make_unique<PlanningTriggerSourceEnum>()} {
}

PlanningTriggerType::~PlanningTriggerType() = default;

void PlanningTriggerType::copy(const uci::type::PlanningTriggerType& accessor) {
  copyImpl(accessor, false);
}

void PlanningTriggerType::copyImpl(const uci::type::PlanningTriggerType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanningTriggerType&>(accessor);
    setSource(*(accessorImpl.source_Accessor));
    if (accessorImpl.byCaseTrigger_Accessor) {
      setByCaseTrigger(*(accessorImpl.byCaseTrigger_Accessor));
    } else {
      byCaseTrigger_Accessor.reset();
    }
    if (accessorImpl.byResultTrigger_Accessor) {
      setByResultTrigger(*(accessorImpl.byResultTrigger_Accessor));
    } else {
      byResultTrigger_Accessor.reset();
    }
  }
}

void PlanningTriggerType::reset() noexcept {
  source_Accessor->reset();
  byCaseTrigger_Accessor.reset();
  byResultTrigger_Accessor.reset();
}

const uci::type::PlanningTriggerSourceEnum& PlanningTriggerType::getSource() const {
  return *source_Accessor;
}

uci::type::PlanningTriggerSourceEnum& PlanningTriggerType::getSource() {
  return *source_Accessor;
}

uci::type::PlanningTriggerType& PlanningTriggerType::setSource(const uci::type::PlanningTriggerSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningTriggerType& PlanningTriggerType::setSource(uci::type::PlanningTriggerSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


uci::type::PlanningByCaseTriggerType& PlanningTriggerType::getByCaseTrigger_() const {
  if (byCaseTrigger_Accessor) {
    return *byCaseTrigger_Accessor;
  }
  throw uci::base::UCIException("Error in getByCaseTrigger(): An attempt was made to get an optional field that was not enabled, call hasByCaseTrigger() to determine if it is safe to call getByCaseTrigger()");
}

const uci::type::PlanningByCaseTriggerType& PlanningTriggerType::getByCaseTrigger() const {
  return getByCaseTrigger_();
}

uci::type::PlanningByCaseTriggerType& PlanningTriggerType::getByCaseTrigger() {
  return getByCaseTrigger_();
}

uci::type::PlanningTriggerType& PlanningTriggerType::setByCaseTrigger(const uci::type::PlanningByCaseTriggerType& accessor) {
  enableByCaseTrigger();
  if (&accessor != byCaseTrigger_Accessor.get()) {
    byCaseTrigger_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningTriggerType::hasByCaseTrigger() const noexcept {
  return static_cast<bool>(byCaseTrigger_Accessor);
}

uci::type::PlanningByCaseTriggerType& PlanningTriggerType::enableByCaseTrigger(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningByCaseTriggerType : type};
  if ((!byCaseTrigger_Accessor) || (byCaseTrigger_Accessor->getAccessorType() != requestedType)) {
    byCaseTrigger_Accessor = PlanningByCaseTriggerType::create(requestedType);
    if (!byCaseTrigger_Accessor) {
      throw uci::base::UCIException("Error in enableByCaseTrigger(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byCaseTrigger_Accessor;
}

uci::type::PlanningTriggerType& PlanningTriggerType::clearByCaseTrigger() noexcept {
  byCaseTrigger_Accessor.reset();
  return *this;
}

uci::type::PlanningByResultTriggerType& PlanningTriggerType::getByResultTrigger_() const {
  if (byResultTrigger_Accessor) {
    return *byResultTrigger_Accessor;
  }
  throw uci::base::UCIException("Error in getByResultTrigger(): An attempt was made to get an optional field that was not enabled, call hasByResultTrigger() to determine if it is safe to call getByResultTrigger()");
}

const uci::type::PlanningByResultTriggerType& PlanningTriggerType::getByResultTrigger() const {
  return getByResultTrigger_();
}

uci::type::PlanningByResultTriggerType& PlanningTriggerType::getByResultTrigger() {
  return getByResultTrigger_();
}

uci::type::PlanningTriggerType& PlanningTriggerType::setByResultTrigger(const uci::type::PlanningByResultTriggerType& accessor) {
  enableByResultTrigger();
  if (&accessor != byResultTrigger_Accessor.get()) {
    byResultTrigger_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningTriggerType::hasByResultTrigger() const noexcept {
  return static_cast<bool>(byResultTrigger_Accessor);
}

uci::type::PlanningByResultTriggerType& PlanningTriggerType::enableByResultTrigger(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningByResultTriggerType : type};
  if ((!byResultTrigger_Accessor) || (byResultTrigger_Accessor->getAccessorType() != requestedType)) {
    byResultTrigger_Accessor = PlanningByResultTriggerType::create(requestedType);
    if (!byResultTrigger_Accessor) {
      throw uci::base::UCIException("Error in enableByResultTrigger(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *byResultTrigger_Accessor;
}

uci::type::PlanningTriggerType& PlanningTriggerType::clearByResultTrigger() noexcept {
  byResultTrigger_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanningTriggerType> PlanningTriggerType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningTriggerType : type};
  return (requestedType == uci::type::accessorType::planningTriggerType) ? boost::make_unique<PlanningTriggerType>() : nullptr;
}

/**  */
namespace PlanningTriggerType_Names {

constexpr const char* Extern_Type_Name{"PlanningTriggerType"};
constexpr const char* Source_Name{"Source"};
constexpr const char* ByCaseTrigger_Name{"ByCaseTrigger"};
constexpr const char* ByResultTrigger_Name{"ByResultTrigger"};

} // namespace PlanningTriggerType_Names

void PlanningTriggerType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningTriggerType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanningTriggerType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanningTriggerType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlanningTriggerType_Names::ByCaseTrigger_Name) {
      PlanningByCaseTriggerType::deserialize(valueType.second, accessor.enableByCaseTrigger(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningTriggerType_Names::ByResultTrigger_Name) {
      PlanningByResultTriggerType::deserialize(valueType.second, accessor.enableByResultTrigger(), nodeName, nsPrefix);
    }
  }
}

std::string PlanningTriggerType::serialize(const uci::type::PlanningTriggerType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanningTriggerType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanningTriggerType_Names::Extern_Type_Name);
  }
  PlanningTriggerSourceEnum::serialize(accessor.getSource(), node, PlanningTriggerType_Names::Source_Name, false);
  if (accessor.hasByCaseTrigger()) {
    PlanningByCaseTriggerType::serialize(accessor.getByCaseTrigger(), node, PlanningTriggerType_Names::ByCaseTrigger_Name);
  }
  if (accessor.hasByResultTrigger()) {
    PlanningByResultTriggerType::serialize(accessor.getByResultTrigger(), node, PlanningTriggerType_Names::ByResultTrigger_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanningTriggerType& PlanningTriggerType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanningTriggerType>().release());
}

uci::type::PlanningTriggerType& PlanningTriggerType::create(const uci::type::PlanningTriggerType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanningTriggerType> newAccessor{boost::make_unique<asb_uci::type::PlanningTriggerType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanningTriggerType::destroy(uci::type::PlanningTriggerType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanningTriggerType*>(&accessor);
}

} // namespace type

} // namespace uci

