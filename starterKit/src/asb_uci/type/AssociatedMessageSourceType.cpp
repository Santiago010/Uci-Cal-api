/** @file AssociatedMessageSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AssociatedMessageSourceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommandID_Type.h"
#include "../../../include/asb_uci/type/ResourceRequestID_AndOptionType.h"
#include "../../../include/asb_uci/type/SharedSourceEmitterPriorityBinDetailType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AssociatedMessageSourceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommandID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceRequestID_AndOptionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SharedSourceEmitterPriorityBinDetailType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AssociatedMessageSourceType::AssociatedMessageSourceType() = default;

AssociatedMessageSourceType::~AssociatedMessageSourceType() = default;

void AssociatedMessageSourceType::copy(const uci::type::AssociatedMessageSourceType& accessor) {
  copyImpl(accessor, false);
}

void AssociatedMessageSourceType::copyImpl(const uci::type::AssociatedMessageSourceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AssociatedMessageSourceType&>(accessor);
    if (accessorImpl.settingsCommandID_Accessor) {
      setSettingsCommandID(*(accessorImpl.settingsCommandID_Accessor));
    } else {
      settingsCommandID_Accessor.reset();
    }
    if (accessorImpl.rF_ResouceRequestIDandOption_Accessor) {
      setRF_ResouceRequestIDandOption(*(accessorImpl.rF_ResouceRequestIDandOption_Accessor));
    } else {
      rF_ResouceRequestIDandOption_Accessor.reset();
    }
    activeScanScheduleProfileIndex_Accessor = (accessorImpl.activeScanScheduleProfileIndex_Accessor ? accessorImpl.activeScanScheduleProfileIndex_Accessor : boost::none);
    if (accessorImpl.emitterPriorityBinDetail_Accessor) {
      setEmitterPriorityBinDetail(*(accessorImpl.emitterPriorityBinDetail_Accessor));
    } else {
      emitterPriorityBinDetail_Accessor.reset();
    }
  }
}

void AssociatedMessageSourceType::reset() noexcept {
  settingsCommandID_Accessor.reset();
  rF_ResouceRequestIDandOption_Accessor.reset();
  activeScanScheduleProfileIndex_Accessor.reset();
  emitterPriorityBinDetail_Accessor.reset();
}

uci::type::AssociatedMessageSourceType::AssociatedMessageSourceTypeChoice AssociatedMessageSourceType::getAssociatedMessageSourceTypeChoiceOrdinal() const noexcept {
  if (settingsCommandID_Accessor) {
    return ASSOCIATEDMESSAGESOURCETYPE_CHOICE_SETTINGSCOMMANDID;
  }
  if (rF_ResouceRequestIDandOption_Accessor) {
    return ASSOCIATEDMESSAGESOURCETYPE_CHOICE_RF_RESOUCEREQUESTIDANDOPTION;
  }
  if (activeScanScheduleProfileIndex_Accessor) {
    return ASSOCIATEDMESSAGESOURCETYPE_CHOICE_ACTIVESCANSCHEDULEPROFILEINDEX;
  }
  if (emitterPriorityBinDetail_Accessor) {
    return ASSOCIATEDMESSAGESOURCETYPE_CHOICE_EMITTERPRIORITYBINDETAIL;
  }
  return ASSOCIATEDMESSAGESOURCETYPE_CHOICE_NONE;
}

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::setAssociatedMessageSourceTypeChoiceOrdinal(uci::type::AssociatedMessageSourceType::AssociatedMessageSourceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ASSOCIATEDMESSAGESOURCETYPE_CHOICE_SETTINGSCOMMANDID:
      chooseSettingsCommandID("setAssociatedMessageSourceTypeChoiceOrdinal", type);
      break;
    case ASSOCIATEDMESSAGESOURCETYPE_CHOICE_RF_RESOUCEREQUESTIDANDOPTION:
      chooseRF_ResouceRequestIDandOption();
      break;
    case ASSOCIATEDMESSAGESOURCETYPE_CHOICE_ACTIVESCANSCHEDULEPROFILEINDEX:
      chooseActiveScanScheduleProfileIndex();
      break;
    case ASSOCIATEDMESSAGESOURCETYPE_CHOICE_EMITTERPRIORITYBINDETAIL:
      chooseEmitterPriorityBinDetail();
      break;
    default:
      throw uci::base::UCIException("Error in setAssociatedMessageSourceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::CommandID_Type& AssociatedMessageSourceType::getSettingsCommandID_() const {
  if (settingsCommandID_Accessor) {
    return *settingsCommandID_Accessor;
  }
  throw uci::base::UCIException("Error in getSettingsCommandID(): Unable to get SettingsCommandID, field not selected");
}

const uci::type::CommandID_Type& AssociatedMessageSourceType::getSettingsCommandID() const {
  return getSettingsCommandID_();
}

uci::type::CommandID_Type& AssociatedMessageSourceType::getSettingsCommandID() {
  return getSettingsCommandID_();
}

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::setSettingsCommandID(const uci::type::CommandID_Type& accessor) {
  chooseSettingsCommandID();
  if (&accessor != settingsCommandID_Accessor.get()) {
    settingsCommandID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssociatedMessageSourceType::isSettingsCommandID() const noexcept {
  return static_cast<bool>(settingsCommandID_Accessor);
}

uci::type::CommandID_Type& AssociatedMessageSourceType::chooseSettingsCommandID(const std::string& method, uci::base::accessorType::AccessorType type) {
  rF_ResouceRequestIDandOption_Accessor.reset();
  activeScanScheduleProfileIndex_Accessor.reset();
  emitterPriorityBinDetail_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commandID_Type : type};
  if ((!settingsCommandID_Accessor) || (settingsCommandID_Accessor->getAccessorType() != requestedType)) {
    settingsCommandID_Accessor = CommandID_Type::create(type);
    if (!settingsCommandID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *settingsCommandID_Accessor;
}

uci::type::CommandID_Type& AssociatedMessageSourceType::chooseSettingsCommandID(uci::base::accessorType::AccessorType type) {
  return chooseSettingsCommandID("chooseSettingsCommandID", type);
}

uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& AssociatedMessageSourceType::getRF_ResouceRequestIDandOption_() const {
  if (rF_ResouceRequestIDandOption_Accessor) {
    return *rF_ResouceRequestIDandOption_Accessor;
  }
  throw uci::base::UCIException("Error in getRF_ResouceRequestIDandOption(): Unable to get RF_ResouceRequestIDandOption, field not selected");
}

const uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& AssociatedMessageSourceType::getRF_ResouceRequestIDandOption() const {
  return getRF_ResouceRequestIDandOption_();
}

uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& AssociatedMessageSourceType::getRF_ResouceRequestIDandOption() {
  return getRF_ResouceRequestIDandOption_();
}

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::setRF_ResouceRequestIDandOption(const uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& accessor) {
  chooseRF_ResouceRequestIDandOption();
  if (&accessor != rF_ResouceRequestIDandOption_Accessor.get()) {
    rF_ResouceRequestIDandOption_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssociatedMessageSourceType::isRF_ResouceRequestIDandOption() const noexcept {
  return static_cast<bool>(rF_ResouceRequestIDandOption_Accessor);
}

uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& AssociatedMessageSourceType::chooseRF_ResouceRequestIDandOption() {
  settingsCommandID_Accessor.reset();
  activeScanScheduleProfileIndex_Accessor.reset();
  emitterPriorityBinDetail_Accessor.reset();
  if (!rF_ResouceRequestIDandOption_Accessor) {
    rF_ResouceRequestIDandOption_Accessor = boost::make_unique<RF_ResouceRequestIDandOption>(1, SIZE_MAX);
  }
  return *rF_ResouceRequestIDandOption_Accessor;
}

xs::UnsignedInt AssociatedMessageSourceType::getActiveScanScheduleProfileIndex() const {
  if (activeScanScheduleProfileIndex_Accessor) {
    return *activeScanScheduleProfileIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getActiveScanScheduleProfileIndex(): Unable to get ActiveScanScheduleProfileIndex, field not selected");
}

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::setActiveScanScheduleProfileIndex(xs::UnsignedInt value) {
  chooseActiveScanScheduleProfileIndex();
  activeScanScheduleProfileIndex_Accessor = value;
  return *this;
}

bool AssociatedMessageSourceType::isActiveScanScheduleProfileIndex() const noexcept {
  return static_cast<bool>(activeScanScheduleProfileIndex_Accessor);
}

void AssociatedMessageSourceType::chooseActiveScanScheduleProfileIndex() {
  settingsCommandID_Accessor.reset();
  rF_ResouceRequestIDandOption_Accessor.reset();
  emitterPriorityBinDetail_Accessor.reset();
  if (!activeScanScheduleProfileIndex_Accessor) {
    activeScanScheduleProfileIndex_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& AssociatedMessageSourceType::getEmitterPriorityBinDetail_() const {
  if (emitterPriorityBinDetail_Accessor) {
    return *emitterPriorityBinDetail_Accessor;
  }
  throw uci::base::UCIException("Error in getEmitterPriorityBinDetail(): Unable to get EmitterPriorityBinDetail, field not selected");
}

const uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& AssociatedMessageSourceType::getEmitterPriorityBinDetail() const {
  return getEmitterPriorityBinDetail_();
}

uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& AssociatedMessageSourceType::getEmitterPriorityBinDetail() {
  return getEmitterPriorityBinDetail_();
}

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::setEmitterPriorityBinDetail(const uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& accessor) {
  chooseEmitterPriorityBinDetail();
  if (&accessor != emitterPriorityBinDetail_Accessor.get()) {
    emitterPriorityBinDetail_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AssociatedMessageSourceType::isEmitterPriorityBinDetail() const noexcept {
  return static_cast<bool>(emitterPriorityBinDetail_Accessor);
}

uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& AssociatedMessageSourceType::chooseEmitterPriorityBinDetail() {
  settingsCommandID_Accessor.reset();
  rF_ResouceRequestIDandOption_Accessor.reset();
  activeScanScheduleProfileIndex_Accessor.reset();
  if (!emitterPriorityBinDetail_Accessor) {
    emitterPriorityBinDetail_Accessor = boost::make_unique<EmitterPriorityBinDetail>(1, SIZE_MAX);
  }
  return *emitterPriorityBinDetail_Accessor;
}

std::unique_ptr<AssociatedMessageSourceType> AssociatedMessageSourceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::associatedMessageSourceType : type};
  return (requestedType == uci::type::accessorType::associatedMessageSourceType) ? boost::make_unique<AssociatedMessageSourceType>() : nullptr;
}

/**  */
namespace AssociatedMessageSourceType_Names {

constexpr const char* Extern_Type_Name{"AssociatedMessageSourceType"};
constexpr const char* SettingsCommandID_Name{"SettingsCommandID"};
constexpr const char* RF_ResouceRequestIDandOption_Name{"RF_ResouceRequestIDandOption"};
constexpr const char* ActiveScanScheduleProfileIndex_Name{"ActiveScanScheduleProfileIndex"};
constexpr const char* EmitterPriorityBinDetail_Name{"EmitterPriorityBinDetail"};

} // namespace AssociatedMessageSourceType_Names

void AssociatedMessageSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AssociatedMessageSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AssociatedMessageSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AssociatedMessageSourceType_Names::SettingsCommandID_Name) {
      CommandID_Type::deserialize(valueType.second, accessor.chooseSettingsCommandID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssociatedMessageSourceType_Names::RF_ResouceRequestIDandOption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& boundedList = accessor.chooseRF_ResouceRequestIDandOption();
        const uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceRequestID_AndOptionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AssociatedMessageSourceType_Names::ActiveScanScheduleProfileIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActiveScanScheduleProfileIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AssociatedMessageSourceType_Names::EmitterPriorityBinDetail_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& boundedList = accessor.chooseEmitterPriorityBinDetail();
        const uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SharedSourceEmitterPriorityBinDetailType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string AssociatedMessageSourceType::serialize(const uci::type::AssociatedMessageSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AssociatedMessageSourceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AssociatedMessageSourceType_Names::Extern_Type_Name);
  }
  if (accessor.isSettingsCommandID()) {
    CommandID_Type::serialize(accessor.getSettingsCommandID(), node, AssociatedMessageSourceType_Names::SettingsCommandID_Name);
  } else if (accessor.isRF_ResouceRequestIDandOption()) {
    {
      const uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption& boundedList = accessor.getRF_ResouceRequestIDandOption();
      for (uci::type::AssociatedMessageSourceType::RF_ResouceRequestIDandOption::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ResourceRequestID_AndOptionType::serialize(boundedList.at(i), node, AssociatedMessageSourceType_Names::RF_ResouceRequestIDandOption_Name);
      }
    }
  } else if (accessor.isActiveScanScheduleProfileIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getActiveScanScheduleProfileIndex(), node, AssociatedMessageSourceType_Names::ActiveScanScheduleProfileIndex_Name);
  } else if (accessor.isEmitterPriorityBinDetail()) {
    {
      const uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail& boundedList = accessor.getEmitterPriorityBinDetail();
      for (uci::type::AssociatedMessageSourceType::EmitterPriorityBinDetail::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::SharedSourceEmitterPriorityBinDetailType::serialize(boundedList.at(i), node, AssociatedMessageSourceType_Names::EmitterPriorityBinDetail_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AssociatedMessageSourceType>().release());
}

uci::type::AssociatedMessageSourceType& AssociatedMessageSourceType::create(const uci::type::AssociatedMessageSourceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AssociatedMessageSourceType> newAccessor{boost::make_unique<asb_uci::type::AssociatedMessageSourceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AssociatedMessageSourceType::destroy(uci::type::AssociatedMessageSourceType& accessor) {
  delete dynamic_cast<asb_uci::type::AssociatedMessageSourceType*>(&accessor);
}

} // namespace type

} // namespace uci

