/** @file EntityManagementSwapType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EntityManagementSwapType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EntityID_Type.h"
#include "asb_uci/type/SwapEnum.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityManagementSwapType.h"
#include "uci/type/SwapEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityManagementSwapType::EntityManagementSwapType()
  : firstEntityID_Accessor{boost::make_unique<EntityID_Type>()},
    secondEntityID_Accessor{boost::make_unique<EntityID_Type>()} {
}

EntityManagementSwapType::~EntityManagementSwapType() = default;

void EntityManagementSwapType::copy(const uci::type::EntityManagementSwapType& accessor) {
  copyImpl(accessor, false);
}

void EntityManagementSwapType::copyImpl(const uci::type::EntityManagementSwapType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EntityManagementSwapType&>(accessor);
    setFirstEntityID(*(accessorImpl.firstEntityID_Accessor));
    setSecondEntityID(*(accessorImpl.secondEntityID_Accessor));
    if (accessorImpl.swapCharacteristics_Accessor) {
      setSwapCharacteristics(*(accessorImpl.swapCharacteristics_Accessor));
    } else {
      swapCharacteristics_Accessor.reset();
    }
  }
}

void EntityManagementSwapType::reset() noexcept {
  if (firstEntityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    firstEntityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    firstEntityID_Accessor->reset();
  }
  if (secondEntityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    secondEntityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    secondEntityID_Accessor->reset();
  }
  swapCharacteristics_Accessor.reset();
}

const uci::type::EntityID_Type& EntityManagementSwapType::getFirstEntityID() const {
  return *firstEntityID_Accessor;
}

uci::type::EntityID_Type& EntityManagementSwapType::getFirstEntityID() {
  return *firstEntityID_Accessor;
}

uci::type::EntityManagementSwapType& EntityManagementSwapType::setFirstEntityID(const uci::type::EntityID_Type& accessor) {
  enableFirstEntityID(accessor.getAccessorType());
  if (&accessor != firstEntityID_Accessor.get()) {
    firstEntityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityManagementSwapType::enableFirstEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!firstEntityID_Accessor) || (firstEntityID_Accessor->getAccessorType() != requestedType)) {
    firstEntityID_Accessor = EntityID_Type::create(requestedType);
    if (!firstEntityID_Accessor) {
      throw uci::base::UCIException("Error in enableFirstEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *firstEntityID_Accessor;
}

const uci::type::EntityID_Type& EntityManagementSwapType::getSecondEntityID() const {
  return *secondEntityID_Accessor;
}

uci::type::EntityID_Type& EntityManagementSwapType::getSecondEntityID() {
  return *secondEntityID_Accessor;
}

uci::type::EntityManagementSwapType& EntityManagementSwapType::setSecondEntityID(const uci::type::EntityID_Type& accessor) {
  enableSecondEntityID(accessor.getAccessorType());
  if (&accessor != secondEntityID_Accessor.get()) {
    secondEntityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& EntityManagementSwapType::enableSecondEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!secondEntityID_Accessor) || (secondEntityID_Accessor->getAccessorType() != requestedType)) {
    secondEntityID_Accessor = EntityID_Type::create(requestedType);
    if (!secondEntityID_Accessor) {
      throw uci::base::UCIException("Error in enableSecondEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *secondEntityID_Accessor;
}

uci::type::SwapEnum& EntityManagementSwapType::getSwapCharacteristics_() const {
  if (swapCharacteristics_Accessor) {
    return *swapCharacteristics_Accessor;
  }
  throw uci::base::UCIException("Error in getSwapCharacteristics(): An attempt was made to get an optional field that was not enabled, call hasSwapCharacteristics() to determine if it is safe to call getSwapCharacteristics()");
}

const uci::type::SwapEnum& EntityManagementSwapType::getSwapCharacteristics() const {
  return getSwapCharacteristics_();
}

uci::type::SwapEnum& EntityManagementSwapType::getSwapCharacteristics() {
  return getSwapCharacteristics_();
}

uci::type::EntityManagementSwapType& EntityManagementSwapType::setSwapCharacteristics(const uci::type::SwapEnum& accessor) {
  enableSwapCharacteristics();
  if (&accessor != swapCharacteristics_Accessor.get()) {
    swapCharacteristics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::EntityManagementSwapType& EntityManagementSwapType::setSwapCharacteristics(const uci::type::SwapEnum::EnumerationItem value) {
  enableSwapCharacteristics().setValue(value);
  return *this;
}

bool EntityManagementSwapType::hasSwapCharacteristics() const noexcept {
  return static_cast<bool>(swapCharacteristics_Accessor);
}

uci::type::SwapEnum& EntityManagementSwapType::enableSwapCharacteristics(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::swapEnum : type};
  if ((!swapCharacteristics_Accessor) || (swapCharacteristics_Accessor->getAccessorType() != requestedType)) {
    swapCharacteristics_Accessor = SwapEnum::create(requestedType);
    if (!swapCharacteristics_Accessor) {
      throw uci::base::UCIException("Error in enableSwapCharacteristics(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *swapCharacteristics_Accessor;
}

uci::type::EntityManagementSwapType& EntityManagementSwapType::clearSwapCharacteristics() noexcept {
  swapCharacteristics_Accessor.reset();
  return *this;
}

std::unique_ptr<EntityManagementSwapType> EntityManagementSwapType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityManagementSwapType : type};
  return (requestedType == uci::type::accessorType::entityManagementSwapType) ? boost::make_unique<EntityManagementSwapType>() : nullptr;
}

/**  */
namespace EntityManagementSwapType_Names {

constexpr const char* Extern_Type_Name{"EntityManagementSwapType"};
constexpr const char* FirstEntityID_Name{"FirstEntityID"};
constexpr const char* SecondEntityID_Name{"SecondEntityID"};
constexpr const char* SwapCharacteristics_Name{"SwapCharacteristics"};

} // namespace EntityManagementSwapType_Names

void EntityManagementSwapType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityManagementSwapType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityManagementSwapType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityManagementSwapType_Names::FirstEntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFirstEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityManagementSwapType_Names::SecondEntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSecondEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityManagementSwapType_Names::SwapCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSwapCharacteristics().setValueFromName(*value);
      }
    }
  }
}

std::string EntityManagementSwapType::serialize(const uci::type::EntityManagementSwapType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityManagementSwapType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityManagementSwapType_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getFirstEntityID(), node, EntityManagementSwapType_Names::FirstEntityID_Name);
  EntityID_Type::serialize(accessor.getSecondEntityID(), node, EntityManagementSwapType_Names::SecondEntityID_Name);
  if (accessor.hasSwapCharacteristics()) {
    SwapEnum::serialize(accessor.getSwapCharacteristics(), node, EntityManagementSwapType_Names::SwapCharacteristics_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityManagementSwapType& EntityManagementSwapType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityManagementSwapType>().release());
}

uci::type::EntityManagementSwapType& EntityManagementSwapType::create(const uci::type::EntityManagementSwapType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityManagementSwapType> newAccessor{boost::make_unique<asb_uci::type::EntityManagementSwapType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityManagementSwapType::destroy(uci::type::EntityManagementSwapType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityManagementSwapType*>(&accessor);
}

} // namespace type

} // namespace uci

