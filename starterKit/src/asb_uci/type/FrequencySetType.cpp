/** @file FrequencySetType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/FrequencySetType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/FrequencyMultiChannelType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/ModulationEnum.h"
#include "../../../include/asb_uci/type/RF_SignalContentEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyMultiChannelType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencySetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ModulationEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RF_SignalContentEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

FrequencySetType::FrequencySetType()
  : frequencyRange_Accessor{boost::make_unique<FrequencyRange>(1, SIZE_MAX)},
    modulation_Accessor{boost::make_unique<Modulation>(0, 62)} {
}

FrequencySetType::~FrequencySetType() = default;

void FrequencySetType::copy(const uci::type::FrequencySetType& accessor) {
  copyImpl(accessor, false);
}

void FrequencySetType::copyImpl(const uci::type::FrequencySetType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const FrequencySetType&>(accessor);
    setFrequencyRange(*(accessorImpl.frequencyRange_Accessor));
    setModulation(*(accessorImpl.modulation_Accessor));
    if (accessorImpl.hasEncrypted()) {
      setEncrypted(accessorImpl.getEncrypted());
    } else {
      clearEncrypted();
    }
    if (accessorImpl.multiChannel_Accessor) {
      setMultiChannel(*(accessorImpl.multiChannel_Accessor));
    } else {
      multiChannel_Accessor.reset();
    }
    if (accessorImpl.content_Accessor) {
      setContent(*(accessorImpl.content_Accessor));
    } else {
      content_Accessor.reset();
    }
  }
}

void FrequencySetType::reset() noexcept {
  frequencyRange_Accessor->reset();
  modulation_Accessor->reset();
  clearEncrypted();
  multiChannel_Accessor.reset();
  content_Accessor.reset();
}

const uci::type::FrequencySetType::FrequencyRange& FrequencySetType::getFrequencyRange() const {
  return *frequencyRange_Accessor;
}

uci::type::FrequencySetType::FrequencyRange& FrequencySetType::getFrequencyRange() {
  return *frequencyRange_Accessor;
}

uci::type::FrequencySetType& FrequencySetType::setFrequencyRange(const uci::type::FrequencySetType::FrequencyRange& accessor) {
  if (&accessor != frequencyRange_Accessor.get()) {
    frequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::FrequencySetType::Modulation& FrequencySetType::getModulation() const {
  return *modulation_Accessor;
}

uci::type::FrequencySetType::Modulation& FrequencySetType::getModulation() {
  return *modulation_Accessor;
}

uci::type::FrequencySetType& FrequencySetType::setModulation(const uci::type::FrequencySetType::Modulation& accessor) {
  if (&accessor != modulation_Accessor.get()) {
    modulation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean FrequencySetType::getEncrypted() const {
  if (encrypted_Accessor) {
    return *encrypted_Accessor;
  }
  throw uci::base::UCIException("Error in getEncrypted(): An attempt was made to get an optional field that was not enabled, call hasEncrypted() to determine if it is safe to call getEncrypted()");
}

uci::type::FrequencySetType& FrequencySetType::setEncrypted(xs::Boolean value) {
  encrypted_Accessor = value;
  return *this;
}

bool FrequencySetType::hasEncrypted() const noexcept {
  return encrypted_Accessor.has_value();
}

uci::type::FrequencySetType& FrequencySetType::clearEncrypted() noexcept {
  encrypted_Accessor.reset();
  return *this;
}

uci::type::FrequencyMultiChannelType& FrequencySetType::getMultiChannel_() const {
  if (multiChannel_Accessor) {
    return *multiChannel_Accessor;
  }
  throw uci::base::UCIException("Error in getMultiChannel(): An attempt was made to get an optional field that was not enabled, call hasMultiChannel() to determine if it is safe to call getMultiChannel()");
}

const uci::type::FrequencyMultiChannelType& FrequencySetType::getMultiChannel() const {
  return getMultiChannel_();
}

uci::type::FrequencyMultiChannelType& FrequencySetType::getMultiChannel() {
  return getMultiChannel_();
}

uci::type::FrequencySetType& FrequencySetType::setMultiChannel(const uci::type::FrequencyMultiChannelType& accessor) {
  enableMultiChannel();
  if (&accessor != multiChannel_Accessor.get()) {
    multiChannel_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool FrequencySetType::hasMultiChannel() const noexcept {
  return static_cast<bool>(multiChannel_Accessor);
}

uci::type::FrequencyMultiChannelType& FrequencySetType::enableMultiChannel(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencyMultiChannelType : type};
  if ((!multiChannel_Accessor) || (multiChannel_Accessor->getAccessorType() != requestedType)) {
    multiChannel_Accessor = FrequencyMultiChannelType::create(requestedType);
    if (!multiChannel_Accessor) {
      throw uci::base::UCIException("Error in enableMultiChannel(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *multiChannel_Accessor;
}

uci::type::FrequencySetType& FrequencySetType::clearMultiChannel() noexcept {
  multiChannel_Accessor.reset();
  return *this;
}

uci::type::RF_SignalContentEnum& FrequencySetType::getContent_() const {
  if (content_Accessor) {
    return *content_Accessor;
  }
  throw uci::base::UCIException("Error in getContent(): An attempt was made to get an optional field that was not enabled, call hasContent() to determine if it is safe to call getContent()");
}

const uci::type::RF_SignalContentEnum& FrequencySetType::getContent() const {
  return getContent_();
}

uci::type::RF_SignalContentEnum& FrequencySetType::getContent() {
  return getContent_();
}

uci::type::FrequencySetType& FrequencySetType::setContent(const uci::type::RF_SignalContentEnum& accessor) {
  enableContent();
  if (&accessor != content_Accessor.get()) {
    content_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::FrequencySetType& FrequencySetType::setContent(const uci::type::RF_SignalContentEnum::EnumerationItem value) {
  enableContent().setValue(value);
  return *this;
}

bool FrequencySetType::hasContent() const noexcept {
  return static_cast<bool>(content_Accessor);
}

uci::type::RF_SignalContentEnum& FrequencySetType::enableContent(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::rF_SignalContentEnum : type};
  if ((!content_Accessor) || (content_Accessor->getAccessorType() != requestedType)) {
    content_Accessor = RF_SignalContentEnum::create(requestedType);
    if (!content_Accessor) {
      throw uci::base::UCIException("Error in enableContent(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *content_Accessor;
}

uci::type::FrequencySetType& FrequencySetType::clearContent() noexcept {
  content_Accessor.reset();
  return *this;
}

std::unique_ptr<FrequencySetType> FrequencySetType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::frequencySetType : type};
  return (requestedType == uci::type::accessorType::frequencySetType) ? boost::make_unique<FrequencySetType>() : nullptr;
}

/**  */
namespace FrequencySetType_Names {

constexpr const char* Extern_Type_Name{"FrequencySetType"};
constexpr const char* FrequencyRange_Name{"FrequencyRange"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* Encrypted_Name{"Encrypted"};
constexpr const char* MultiChannel_Name{"MultiChannel"};
constexpr const char* Content_Name{"Content"};

} // namespace FrequencySetType_Names

void FrequencySetType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FrequencySetType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FrequencySetType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FrequencySetType_Names::FrequencyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FrequencySetType::FrequencyRange& boundedList = accessor.getFrequencyRange();
        const uci::type::FrequencySetType::FrequencyRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + FrequencySetType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FrequencySetType::Modulation& boundedList = accessor.getModulation();
        const uci::type::FrequencySetType::Modulation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencySetType_Names::Encrypted_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEncrypted(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencySetType_Names::MultiChannel_Name) {
      FrequencyMultiChannelType::deserialize(valueType.second, accessor.enableMultiChannel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FrequencySetType_Names::Content_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableContent().setValueFromName(*value);
      }
    }
  }
}

std::string FrequencySetType::serialize(const uci::type::FrequencySetType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? FrequencySetType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, FrequencySetType_Names::Extern_Type_Name);
  }
  {
    const uci::type::FrequencySetType::FrequencyRange& boundedList = accessor.getFrequencyRange();
    for (uci::type::FrequencySetType::FrequencyRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, FrequencySetType_Names::FrequencyRange_Name);
    }
  }
  {
    const uci::type::FrequencySetType::Modulation& boundedList = accessor.getModulation();
    for (uci::type::FrequencySetType::Modulation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ModulationEnum::serialize(boundedList.at(i), node, FrequencySetType_Names::Modulation_Name, false);
    }
  }
  if (accessor.hasEncrypted()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getEncrypted(), node, FrequencySetType_Names::Encrypted_Name);
  }
  if (accessor.hasMultiChannel()) {
    FrequencyMultiChannelType::serialize(accessor.getMultiChannel(), node, FrequencySetType_Names::MultiChannel_Name);
  }
  if (accessor.hasContent()) {
    RF_SignalContentEnum::serialize(accessor.getContent(), node, FrequencySetType_Names::Content_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::FrequencySetType& FrequencySetType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::FrequencySetType>().release());
}

uci::type::FrequencySetType& FrequencySetType::create(const uci::type::FrequencySetType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::FrequencySetType> newAccessor{boost::make_unique<asb_uci::type::FrequencySetType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void FrequencySetType::destroy(uci::type::FrequencySetType& accessor) {
  delete dynamic_cast<asb_uci::type::FrequencySetType*>(&accessor);
}

} // namespace type

} // namespace uci

