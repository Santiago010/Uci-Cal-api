/** @file ResourceDefinitionDigitalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ResourceDefinitionDigitalType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AperturePointingOptionsType.h"
#include "../../../include/asb_uci/type/BlankingLimitType.h"
#include "../../../include/asb_uci/type/ResourceAllocationPeriodDigitalType.h"
#include "../../../include/asb_uci/type/UnsignedIntegerMinMaxType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AperturePointingOptionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/BlankingLimitType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceAllocationPeriodDigitalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResourceDefinitionDigitalType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/UnsignedIntegerMinMaxType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ResourceDefinitionDigitalType::ResourceDefinitionDigitalType()
  : streamIndex_Accessor{boost::make_unique<StreamIndex>(0, SIZE_MAX)},
    resourceAccessPriority_Accessor{boost::make_unique<UnsignedIntegerMinMaxType>()},
    blankingLimit_Accessor{boost::make_unique<BlankingLimit>(0, SIZE_MAX)},
    periodAccessAllocations_Accessor{boost::make_unique<PeriodAccessAllocations>(1, SIZE_MAX)},
    pointingVector_Accessor{boost::make_unique<PointingVector>(0, SIZE_MAX)} {
}

ResourceDefinitionDigitalType::~ResourceDefinitionDigitalType() = default;

void ResourceDefinitionDigitalType::copy(const uci::type::ResourceDefinitionDigitalType& accessor) {
  copyImpl(accessor, false);
}

void ResourceDefinitionDigitalType::copyImpl(const uci::type::ResourceDefinitionDigitalType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ResourceDefinitionDigitalType&>(accessor);
    setResourceRequestOptionIndex(accessorImpl.resourceRequestOptionIndex_Accessor);
    setStreamIndex(*(accessorImpl.streamIndex_Accessor));
    if (accessorImpl.hasVAS_Endpoint()) {
      setVAS_Endpoint(accessorImpl.getVAS_Endpoint());
    } else {
      clearVAS_Endpoint();
    }
    setResourceAccessPriority(*(accessorImpl.resourceAccessPriority_Accessor));
    setBlankingLimit(*(accessorImpl.blankingLimit_Accessor));
    setPeriodAccessAllocations(*(accessorImpl.periodAccessAllocations_Accessor));
    setPointingVector(*(accessorImpl.pointingVector_Accessor));
  }
}

void ResourceDefinitionDigitalType::reset() noexcept {
  resourceRequestOptionIndex_Accessor = 0;
  streamIndex_Accessor->reset();
  clearVAS_Endpoint();
  if (resourceAccessPriority_Accessor->getAccessorType() != uci::type::accessorType::unsignedIntegerMinMaxType) {
    resourceAccessPriority_Accessor = boost::make_unique<UnsignedIntegerMinMaxType>();
  } else {
    resourceAccessPriority_Accessor->reset();
  }
  blankingLimit_Accessor->reset();
  periodAccessAllocations_Accessor->reset();
  pointingVector_Accessor->reset();
}

xs::UnsignedInt ResourceDefinitionDigitalType::getResourceRequestOptionIndex() const {
  return resourceRequestOptionIndex_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setResourceRequestOptionIndex(xs::UnsignedInt value) {
  resourceRequestOptionIndex_Accessor = value;
  return *this;
}


const uci::type::ResourceDefinitionDigitalType::StreamIndex& ResourceDefinitionDigitalType::getStreamIndex() const {
  return *streamIndex_Accessor;
}

uci::type::ResourceDefinitionDigitalType::StreamIndex& ResourceDefinitionDigitalType::getStreamIndex() {
  return *streamIndex_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setStreamIndex(const uci::type::ResourceDefinitionDigitalType::StreamIndex& accessor) {
  if (&accessor != streamIndex_Accessor.get()) {
    streamIndex_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt ResourceDefinitionDigitalType::getVAS_Endpoint() const {
  if (vAS_Endpoint_Accessor) {
    return *vAS_Endpoint_Accessor;
  }
  throw uci::base::UCIException("Error in getVAS_Endpoint(): An attempt was made to get an optional field that was not enabled, call hasVAS_Endpoint() to determine if it is safe to call getVAS_Endpoint()");
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setVAS_Endpoint(xs::UnsignedInt value) {
  vAS_Endpoint_Accessor = value;
  return *this;
}

bool ResourceDefinitionDigitalType::hasVAS_Endpoint() const noexcept {
  return vAS_Endpoint_Accessor.has_value();
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::clearVAS_Endpoint() noexcept {
  vAS_Endpoint_Accessor.reset();
  return *this;
}

const uci::type::UnsignedIntegerMinMaxType& ResourceDefinitionDigitalType::getResourceAccessPriority() const {
  return *resourceAccessPriority_Accessor;
}

uci::type::UnsignedIntegerMinMaxType& ResourceDefinitionDigitalType::getResourceAccessPriority() {
  return *resourceAccessPriority_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setResourceAccessPriority(const uci::type::UnsignedIntegerMinMaxType& accessor) {
  enableResourceAccessPriority(accessor.getAccessorType());
  if (&accessor != resourceAccessPriority_Accessor.get()) {
    resourceAccessPriority_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::UnsignedIntegerMinMaxType& ResourceDefinitionDigitalType::enableResourceAccessPriority(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::unsignedIntegerMinMaxType : type};
  if ((!resourceAccessPriority_Accessor) || (resourceAccessPriority_Accessor->getAccessorType() != requestedType)) {
    resourceAccessPriority_Accessor = UnsignedIntegerMinMaxType::create(requestedType);
    if (!resourceAccessPriority_Accessor) {
      throw uci::base::UCIException("Error in enableResourceAccessPriority(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *resourceAccessPriority_Accessor;
}

const uci::type::ResourceDefinitionDigitalType::BlankingLimit& ResourceDefinitionDigitalType::getBlankingLimit() const {
  return *blankingLimit_Accessor;
}

uci::type::ResourceDefinitionDigitalType::BlankingLimit& ResourceDefinitionDigitalType::getBlankingLimit() {
  return *blankingLimit_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setBlankingLimit(const uci::type::ResourceDefinitionDigitalType::BlankingLimit& accessor) {
  if (&accessor != blankingLimit_Accessor.get()) {
    blankingLimit_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations& ResourceDefinitionDigitalType::getPeriodAccessAllocations() const {
  return *periodAccessAllocations_Accessor;
}

uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations& ResourceDefinitionDigitalType::getPeriodAccessAllocations() {
  return *periodAccessAllocations_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setPeriodAccessAllocations(const uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations& accessor) {
  if (&accessor != periodAccessAllocations_Accessor.get()) {
    periodAccessAllocations_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ResourceDefinitionDigitalType::PointingVector& ResourceDefinitionDigitalType::getPointingVector() const {
  return *pointingVector_Accessor;
}

uci::type::ResourceDefinitionDigitalType::PointingVector& ResourceDefinitionDigitalType::getPointingVector() {
  return *pointingVector_Accessor;
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::setPointingVector(const uci::type::ResourceDefinitionDigitalType::PointingVector& accessor) {
  if (&accessor != pointingVector_Accessor.get()) {
    pointingVector_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ResourceDefinitionDigitalType> ResourceDefinitionDigitalType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::resourceDefinitionDigitalType : type};
  return (requestedType == uci::type::accessorType::resourceDefinitionDigitalType) ? boost::make_unique<ResourceDefinitionDigitalType>() : nullptr;
}

/**  */
namespace ResourceDefinitionDigitalType_Names {

constexpr const char* Extern_Type_Name{"ResourceDefinitionDigitalType"};
constexpr const char* ResourceRequestOptionIndex_Name{"ResourceRequestOptionIndex"};
constexpr const char* StreamIndex_Name{"StreamIndex"};
constexpr const char* VAS_Endpoint_Name{"VAS_Endpoint"};
constexpr const char* ResourceAccessPriority_Name{"ResourceAccessPriority"};
constexpr const char* BlankingLimit_Name{"BlankingLimit"};
constexpr const char* PeriodAccessAllocations_Name{"PeriodAccessAllocations"};
constexpr const char* PointingVector_Name{"PointingVector"};

} // namespace ResourceDefinitionDigitalType_Names

void ResourceDefinitionDigitalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResourceDefinitionDigitalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResourceDefinitionDigitalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::ResourceRequestOptionIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResourceRequestOptionIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::StreamIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceDefinitionDigitalType::StreamIndex& boundedList = accessor.getStreamIndex();
        const uci::type::ResourceDefinitionDigitalType::StreamIndex::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedIntValue(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::VAS_Endpoint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVAS_Endpoint(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::ResourceAccessPriority_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableResourceAccessPriority(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::BlankingLimit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceDefinitionDigitalType::BlankingLimit& boundedList = accessor.getBlankingLimit();
        const uci::type::ResourceDefinitionDigitalType::BlankingLimit::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::BlankingLimitType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::PeriodAccessAllocations_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations& boundedList = accessor.getPeriodAccessAllocations();
        const uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ResourceAllocationPeriodDigitalType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResourceDefinitionDigitalType_Names::PointingVector_Name) {
      uci::type::ResourceDefinitionDigitalType::PointingVector& boundedList = accessor.getPointingVector();
      const uci::type::ResourceDefinitionDigitalType::PointingVector::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::AperturePointingOptionsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    }
  }
}

std::string ResourceDefinitionDigitalType::serialize(const uci::type::ResourceDefinitionDigitalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ResourceDefinitionDigitalType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ResourceDefinitionDigitalType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getResourceRequestOptionIndex(), node, ResourceDefinitionDigitalType_Names::ResourceRequestOptionIndex_Name);
  {
    const uci::type::ResourceDefinitionDigitalType::StreamIndex& boundedList = accessor.getStreamIndex();
    for (uci::type::ResourceDefinitionDigitalType::StreamIndex::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(boundedList.at(i), node, ResourceDefinitionDigitalType_Names::StreamIndex_Name);
    }
  }
  if (accessor.hasVAS_Endpoint()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getVAS_Endpoint(), node, ResourceDefinitionDigitalType_Names::VAS_Endpoint_Name);
  }
  UnsignedIntegerMinMaxType::serialize(accessor.getResourceAccessPriority(), node, ResourceDefinitionDigitalType_Names::ResourceAccessPriority_Name);
  {
    const uci::type::ResourceDefinitionDigitalType::BlankingLimit& boundedList = accessor.getBlankingLimit();
    for (uci::type::ResourceDefinitionDigitalType::BlankingLimit::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::BlankingLimitType::serialize(boundedList.at(i), node, ResourceDefinitionDigitalType_Names::BlankingLimit_Name);
    }
  }
  {
    const uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations& boundedList = accessor.getPeriodAccessAllocations();
    for (uci::type::ResourceDefinitionDigitalType::PeriodAccessAllocations::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ResourceAllocationPeriodDigitalType::serialize(boundedList.at(i), node, ResourceDefinitionDigitalType_Names::PeriodAccessAllocations_Name);
    }
  }
  {
    const uci::type::ResourceDefinitionDigitalType::PointingVector& boundedList = accessor.getPointingVector();
    for (uci::type::ResourceDefinitionDigitalType::PointingVector::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::AperturePointingOptionsType::serialize(boundedList.at(i), node, ResourceDefinitionDigitalType_Names::PointingVector_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ResourceDefinitionDigitalType>().release());
}

uci::type::ResourceDefinitionDigitalType& ResourceDefinitionDigitalType::create(const uci::type::ResourceDefinitionDigitalType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ResourceDefinitionDigitalType> newAccessor{boost::make_unique<asb_uci::type::ResourceDefinitionDigitalType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ResourceDefinitionDigitalType::destroy(uci::type::ResourceDefinitionDigitalType& accessor) {
  delete dynamic_cast<asb_uci::type::ResourceDefinitionDigitalType*>(&accessor);
}

} // namespace type

} // namespace uci

