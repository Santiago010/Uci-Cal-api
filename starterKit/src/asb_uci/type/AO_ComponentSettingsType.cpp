/** @file AO_ComponentSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/AO_ComponentSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/AO_CodeType.h"
#include "../../../include/asb_uci/type/ComponentID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_CodeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/AO_ComponentSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PowerType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AO_ComponentSettingsType::AO_ComponentSettingsType()
  : componentID_Accessor{boost::make_unique<ComponentID_Type>()} {
}

AO_ComponentSettingsType::~AO_ComponentSettingsType() = default;

void AO_ComponentSettingsType::copy(const uci::type::AO_ComponentSettingsType& accessor) {
  copyImpl(accessor, false);
}

void AO_ComponentSettingsType::copyImpl(const uci::type::AO_ComponentSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const AO_ComponentSettingsType&>(accessor);
    setComponentID(*(accessorImpl.componentID_Accessor));
    setPower(accessorImpl.power_Accessor);
    if (accessorImpl.aO_Code_Accessor) {
      setAO_Code(*(accessorImpl.aO_Code_Accessor));
    } else {
      aO_Code_Accessor.reset();
    }
  }
}

void AO_ComponentSettingsType::reset() noexcept {
  componentID_Accessor->reset();
  power_Accessor = 0.0;
  aO_Code_Accessor.reset();
}

const uci::type::ComponentID_Type& AO_ComponentSettingsType::getComponentID() const {
  return *componentID_Accessor;
}

uci::type::ComponentID_Type& AO_ComponentSettingsType::getComponentID() {
  return *componentID_Accessor;
}

uci::type::AO_ComponentSettingsType& AO_ComponentSettingsType::setComponentID(const uci::type::ComponentID_Type& accessor) {
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PowerTypeValue AO_ComponentSettingsType::getPower() const {
  return power_Accessor;
}

uci::type::AO_ComponentSettingsType& AO_ComponentSettingsType::setPower(uci::type::PowerTypeValue value) {
  power_Accessor = value;
  return *this;
}


uci::type::AO_CodeType& AO_ComponentSettingsType::getAO_Code_() const {
  if (aO_Code_Accessor) {
    return *aO_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getAO_Code(): An attempt was made to get an optional field that was not enabled, call hasAO_Code() to determine if it is safe to call getAO_Code()");
}

const uci::type::AO_CodeType& AO_ComponentSettingsType::getAO_Code() const {
  return getAO_Code_();
}

uci::type::AO_CodeType& AO_ComponentSettingsType::getAO_Code() {
  return getAO_Code_();
}

uci::type::AO_ComponentSettingsType& AO_ComponentSettingsType::setAO_Code(const uci::type::AO_CodeType& accessor) {
  enableAO_Code();
  if (&accessor != aO_Code_Accessor.get()) {
    aO_Code_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AO_ComponentSettingsType::hasAO_Code() const noexcept {
  return static_cast<bool>(aO_Code_Accessor);
}

uci::type::AO_CodeType& AO_ComponentSettingsType::enableAO_Code(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CodeType : type};
  if ((!aO_Code_Accessor) || (aO_Code_Accessor->getAccessorType() != requestedType)) {
    aO_Code_Accessor = AO_CodeType::create(requestedType);
    if (!aO_Code_Accessor) {
      throw uci::base::UCIException("Error in enableAO_Code(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aO_Code_Accessor;
}

uci::type::AO_ComponentSettingsType& AO_ComponentSettingsType::clearAO_Code() noexcept {
  aO_Code_Accessor.reset();
  return *this;
}

std::unique_ptr<AO_ComponentSettingsType> AO_ComponentSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_ComponentSettingsType : type};
  return (requestedType == uci::type::accessorType::aO_ComponentSettingsType) ? boost::make_unique<AO_ComponentSettingsType>() : nullptr;
}

/**  */
namespace AO_ComponentSettingsType_Names {

constexpr const char* Extern_Type_Name{"AO_ComponentSettingsType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Power_Name{"Power"};
constexpr const char* AO_Code_Name{"AO_Code"};

} // namespace AO_ComponentSettingsType_Names

void AO_ComponentSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AO_ComponentSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AO_ComponentSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AO_ComponentSettingsType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_ComponentSettingsType_Names::Power_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPower(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AO_ComponentSettingsType_Names::AO_Code_Name) {
      AO_CodeType::deserialize(valueType.second, accessor.enableAO_Code(), nodeName, nsPrefix);
    }
  }
}

std::string AO_ComponentSettingsType::serialize(const uci::type::AO_ComponentSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AO_ComponentSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AO_ComponentSettingsType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, AO_ComponentSettingsType_Names::ComponentID_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPower(), node, AO_ComponentSettingsType_Names::Power_Name);
  if (accessor.hasAO_Code()) {
    AO_CodeType::serialize(accessor.getAO_Code(), node, AO_ComponentSettingsType_Names::AO_Code_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AO_ComponentSettingsType& AO_ComponentSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AO_ComponentSettingsType>().release());
}

uci::type::AO_ComponentSettingsType& AO_ComponentSettingsType::create(const uci::type::AO_ComponentSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AO_ComponentSettingsType> newAccessor{boost::make_unique<asb_uci::type::AO_ComponentSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AO_ComponentSettingsType::destroy(uci::type::AO_ComponentSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::AO_ComponentSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

