/** @file CS_HeaderType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_HeaderType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CS_STO_TraceabilityType.h"
#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/MissionID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_HeaderType.h"
#include "uci/type/CS_STO_TraceabilityType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/VisibleString64Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_HeaderType::CS_HeaderType()
  : taskID_Accessor{boost::make_unique<TaskID_Type>()},
    taskingWindow_Accessor{boost::make_unique<DateTimeRangeType>()},
    reportingLocation_Accessor{boost::make_unique<VisibleString64Type>()},
    missionID_Accessor{boost::make_unique<MissionID_Type>()},
    spaceTaskingOrder_Accessor{boost::make_unique<CS_STO_TraceabilityType>()} {
}

CS_HeaderType::~CS_HeaderType() = default;

void CS_HeaderType::copy(const uci::type::CS_HeaderType& accessor) {
  copyImpl(accessor, false);
}

void CS_HeaderType::copyImpl(const uci::type::CS_HeaderType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CS_HeaderType&>(accessor);
    setTaskID(*(accessorImpl.taskID_Accessor));
    setTaskingWindow(*(accessorImpl.taskingWindow_Accessor));
    setReportingLocation(*(accessorImpl.reportingLocation_Accessor));
    setMissionID(*(accessorImpl.missionID_Accessor));
    setSpaceTaskingOrder(*(accessorImpl.spaceTaskingOrder_Accessor));
    if (accessorImpl.systemID_Accessor) {
      setSystemID(*(accessorImpl.systemID_Accessor));
    } else {
      systemID_Accessor.reset();
    }
  }
}

void CS_HeaderType::reset() noexcept {
  taskID_Accessor->reset();
  taskingWindow_Accessor->reset();
  reportingLocation_Accessor->reset();
  missionID_Accessor->reset();
  spaceTaskingOrder_Accessor->reset();
  systemID_Accessor.reset();
}

const uci::type::TaskID_Type& CS_HeaderType::getTaskID() const {
  return *taskID_Accessor;
}

uci::type::TaskID_Type& CS_HeaderType::getTaskID() {
  return *taskID_Accessor;
}

uci::type::CS_HeaderType& CS_HeaderType::setTaskID(const uci::type::TaskID_Type& accessor) {
  if (&accessor != taskID_Accessor.get()) {
    taskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DateTimeRangeType& CS_HeaderType::getTaskingWindow() const {
  return *taskingWindow_Accessor;
}

uci::type::DateTimeRangeType& CS_HeaderType::getTaskingWindow() {
  return *taskingWindow_Accessor;
}

uci::type::CS_HeaderType& CS_HeaderType::setTaskingWindow(const uci::type::DateTimeRangeType& accessor) {
  if (&accessor != taskingWindow_Accessor.get()) {
    taskingWindow_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::VisibleString64Type& CS_HeaderType::getReportingLocation() const noexcept {
  return *reportingLocation_Accessor;
}

uci::type::VisibleString64Type& CS_HeaderType::getReportingLocation() noexcept {
  return *reportingLocation_Accessor;
}

uci::type::CS_HeaderType& CS_HeaderType::setReportingLocation(const uci::type::VisibleString64Type& value) {
  return setReportingLocation(value.c_str());
}

uci::type::CS_HeaderType& CS_HeaderType::setReportingLocation(const std::string& value) {
  return setReportingLocation(value.c_str());
}

uci::type::CS_HeaderType& CS_HeaderType::setReportingLocation(const char* value) {
  reportingLocation_Accessor->setStringValue(value);
  return *this;
}

const uci::type::MissionID_Type& CS_HeaderType::getMissionID() const {
  return *missionID_Accessor;
}

uci::type::MissionID_Type& CS_HeaderType::getMissionID() {
  return *missionID_Accessor;
}

uci::type::CS_HeaderType& CS_HeaderType::setMissionID(const uci::type::MissionID_Type& accessor) {
  if (&accessor != missionID_Accessor.get()) {
    missionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CS_STO_TraceabilityType& CS_HeaderType::getSpaceTaskingOrder() const {
  return *spaceTaskingOrder_Accessor;
}

uci::type::CS_STO_TraceabilityType& CS_HeaderType::getSpaceTaskingOrder() {
  return *spaceTaskingOrder_Accessor;
}

uci::type::CS_HeaderType& CS_HeaderType::setSpaceTaskingOrder(const uci::type::CS_STO_TraceabilityType& accessor) {
  if (&accessor != spaceTaskingOrder_Accessor.get()) {
    spaceTaskingOrder_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& CS_HeaderType::getSystemID_() const {
  if (systemID_Accessor) {
    return *systemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSystemID(): An attempt was made to get an optional field that was not enabled, call hasSystemID() to determine if it is safe to call getSystemID()");
}

const uci::type::SystemID_Type& CS_HeaderType::getSystemID() const {
  return getSystemID_();
}

uci::type::SystemID_Type& CS_HeaderType::getSystemID() {
  return getSystemID_();
}

uci::type::CS_HeaderType& CS_HeaderType::setSystemID(const uci::type::SystemID_Type& accessor) {
  enableSystemID();
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_HeaderType::hasSystemID() const noexcept {
  return static_cast<bool>(systemID_Accessor);
}

uci::type::SystemID_Type& CS_HeaderType::enableSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!systemID_Accessor) || (systemID_Accessor->getAccessorType() != requestedType)) {
    systemID_Accessor = SystemID_Type::create(requestedType);
    if (!systemID_Accessor) {
      throw uci::base::UCIException("Error in enableSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *systemID_Accessor;
}

uci::type::CS_HeaderType& CS_HeaderType::clearSystemID() noexcept {
  systemID_Accessor.reset();
  return *this;
}

std::unique_ptr<CS_HeaderType> CS_HeaderType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_HeaderType : type};
  return (requestedType == uci::type::accessorType::cS_HeaderType) ? boost::make_unique<CS_HeaderType>() : nullptr;
}

/**  */
namespace CS_HeaderType_Names {

constexpr const char* Extern_Type_Name{"CS_HeaderType"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* TaskingWindow_Name{"TaskingWindow"};
constexpr const char* ReportingLocation_Name{"ReportingLocation"};
constexpr const char* MissionID_Name{"MissionID"};
constexpr const char* SpaceTaskingOrder_Name{"SpaceTaskingOrder"};
constexpr const char* SystemID_Name{"SystemID"};

} // namespace CS_HeaderType_Names

void CS_HeaderType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_HeaderType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_HeaderType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_HeaderType_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_HeaderType_Names::TaskingWindow_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.getTaskingWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_HeaderType_Names::ReportingLocation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReportingLocation(*value);
      }
    } else if (valueType.first == nsPrefix + CS_HeaderType_Names::MissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.getMissionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_HeaderType_Names::SpaceTaskingOrder_Name) {
      CS_STO_TraceabilityType::deserialize(valueType.second, accessor.getSpaceTaskingOrder(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_HeaderType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    }
  }
}

std::string CS_HeaderType::serialize(const uci::type::CS_HeaderType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_HeaderType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_HeaderType_Names::Extern_Type_Name);
  }
  TaskID_Type::serialize(accessor.getTaskID(), node, CS_HeaderType_Names::TaskID_Name);
  DateTimeRangeType::serialize(accessor.getTaskingWindow(), node, CS_HeaderType_Names::TaskingWindow_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getReportingLocation(), node, CS_HeaderType_Names::ReportingLocation_Name);
  MissionID_Type::serialize(accessor.getMissionID(), node, CS_HeaderType_Names::MissionID_Name);
  CS_STO_TraceabilityType::serialize(accessor.getSpaceTaskingOrder(), node, CS_HeaderType_Names::SpaceTaskingOrder_Name);
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, CS_HeaderType_Names::SystemID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_HeaderType& CS_HeaderType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_HeaderType>().release());
}

uci::type::CS_HeaderType& CS_HeaderType::create(const uci::type::CS_HeaderType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_HeaderType> newAccessor{boost::make_unique<asb_uci::type::CS_HeaderType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_HeaderType::destroy(uci::type::CS_HeaderType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_HeaderType*>(&accessor);
}

} // namespace type

} // namespace uci

