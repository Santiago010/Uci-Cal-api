/** @file QueryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/QueryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/QueryComparisonType.h"
#include "asb_uci/type/QueryContainsType.h"
#include "asb_uci/type/QueryCountType.h"
#include "asb_uci/type/QueryEqualsType.h"
#include "asb_uci/type/QueryExistsType.h"
#include "asb_uci/type/QueryInstanceOfType.h"
#include "asb_uci/type/QueryMatchType.h"
#include "asb_uci/type/QueryPET.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/QueryComparisonType.h"
#include "uci/type/QueryContainsType.h"
#include "uci/type/QueryCountType.h"
#include "uci/type/QueryEqualsType.h"
#include "uci/type/QueryExistsType.h"
#include "uci/type/QueryInstanceOfType.h"
#include "uci/type/QueryMatchType.h"
#include "uci/type/QueryPET.h"
#include "uci/type/QueryType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

QueryType::QueryType() = default;

QueryType::~QueryType() = default;

void QueryType::copy(const uci::type::QueryType& accessor) {
  copyImpl(accessor, false);
}

void QueryType::copyImpl(const uci::type::QueryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    QueryPET::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const QueryType&>(accessor);
    if (accessorImpl.equals_Accessor) {
      setEquals(*(accessorImpl.equals_Accessor));
    } else {
      equals_Accessor.reset();
    }
    if (accessorImpl.lessThan_Accessor) {
      setLessThan(*(accessorImpl.lessThan_Accessor));
    } else {
      lessThan_Accessor.reset();
    }
    if (accessorImpl.lessThanOrEqualTo_Accessor) {
      setLessThanOrEqualTo(*(accessorImpl.lessThanOrEqualTo_Accessor));
    } else {
      lessThanOrEqualTo_Accessor.reset();
    }
    if (accessorImpl.greaterThan_Accessor) {
      setGreaterThan(*(accessorImpl.greaterThan_Accessor));
    } else {
      greaterThan_Accessor.reset();
    }
    if (accessorImpl.greaterThanOrEqualTo_Accessor) {
      setGreaterThanOrEqualTo(*(accessorImpl.greaterThanOrEqualTo_Accessor));
    } else {
      greaterThanOrEqualTo_Accessor.reset();
    }
    if (accessorImpl.containsCaseSensitive_Accessor) {
      setContainsCaseSensitive(*(accessorImpl.containsCaseSensitive_Accessor));
    } else {
      containsCaseSensitive_Accessor.reset();
    }
    if (accessorImpl.containsCaseInsensitive_Accessor) {
      setContainsCaseInsensitive(*(accessorImpl.containsCaseInsensitive_Accessor));
    } else {
      containsCaseInsensitive_Accessor.reset();
    }
    if (accessorImpl.instanceOf_Accessor) {
      setInstanceOf(*(accessorImpl.instanceOf_Accessor));
    } else {
      instanceOf_Accessor.reset();
    }
    if (accessorImpl.count_Accessor) {
      setCount(*(accessorImpl.count_Accessor));
    } else {
      count_Accessor.reset();
    }
    if (accessorImpl.exists_Accessor) {
      setExists(*(accessorImpl.exists_Accessor));
    } else {
      exists_Accessor.reset();
    }
    if (accessorImpl.anyMatch_Accessor) {
      setAnyMatch(*(accessorImpl.anyMatch_Accessor));
    } else {
      anyMatch_Accessor.reset();
    }
    if (accessorImpl.allMatch_Accessor) {
      setAllMatch(*(accessorImpl.allMatch_Accessor));
    } else {
      allMatch_Accessor.reset();
    }
    if (accessorImpl.and_Accessor) {
      setAnd(*(accessorImpl.and_Accessor));
    } else {
      and_Accessor.reset();
    }
    if (accessorImpl.or_Accessor) {
      setOr(*(accessorImpl.or_Accessor));
    } else {
      or_Accessor.reset();
    }
    if (accessorImpl.not_Accessor) {
      setNot(*(accessorImpl.not_Accessor));
    } else {
      not_Accessor.reset();
    }
  }
}

void QueryType::reset() noexcept {
  QueryPET::reset();
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
}

uci::type::QueryType::QueryTypeChoice QueryType::getQueryTypeChoiceOrdinal() const noexcept {
  if (equals_Accessor) {
    return QUERYTYPE_CHOICE_EQUALS;
  }
  if (lessThan_Accessor) {
    return QUERYTYPE_CHOICE_LESSTHAN;
  }
  if (lessThanOrEqualTo_Accessor) {
    return QUERYTYPE_CHOICE_LESSTHANOREQUALTO;
  }
  if (greaterThan_Accessor) {
    return QUERYTYPE_CHOICE_GREATERTHAN;
  }
  if (greaterThanOrEqualTo_Accessor) {
    return QUERYTYPE_CHOICE_GREATERTHANOREQUALTO;
  }
  if (containsCaseSensitive_Accessor) {
    return QUERYTYPE_CHOICE_CONTAINSCASESENSITIVE;
  }
  if (containsCaseInsensitive_Accessor) {
    return QUERYTYPE_CHOICE_CONTAINSCASEINSENSITIVE;
  }
  if (instanceOf_Accessor) {
    return QUERYTYPE_CHOICE_INSTANCEOF;
  }
  if (count_Accessor) {
    return QUERYTYPE_CHOICE_COUNT;
  }
  if (exists_Accessor) {
    return QUERYTYPE_CHOICE_EXISTS;
  }
  if (anyMatch_Accessor) {
    return QUERYTYPE_CHOICE_ANYMATCH;
  }
  if (allMatch_Accessor) {
    return QUERYTYPE_CHOICE_ALLMATCH;
  }
  if (and_Accessor) {
    return QUERYTYPE_CHOICE_AND;
  }
  if (or_Accessor) {
    return QUERYTYPE_CHOICE_OR;
  }
  if (not_Accessor) {
    return QUERYTYPE_CHOICE_NOT;
  }
  return QUERYTYPE_CHOICE_NONE;
}

uci::type::QueryType& QueryType::setQueryTypeChoiceOrdinal(uci::type::QueryType::QueryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case QUERYTYPE_CHOICE_EQUALS:
      chooseEquals("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_LESSTHAN:
      chooseLessThan("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_LESSTHANOREQUALTO:
      chooseLessThanOrEqualTo("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_GREATERTHAN:
      chooseGreaterThan("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_GREATERTHANOREQUALTO:
      chooseGreaterThanOrEqualTo("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_CONTAINSCASESENSITIVE:
      chooseContainsCaseSensitive("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_CONTAINSCASEINSENSITIVE:
      chooseContainsCaseInsensitive("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_INSTANCEOF:
      chooseInstanceOf("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_COUNT:
      chooseCount("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_EXISTS:
      chooseExists("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_ANYMATCH:
      chooseAnyMatch("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_ALLMATCH:
      chooseAllMatch("setQueryTypeChoiceOrdinal", type);
      break;
    case QUERYTYPE_CHOICE_AND:
      chooseAnd();
      break;
    case QUERYTYPE_CHOICE_OR:
      chooseOr();
      break;
    case QUERYTYPE_CHOICE_NOT:
      chooseNot("setQueryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setQueryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::QueryEqualsType& QueryType::getEquals_() const {
  if (equals_Accessor) {
    return *equals_Accessor;
  }
  throw uci::base::UCIException("Error in getEquals(): Unable to get Equals, field not selected");
}

const uci::type::QueryEqualsType& QueryType::getEquals() const {
  return getEquals_();
}

uci::type::QueryEqualsType& QueryType::getEquals() {
  return getEquals_();
}

uci::type::QueryType& QueryType::setEquals(const uci::type::QueryEqualsType& accessor) {
  chooseEquals();
  if (&accessor != equals_Accessor.get()) {
    equals_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isEquals() const noexcept {
  return static_cast<bool>(equals_Accessor);
}

uci::type::QueryEqualsType& QueryType::chooseEquals(const std::string& method, uci::base::accessorType::AccessorType type) {
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryEqualsType : type};
  if ((!equals_Accessor) || (equals_Accessor->getAccessorType() != requestedType)) {
    equals_Accessor = QueryEqualsType::create(type);
    if (!equals_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *equals_Accessor;
}

uci::type::QueryEqualsType& QueryType::chooseEquals(uci::base::accessorType::AccessorType type) {
  return chooseEquals("chooseEquals", type);
}

uci::type::QueryComparisonType& QueryType::getLessThan_() const {
  if (lessThan_Accessor) {
    return *lessThan_Accessor;
  }
  throw uci::base::UCIException("Error in getLessThan(): Unable to get LessThan, field not selected");
}

const uci::type::QueryComparisonType& QueryType::getLessThan() const {
  return getLessThan_();
}

uci::type::QueryComparisonType& QueryType::getLessThan() {
  return getLessThan_();
}

uci::type::QueryType& QueryType::setLessThan(const uci::type::QueryComparisonType& accessor) {
  chooseLessThan();
  if (&accessor != lessThan_Accessor.get()) {
    lessThan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isLessThan() const noexcept {
  return static_cast<bool>(lessThan_Accessor);
}

uci::type::QueryComparisonType& QueryType::chooseLessThan(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryComparisonType : type};
  if ((!lessThan_Accessor) || (lessThan_Accessor->getAccessorType() != requestedType)) {
    lessThan_Accessor = QueryComparisonType::create(type);
    if (!lessThan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lessThan_Accessor;
}

uci::type::QueryComparisonType& QueryType::chooseLessThan(uci::base::accessorType::AccessorType type) {
  return chooseLessThan("chooseLessThan", type);
}

uci::type::QueryComparisonType& QueryType::getLessThanOrEqualTo_() const {
  if (lessThanOrEqualTo_Accessor) {
    return *lessThanOrEqualTo_Accessor;
  }
  throw uci::base::UCIException("Error in getLessThanOrEqualTo(): Unable to get LessThanOrEqualTo, field not selected");
}

const uci::type::QueryComparisonType& QueryType::getLessThanOrEqualTo() const {
  return getLessThanOrEqualTo_();
}

uci::type::QueryComparisonType& QueryType::getLessThanOrEqualTo() {
  return getLessThanOrEqualTo_();
}

uci::type::QueryType& QueryType::setLessThanOrEqualTo(const uci::type::QueryComparisonType& accessor) {
  chooseLessThanOrEqualTo();
  if (&accessor != lessThanOrEqualTo_Accessor.get()) {
    lessThanOrEqualTo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isLessThanOrEqualTo() const noexcept {
  return static_cast<bool>(lessThanOrEqualTo_Accessor);
}

uci::type::QueryComparisonType& QueryType::chooseLessThanOrEqualTo(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryComparisonType : type};
  if ((!lessThanOrEqualTo_Accessor) || (lessThanOrEqualTo_Accessor->getAccessorType() != requestedType)) {
    lessThanOrEqualTo_Accessor = QueryComparisonType::create(type);
    if (!lessThanOrEqualTo_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lessThanOrEqualTo_Accessor;
}

uci::type::QueryComparisonType& QueryType::chooseLessThanOrEqualTo(uci::base::accessorType::AccessorType type) {
  return chooseLessThanOrEqualTo("chooseLessThanOrEqualTo", type);
}

uci::type::QueryComparisonType& QueryType::getGreaterThan_() const {
  if (greaterThan_Accessor) {
    return *greaterThan_Accessor;
  }
  throw uci::base::UCIException("Error in getGreaterThan(): Unable to get GreaterThan, field not selected");
}

const uci::type::QueryComparisonType& QueryType::getGreaterThan() const {
  return getGreaterThan_();
}

uci::type::QueryComparisonType& QueryType::getGreaterThan() {
  return getGreaterThan_();
}

uci::type::QueryType& QueryType::setGreaterThan(const uci::type::QueryComparisonType& accessor) {
  chooseGreaterThan();
  if (&accessor != greaterThan_Accessor.get()) {
    greaterThan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isGreaterThan() const noexcept {
  return static_cast<bool>(greaterThan_Accessor);
}

uci::type::QueryComparisonType& QueryType::chooseGreaterThan(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryComparisonType : type};
  if ((!greaterThan_Accessor) || (greaterThan_Accessor->getAccessorType() != requestedType)) {
    greaterThan_Accessor = QueryComparisonType::create(type);
    if (!greaterThan_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *greaterThan_Accessor;
}

uci::type::QueryComparisonType& QueryType::chooseGreaterThan(uci::base::accessorType::AccessorType type) {
  return chooseGreaterThan("chooseGreaterThan", type);
}

uci::type::QueryComparisonType& QueryType::getGreaterThanOrEqualTo_() const {
  if (greaterThanOrEqualTo_Accessor) {
    return *greaterThanOrEqualTo_Accessor;
  }
  throw uci::base::UCIException("Error in getGreaterThanOrEqualTo(): Unable to get GreaterThanOrEqualTo, field not selected");
}

const uci::type::QueryComparisonType& QueryType::getGreaterThanOrEqualTo() const {
  return getGreaterThanOrEqualTo_();
}

uci::type::QueryComparisonType& QueryType::getGreaterThanOrEqualTo() {
  return getGreaterThanOrEqualTo_();
}

uci::type::QueryType& QueryType::setGreaterThanOrEqualTo(const uci::type::QueryComparisonType& accessor) {
  chooseGreaterThanOrEqualTo();
  if (&accessor != greaterThanOrEqualTo_Accessor.get()) {
    greaterThanOrEqualTo_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isGreaterThanOrEqualTo() const noexcept {
  return static_cast<bool>(greaterThanOrEqualTo_Accessor);
}

uci::type::QueryComparisonType& QueryType::chooseGreaterThanOrEqualTo(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryComparisonType : type};
  if ((!greaterThanOrEqualTo_Accessor) || (greaterThanOrEqualTo_Accessor->getAccessorType() != requestedType)) {
    greaterThanOrEqualTo_Accessor = QueryComparisonType::create(type);
    if (!greaterThanOrEqualTo_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *greaterThanOrEqualTo_Accessor;
}

uci::type::QueryComparisonType& QueryType::chooseGreaterThanOrEqualTo(uci::base::accessorType::AccessorType type) {
  return chooseGreaterThanOrEqualTo("chooseGreaterThanOrEqualTo", type);
}

uci::type::QueryContainsType& QueryType::getContainsCaseSensitive_() const {
  if (containsCaseSensitive_Accessor) {
    return *containsCaseSensitive_Accessor;
  }
  throw uci::base::UCIException("Error in getContainsCaseSensitive(): Unable to get ContainsCaseSensitive, field not selected");
}

const uci::type::QueryContainsType& QueryType::getContainsCaseSensitive() const {
  return getContainsCaseSensitive_();
}

uci::type::QueryContainsType& QueryType::getContainsCaseSensitive() {
  return getContainsCaseSensitive_();
}

uci::type::QueryType& QueryType::setContainsCaseSensitive(const uci::type::QueryContainsType& accessor) {
  chooseContainsCaseSensitive();
  if (&accessor != containsCaseSensitive_Accessor.get()) {
    containsCaseSensitive_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isContainsCaseSensitive() const noexcept {
  return static_cast<bool>(containsCaseSensitive_Accessor);
}

uci::type::QueryContainsType& QueryType::chooseContainsCaseSensitive(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryContainsType : type};
  if ((!containsCaseSensitive_Accessor) || (containsCaseSensitive_Accessor->getAccessorType() != requestedType)) {
    containsCaseSensitive_Accessor = QueryContainsType::create(type);
    if (!containsCaseSensitive_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *containsCaseSensitive_Accessor;
}

uci::type::QueryContainsType& QueryType::chooseContainsCaseSensitive(uci::base::accessorType::AccessorType type) {
  return chooseContainsCaseSensitive("chooseContainsCaseSensitive", type);
}

uci::type::QueryContainsType& QueryType::getContainsCaseInsensitive_() const {
  if (containsCaseInsensitive_Accessor) {
    return *containsCaseInsensitive_Accessor;
  }
  throw uci::base::UCIException("Error in getContainsCaseInsensitive(): Unable to get ContainsCaseInsensitive, field not selected");
}

const uci::type::QueryContainsType& QueryType::getContainsCaseInsensitive() const {
  return getContainsCaseInsensitive_();
}

uci::type::QueryContainsType& QueryType::getContainsCaseInsensitive() {
  return getContainsCaseInsensitive_();
}

uci::type::QueryType& QueryType::setContainsCaseInsensitive(const uci::type::QueryContainsType& accessor) {
  chooseContainsCaseInsensitive();
  if (&accessor != containsCaseInsensitive_Accessor.get()) {
    containsCaseInsensitive_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isContainsCaseInsensitive() const noexcept {
  return static_cast<bool>(containsCaseInsensitive_Accessor);
}

uci::type::QueryContainsType& QueryType::chooseContainsCaseInsensitive(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryContainsType : type};
  if ((!containsCaseInsensitive_Accessor) || (containsCaseInsensitive_Accessor->getAccessorType() != requestedType)) {
    containsCaseInsensitive_Accessor = QueryContainsType::create(type);
    if (!containsCaseInsensitive_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *containsCaseInsensitive_Accessor;
}

uci::type::QueryContainsType& QueryType::chooseContainsCaseInsensitive(uci::base::accessorType::AccessorType type) {
  return chooseContainsCaseInsensitive("chooseContainsCaseInsensitive", type);
}

uci::type::QueryInstanceOfType& QueryType::getInstanceOf_() const {
  if (instanceOf_Accessor) {
    return *instanceOf_Accessor;
  }
  throw uci::base::UCIException("Error in getInstanceOf(): Unable to get InstanceOf, field not selected");
}

const uci::type::QueryInstanceOfType& QueryType::getInstanceOf() const {
  return getInstanceOf_();
}

uci::type::QueryInstanceOfType& QueryType::getInstanceOf() {
  return getInstanceOf_();
}

uci::type::QueryType& QueryType::setInstanceOf(const uci::type::QueryInstanceOfType& accessor) {
  chooseInstanceOf();
  if (&accessor != instanceOf_Accessor.get()) {
    instanceOf_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isInstanceOf() const noexcept {
  return static_cast<bool>(instanceOf_Accessor);
}

uci::type::QueryInstanceOfType& QueryType::chooseInstanceOf(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryInstanceOfType : type};
  if ((!instanceOf_Accessor) || (instanceOf_Accessor->getAccessorType() != requestedType)) {
    instanceOf_Accessor = QueryInstanceOfType::create(type);
    if (!instanceOf_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *instanceOf_Accessor;
}

uci::type::QueryInstanceOfType& QueryType::chooseInstanceOf(uci::base::accessorType::AccessorType type) {
  return chooseInstanceOf("chooseInstanceOf", type);
}

uci::type::QueryCountType& QueryType::getCount_() const {
  if (count_Accessor) {
    return *count_Accessor;
  }
  throw uci::base::UCIException("Error in getCount(): Unable to get Count, field not selected");
}

const uci::type::QueryCountType& QueryType::getCount() const {
  return getCount_();
}

uci::type::QueryCountType& QueryType::getCount() {
  return getCount_();
}

uci::type::QueryType& QueryType::setCount(const uci::type::QueryCountType& accessor) {
  chooseCount();
  if (&accessor != count_Accessor.get()) {
    count_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isCount() const noexcept {
  return static_cast<bool>(count_Accessor);
}

uci::type::QueryCountType& QueryType::chooseCount(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryCountType : type};
  if ((!count_Accessor) || (count_Accessor->getAccessorType() != requestedType)) {
    count_Accessor = QueryCountType::create(type);
    if (!count_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *count_Accessor;
}

uci::type::QueryCountType& QueryType::chooseCount(uci::base::accessorType::AccessorType type) {
  return chooseCount("chooseCount", type);
}

uci::type::QueryExistsType& QueryType::getExists_() const {
  if (exists_Accessor) {
    return *exists_Accessor;
  }
  throw uci::base::UCIException("Error in getExists(): Unable to get Exists, field not selected");
}

const uci::type::QueryExistsType& QueryType::getExists() const {
  return getExists_();
}

uci::type::QueryExistsType& QueryType::getExists() {
  return getExists_();
}

uci::type::QueryType& QueryType::setExists(const uci::type::QueryExistsType& accessor) {
  chooseExists();
  if (&accessor != exists_Accessor.get()) {
    exists_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isExists() const noexcept {
  return static_cast<bool>(exists_Accessor);
}

uci::type::QueryExistsType& QueryType::chooseExists(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryExistsType : type};
  if ((!exists_Accessor) || (exists_Accessor->getAccessorType() != requestedType)) {
    exists_Accessor = QueryExistsType::create(type);
    if (!exists_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *exists_Accessor;
}

uci::type::QueryExistsType& QueryType::chooseExists(uci::base::accessorType::AccessorType type) {
  return chooseExists("chooseExists", type);
}

uci::type::QueryMatchType& QueryType::getAnyMatch_() const {
  if (anyMatch_Accessor) {
    return *anyMatch_Accessor;
  }
  throw uci::base::UCIException("Error in getAnyMatch(): Unable to get AnyMatch, field not selected");
}

const uci::type::QueryMatchType& QueryType::getAnyMatch() const {
  return getAnyMatch_();
}

uci::type::QueryMatchType& QueryType::getAnyMatch() {
  return getAnyMatch_();
}

uci::type::QueryType& QueryType::setAnyMatch(const uci::type::QueryMatchType& accessor) {
  chooseAnyMatch();
  if (&accessor != anyMatch_Accessor.get()) {
    anyMatch_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isAnyMatch() const noexcept {
  return static_cast<bool>(anyMatch_Accessor);
}

uci::type::QueryMatchType& QueryType::chooseAnyMatch(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryMatchType : type};
  if ((!anyMatch_Accessor) || (anyMatch_Accessor->getAccessorType() != requestedType)) {
    anyMatch_Accessor = QueryMatchType::create(type);
    if (!anyMatch_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *anyMatch_Accessor;
}

uci::type::QueryMatchType& QueryType::chooseAnyMatch(uci::base::accessorType::AccessorType type) {
  return chooseAnyMatch("chooseAnyMatch", type);
}

uci::type::QueryMatchType& QueryType::getAllMatch_() const {
  if (allMatch_Accessor) {
    return *allMatch_Accessor;
  }
  throw uci::base::UCIException("Error in getAllMatch(): Unable to get AllMatch, field not selected");
}

const uci::type::QueryMatchType& QueryType::getAllMatch() const {
  return getAllMatch_();
}

uci::type::QueryMatchType& QueryType::getAllMatch() {
  return getAllMatch_();
}

uci::type::QueryType& QueryType::setAllMatch(const uci::type::QueryMatchType& accessor) {
  chooseAllMatch();
  if (&accessor != allMatch_Accessor.get()) {
    allMatch_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isAllMatch() const noexcept {
  return static_cast<bool>(allMatch_Accessor);
}

uci::type::QueryMatchType& QueryType::chooseAllMatch(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryMatchType : type};
  if ((!allMatch_Accessor) || (allMatch_Accessor->getAccessorType() != requestedType)) {
    allMatch_Accessor = QueryMatchType::create(type);
    if (!allMatch_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *allMatch_Accessor;
}

uci::type::QueryMatchType& QueryType::chooseAllMatch(uci::base::accessorType::AccessorType type) {
  return chooseAllMatch("chooseAllMatch", type);
}

uci::type::QueryType::And& QueryType::getAnd_() const {
  if (and_Accessor) {
    return *and_Accessor;
  }
  throw uci::base::UCIException("Error in getAnd(): Unable to get And, field not selected");
}

const uci::type::QueryType::And& QueryType::getAnd() const {
  return getAnd_();
}

uci::type::QueryType::And& QueryType::getAnd() {
  return getAnd_();
}

uci::type::QueryType& QueryType::setAnd(const uci::type::QueryType::And& accessor) {
  chooseAnd();
  if (&accessor != and_Accessor.get()) {
    and_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isAnd() const noexcept {
  return static_cast<bool>(and_Accessor);
}

uci::type::QueryType::And& QueryType::chooseAnd() {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  or_Accessor.reset();
  not_Accessor.reset();
  if (!and_Accessor) {
    and_Accessor = boost::make_unique<And>(2, SIZE_MAX);
  }
  return *and_Accessor;
}

uci::type::QueryType::Or& QueryType::getOr_() const {
  if (or_Accessor) {
    return *or_Accessor;
  }
  throw uci::base::UCIException("Error in getOr(): Unable to get Or, field not selected");
}

const uci::type::QueryType::Or& QueryType::getOr() const {
  return getOr_();
}

uci::type::QueryType::Or& QueryType::getOr() {
  return getOr_();
}

uci::type::QueryType& QueryType::setOr(const uci::type::QueryType::Or& accessor) {
  chooseOr();
  if (&accessor != or_Accessor.get()) {
    or_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryType::isOr() const noexcept {
  return static_cast<bool>(or_Accessor);
}

uci::type::QueryType::Or& QueryType::chooseOr() {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  not_Accessor.reset();
  if (!or_Accessor) {
    or_Accessor = boost::make_unique<Or>(2, SIZE_MAX);
  }
  return *or_Accessor;
}

uci::type::QueryPET& QueryType::getNot_() const {
  if (not_Accessor) {
    return *not_Accessor;
  }
  throw uci::base::UCIException("Error in getNot(): Unable to get Not, field not selected");
}

const uci::type::QueryPET& QueryType::getNot() const {
  return getNot_();
}

uci::type::QueryPET& QueryType::getNot() {
  return getNot_();
}

uci::type::QueryType& QueryType::setNot(const uci::type::QueryPET& accessor) {
  chooseNot("setNot", accessor.getAccessorType());
  if (&accessor != not_Accessor.get()) {
    not_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool QueryType::isNot() const noexcept {
  return static_cast<bool>(not_Accessor);
}

uci::type::QueryPET& QueryType::chooseNot(const std::string& method, uci::base::accessorType::AccessorType type) {
  equals_Accessor.reset();
  lessThan_Accessor.reset();
  lessThanOrEqualTo_Accessor.reset();
  greaterThan_Accessor.reset();
  greaterThanOrEqualTo_Accessor.reset();
  containsCaseSensitive_Accessor.reset();
  containsCaseInsensitive_Accessor.reset();
  instanceOf_Accessor.reset();
  count_Accessor.reset();
  exists_Accessor.reset();
  anyMatch_Accessor.reset();
  allMatch_Accessor.reset();
  and_Accessor.reset();
  or_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryPET : type};
  if ((!not_Accessor) || (not_Accessor->getAccessorType() != requestedType)) {
    not_Accessor = QueryPET::create(type);
    if (!not_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *not_Accessor;
}

uci::type::QueryPET& QueryType::chooseNot(uci::base::accessorType::AccessorType type) {
  return chooseNot("chooseNot", type);
}

std::unique_ptr<QueryType> QueryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryType : type};
  return (requestedType == uci::type::accessorType::queryType) ? boost::make_unique<QueryType>() : nullptr;
}

/**  */
namespace QueryType_Names {

constexpr const char* Extern_Type_Name{"QueryType"};
constexpr const char* Equals_Name{"Equals"};
constexpr const char* LessThan_Name{"LessThan"};
constexpr const char* LessThanOrEqualTo_Name{"LessThanOrEqualTo"};
constexpr const char* GreaterThan_Name{"GreaterThan"};
constexpr const char* GreaterThanOrEqualTo_Name{"GreaterThanOrEqualTo"};
constexpr const char* ContainsCaseSensitive_Name{"ContainsCaseSensitive"};
constexpr const char* ContainsCaseInsensitive_Name{"ContainsCaseInsensitive"};
constexpr const char* InstanceOf_Name{"InstanceOf"};
constexpr const char* Count_Name{"Count"};
constexpr const char* Exists_Name{"Exists"};
constexpr const char* AnyMatch_Name{"AnyMatch"};
constexpr const char* AllMatch_Name{"AllMatch"};
constexpr const char* And_Name{"And"};
constexpr const char* Or_Name{"Or"};
constexpr const char* Not_Name{"Not"};

} // namespace QueryType_Names

void QueryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QueryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QueryType_Names::Equals_Name) {
      QueryEqualsType::deserialize(valueType.second, accessor.chooseEquals(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::LessThan_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseLessThan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::LessThanOrEqualTo_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseLessThanOrEqualTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::GreaterThan_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseGreaterThan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::GreaterThanOrEqualTo_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseGreaterThanOrEqualTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::ContainsCaseSensitive_Name) {
      QueryContainsType::deserialize(valueType.second, accessor.chooseContainsCaseSensitive(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::ContainsCaseInsensitive_Name) {
      QueryContainsType::deserialize(valueType.second, accessor.chooseContainsCaseInsensitive(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::InstanceOf_Name) {
      QueryInstanceOfType::deserialize(valueType.second, accessor.chooseInstanceOf(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::Count_Name) {
      QueryCountType::deserialize(valueType.second, accessor.chooseCount(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::Exists_Name) {
      QueryExistsType::deserialize(valueType.second, accessor.chooseExists(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::AnyMatch_Name) {
      QueryMatchType::deserialize(valueType.second, accessor.chooseAnyMatch(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::AllMatch_Name) {
      QueryMatchType::deserialize(valueType.second, accessor.chooseAllMatch(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::And_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::QueryType::And& boundedList = accessor.chooseAnd();
        const uci::type::QueryType::And::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + QueryType_Names::Or_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::QueryType::Or& boundedList = accessor.chooseOr();
        const uci::type::QueryType::Or::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + QueryType_Names::Not_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseNot(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  QueryPET::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string QueryType::serialize(const uci::type::QueryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? QueryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, QueryType_Names::Extern_Type_Name);
  }
  QueryPET::serialize(accessor, node, "", false, false, false);
  if (accessor.isEquals()) {
    QueryEqualsType::serialize(accessor.getEquals(), node, QueryType_Names::Equals_Name);
  } else if (accessor.isLessThan()) {
    QueryComparisonType::serialize(accessor.getLessThan(), node, QueryType_Names::LessThan_Name);
  } else if (accessor.isLessThanOrEqualTo()) {
    QueryComparisonType::serialize(accessor.getLessThanOrEqualTo(), node, QueryType_Names::LessThanOrEqualTo_Name);
  } else if (accessor.isGreaterThan()) {
    QueryComparisonType::serialize(accessor.getGreaterThan(), node, QueryType_Names::GreaterThan_Name);
  } else if (accessor.isGreaterThanOrEqualTo()) {
    QueryComparisonType::serialize(accessor.getGreaterThanOrEqualTo(), node, QueryType_Names::GreaterThanOrEqualTo_Name);
  } else if (accessor.isContainsCaseSensitive()) {
    QueryContainsType::serialize(accessor.getContainsCaseSensitive(), node, QueryType_Names::ContainsCaseSensitive_Name);
  } else if (accessor.isContainsCaseInsensitive()) {
    QueryContainsType::serialize(accessor.getContainsCaseInsensitive(), node, QueryType_Names::ContainsCaseInsensitive_Name);
  } else if (accessor.isInstanceOf()) {
    QueryInstanceOfType::serialize(accessor.getInstanceOf(), node, QueryType_Names::InstanceOf_Name);
  } else if (accessor.isCount()) {
    QueryCountType::serialize(accessor.getCount(), node, QueryType_Names::Count_Name);
  } else if (accessor.isExists()) {
    QueryExistsType::serialize(accessor.getExists(), node, QueryType_Names::Exists_Name);
  } else if (accessor.isAnyMatch()) {
    QueryMatchType::serialize(accessor.getAnyMatch(), node, QueryType_Names::AnyMatch_Name);
  } else if (accessor.isAllMatch()) {
    QueryMatchType::serialize(accessor.getAllMatch(), node, QueryType_Names::AllMatch_Name);
  } else if (accessor.isAnd()) {
    {
      const uci::type::QueryType::And& boundedList = accessor.getAnd();
      for (uci::type::QueryType::And::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::QueryPET::serialize(boundedList.at(i), node, QueryType_Names::And_Name);
      }
    }
  } else if (accessor.isOr()) {
    {
      const uci::type::QueryType::Or& boundedList = accessor.getOr();
      for (uci::type::QueryType::Or::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::QueryPET::serialize(boundedList.at(i), node, QueryType_Names::Or_Name);
      }
    }
  } else if (accessor.isNot()) {
    QueryPET::serialize(accessor.getNot(), node, QueryType_Names::Not_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::QueryType& QueryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::QueryType>().release());
}

uci::type::QueryType& QueryType::create(const uci::type::QueryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::QueryType> newAccessor{boost::make_unique<asb_uci::type::QueryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void QueryType::destroy(uci::type::QueryType& accessor) {
  delete dynamic_cast<asb_uci::type::QueryType*>(&accessor);
}

} // namespace type

} // namespace uci

