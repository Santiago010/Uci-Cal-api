/** @file OpID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OpID_ChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OpLineID_Type.h"
#include "../../../include/asb_uci/type/OpPointID_Type.h"
#include "../../../include/asb_uci/type/OpRoutingID_Type.h"
#include "../../../include/asb_uci/type/OpVolumeID_Type.h"
#include "../../../include/asb_uci/type/OpZoneID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpLineID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpPointID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpRoutingID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpVolumeID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OpZoneID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpID_ChoiceType::OpID_ChoiceType() = default;

OpID_ChoiceType::~OpID_ChoiceType() = default;

void OpID_ChoiceType::copy(const uci::type::OpID_ChoiceType& accessor) {
  copyImpl(accessor, false);
}

void OpID_ChoiceType::copyImpl(const uci::type::OpID_ChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpID_ChoiceType&>(accessor);
    if (accessorImpl.opLineID_Accessor) {
      setOpLineID(*(accessorImpl.opLineID_Accessor));
    } else {
      opLineID_Accessor.reset();
    }
    if (accessorImpl.opPointID_Accessor) {
      setOpPointID(*(accessorImpl.opPointID_Accessor));
    } else {
      opPointID_Accessor.reset();
    }
    if (accessorImpl.opZoneID_Accessor) {
      setOpZoneID(*(accessorImpl.opZoneID_Accessor));
    } else {
      opZoneID_Accessor.reset();
    }
    if (accessorImpl.opVolumeID_Accessor) {
      setOpVolumeID(*(accessorImpl.opVolumeID_Accessor));
    } else {
      opVolumeID_Accessor.reset();
    }
    if (accessorImpl.opRoutingID_Accessor) {
      setOpRoutingID(*(accessorImpl.opRoutingID_Accessor));
    } else {
      opRoutingID_Accessor.reset();
    }
  }
}

void OpID_ChoiceType::reset() noexcept {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  opRoutingID_Accessor.reset();
}

uci::type::OpID_ChoiceType::OpID_ChoiceTypeChoice OpID_ChoiceType::getOpID_ChoiceTypeChoiceOrdinal() const noexcept {
  if (opLineID_Accessor) {
    return OPID_CHOICETYPE_CHOICE_OPLINEID;
  }
  if (opPointID_Accessor) {
    return OPID_CHOICETYPE_CHOICE_OPPOINTID;
  }
  if (opZoneID_Accessor) {
    return OPID_CHOICETYPE_CHOICE_OPZONEID;
  }
  if (opVolumeID_Accessor) {
    return OPID_CHOICETYPE_CHOICE_OPVOLUMEID;
  }
  if (opRoutingID_Accessor) {
    return OPID_CHOICETYPE_CHOICE_OPROUTINGID;
  }
  return OPID_CHOICETYPE_CHOICE_NONE;
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::setOpID_ChoiceTypeChoiceOrdinal(uci::type::OpID_ChoiceType::OpID_ChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case OPID_CHOICETYPE_CHOICE_OPLINEID:
      chooseOpLineID("setOpID_ChoiceTypeChoiceOrdinal", type);
      break;
    case OPID_CHOICETYPE_CHOICE_OPPOINTID:
      chooseOpPointID("setOpID_ChoiceTypeChoiceOrdinal", type);
      break;
    case OPID_CHOICETYPE_CHOICE_OPZONEID:
      chooseOpZoneID("setOpID_ChoiceTypeChoiceOrdinal", type);
      break;
    case OPID_CHOICETYPE_CHOICE_OPVOLUMEID:
      chooseOpVolumeID("setOpID_ChoiceTypeChoiceOrdinal", type);
      break;
    case OPID_CHOICETYPE_CHOICE_OPROUTINGID:
      chooseOpRoutingID("setOpID_ChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOpID_ChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OpLineID_Type& OpID_ChoiceType::getOpLineID_() const {
  if (opLineID_Accessor) {
    return *opLineID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpLineID(): Unable to get OpLineID, field not selected");
}

const uci::type::OpLineID_Type& OpID_ChoiceType::getOpLineID() const {
  return getOpLineID_();
}

uci::type::OpLineID_Type& OpID_ChoiceType::getOpLineID() {
  return getOpLineID_();
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::setOpLineID(const uci::type::OpLineID_Type& accessor) {
  chooseOpLineID();
  if (&accessor != opLineID_Accessor.get()) {
    opLineID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpID_ChoiceType::isOpLineID() const noexcept {
  return static_cast<bool>(opLineID_Accessor);
}

uci::type::OpLineID_Type& OpID_ChoiceType::chooseOpLineID(const std::string& method, uci::base::accessorType::AccessorType type) {
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  opRoutingID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opLineID_Type : type};
  if ((!opLineID_Accessor) || (opLineID_Accessor->getAccessorType() != requestedType)) {
    opLineID_Accessor = OpLineID_Type::create(type);
    if (!opLineID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opLineID_Accessor;
}

uci::type::OpLineID_Type& OpID_ChoiceType::chooseOpLineID(uci::base::accessorType::AccessorType type) {
  return chooseOpLineID("chooseOpLineID", type);
}

uci::type::OpPointID_Type& OpID_ChoiceType::getOpPointID_() const {
  if (opPointID_Accessor) {
    return *opPointID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPointID(): Unable to get OpPointID, field not selected");
}

const uci::type::OpPointID_Type& OpID_ChoiceType::getOpPointID() const {
  return getOpPointID_();
}

uci::type::OpPointID_Type& OpID_ChoiceType::getOpPointID() {
  return getOpPointID_();
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::setOpPointID(const uci::type::OpPointID_Type& accessor) {
  chooseOpPointID();
  if (&accessor != opPointID_Accessor.get()) {
    opPointID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpID_ChoiceType::isOpPointID() const noexcept {
  return static_cast<bool>(opPointID_Accessor);
}

uci::type::OpPointID_Type& OpID_ChoiceType::chooseOpPointID(const std::string& method, uci::base::accessorType::AccessorType type) {
  opLineID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  opRoutingID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opPointID_Type : type};
  if ((!opPointID_Accessor) || (opPointID_Accessor->getAccessorType() != requestedType)) {
    opPointID_Accessor = OpPointID_Type::create(type);
    if (!opPointID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPointID_Accessor;
}

uci::type::OpPointID_Type& OpID_ChoiceType::chooseOpPointID(uci::base::accessorType::AccessorType type) {
  return chooseOpPointID("chooseOpPointID", type);
}

uci::type::OpZoneID_Type& OpID_ChoiceType::getOpZoneID_() const {
  if (opZoneID_Accessor) {
    return *opZoneID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZoneID(): Unable to get OpZoneID, field not selected");
}

const uci::type::OpZoneID_Type& OpID_ChoiceType::getOpZoneID() const {
  return getOpZoneID_();
}

uci::type::OpZoneID_Type& OpID_ChoiceType::getOpZoneID() {
  return getOpZoneID_();
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::setOpZoneID(const uci::type::OpZoneID_Type& accessor) {
  chooseOpZoneID();
  if (&accessor != opZoneID_Accessor.get()) {
    opZoneID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpID_ChoiceType::isOpZoneID() const noexcept {
  return static_cast<bool>(opZoneID_Accessor);
}

uci::type::OpZoneID_Type& OpID_ChoiceType::chooseOpZoneID(const std::string& method, uci::base::accessorType::AccessorType type) {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opVolumeID_Accessor.reset();
  opRoutingID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneID_Type : type};
  if ((!opZoneID_Accessor) || (opZoneID_Accessor->getAccessorType() != requestedType)) {
    opZoneID_Accessor = OpZoneID_Type::create(type);
    if (!opZoneID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opZoneID_Accessor;
}

uci::type::OpZoneID_Type& OpID_ChoiceType::chooseOpZoneID(uci::base::accessorType::AccessorType type) {
  return chooseOpZoneID("chooseOpZoneID", type);
}

uci::type::OpVolumeID_Type& OpID_ChoiceType::getOpVolumeID_() const {
  if (opVolumeID_Accessor) {
    return *opVolumeID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolumeID(): Unable to get OpVolumeID, field not selected");
}

const uci::type::OpVolumeID_Type& OpID_ChoiceType::getOpVolumeID() const {
  return getOpVolumeID_();
}

uci::type::OpVolumeID_Type& OpID_ChoiceType::getOpVolumeID() {
  return getOpVolumeID_();
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::setOpVolumeID(const uci::type::OpVolumeID_Type& accessor) {
  chooseOpVolumeID();
  if (&accessor != opVolumeID_Accessor.get()) {
    opVolumeID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpID_ChoiceType::isOpVolumeID() const noexcept {
  return static_cast<bool>(opVolumeID_Accessor);
}

uci::type::OpVolumeID_Type& OpID_ChoiceType::chooseOpVolumeID(const std::string& method, uci::base::accessorType::AccessorType type) {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opRoutingID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeID_Type : type};
  if ((!opVolumeID_Accessor) || (opVolumeID_Accessor->getAccessorType() != requestedType)) {
    opVolumeID_Accessor = OpVolumeID_Type::create(type);
    if (!opVolumeID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolumeID_Accessor;
}

uci::type::OpVolumeID_Type& OpID_ChoiceType::chooseOpVolumeID(uci::base::accessorType::AccessorType type) {
  return chooseOpVolumeID("chooseOpVolumeID", type);
}

uci::type::OpRoutingID_Type& OpID_ChoiceType::getOpRoutingID_() const {
  if (opRoutingID_Accessor) {
    return *opRoutingID_Accessor;
  }
  throw uci::base::UCIException("Error in getOpRoutingID(): Unable to get OpRoutingID, field not selected");
}

const uci::type::OpRoutingID_Type& OpID_ChoiceType::getOpRoutingID() const {
  return getOpRoutingID_();
}

uci::type::OpRoutingID_Type& OpID_ChoiceType::getOpRoutingID() {
  return getOpRoutingID_();
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::setOpRoutingID(const uci::type::OpRoutingID_Type& accessor) {
  chooseOpRoutingID();
  if (&accessor != opRoutingID_Accessor.get()) {
    opRoutingID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpID_ChoiceType::isOpRoutingID() const noexcept {
  return static_cast<bool>(opRoutingID_Accessor);
}

uci::type::OpRoutingID_Type& OpID_ChoiceType::chooseOpRoutingID(const std::string& method, uci::base::accessorType::AccessorType type) {
  opLineID_Accessor.reset();
  opPointID_Accessor.reset();
  opZoneID_Accessor.reset();
  opVolumeID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opRoutingID_Type : type};
  if ((!opRoutingID_Accessor) || (opRoutingID_Accessor->getAccessorType() != requestedType)) {
    opRoutingID_Accessor = OpRoutingID_Type::create(type);
    if (!opRoutingID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opRoutingID_Accessor;
}

uci::type::OpRoutingID_Type& OpID_ChoiceType::chooseOpRoutingID(uci::base::accessorType::AccessorType type) {
  return chooseOpRoutingID("chooseOpRoutingID", type);
}

std::unique_ptr<OpID_ChoiceType> OpID_ChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opID_ChoiceType : type};
  return (requestedType == uci::type::accessorType::opID_ChoiceType) ? boost::make_unique<OpID_ChoiceType>() : nullptr;
}

/**  */
namespace OpID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"OpID_ChoiceType"};
constexpr const char* OpLineID_Name{"OpLineID"};
constexpr const char* OpPointID_Name{"OpPointID"};
constexpr const char* OpZoneID_Name{"OpZoneID"};
constexpr const char* OpVolumeID_Name{"OpVolumeID"};
constexpr const char* OpRoutingID_Name{"OpRoutingID"};

} // namespace OpID_ChoiceType_Names

void OpID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpID_ChoiceType_Names::OpLineID_Name) {
      OpLineID_Type::deserialize(valueType.second, accessor.chooseOpLineID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpID_ChoiceType_Names::OpPointID_Name) {
      OpPointID_Type::deserialize(valueType.second, accessor.chooseOpPointID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpID_ChoiceType_Names::OpZoneID_Name) {
      OpZoneID_Type::deserialize(valueType.second, accessor.chooseOpZoneID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpID_ChoiceType_Names::OpVolumeID_Name) {
      OpVolumeID_Type::deserialize(valueType.second, accessor.chooseOpVolumeID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpID_ChoiceType_Names::OpRoutingID_Name) {
      OpRoutingID_Type::deserialize(valueType.second, accessor.chooseOpRoutingID(), nodeName, nsPrefix);
    }
  }
}

std::string OpID_ChoiceType::serialize(const uci::type::OpID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpID_ChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isOpLineID()) {
    OpLineID_Type::serialize(accessor.getOpLineID(), node, OpID_ChoiceType_Names::OpLineID_Name);
  } else if (accessor.isOpPointID()) {
    OpPointID_Type::serialize(accessor.getOpPointID(), node, OpID_ChoiceType_Names::OpPointID_Name);
  } else if (accessor.isOpZoneID()) {
    OpZoneID_Type::serialize(accessor.getOpZoneID(), node, OpID_ChoiceType_Names::OpZoneID_Name);
  } else if (accessor.isOpVolumeID()) {
    OpVolumeID_Type::serialize(accessor.getOpVolumeID(), node, OpID_ChoiceType_Names::OpVolumeID_Name);
  } else if (accessor.isOpRoutingID()) {
    OpRoutingID_Type::serialize(accessor.getOpRoutingID(), node, OpID_ChoiceType_Names::OpRoutingID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpID_ChoiceType& OpID_ChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpID_ChoiceType>().release());
}

uci::type::OpID_ChoiceType& OpID_ChoiceType::create(const uci::type::OpID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpID_ChoiceType> newAccessor{boost::make_unique<asb_uci::type::OpID_ChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpID_ChoiceType::destroy(uci::type::OpID_ChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::OpID_ChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

