/** @file CommMADL_ControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/CommMADL_ControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CommMADL_LinkCommandListType.h"
#include "../../../include/asb_uci/type/CommMADL_NetChangeRequestType.h"
#include "../../../include/asb_uci/type/CommMADL_NetworkLayoutType.h"
#include "../../../include/asb_uci/type/CommMADL_NetworkType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_ControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_FlightGroupType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_LinkCommandListType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetChangeRequestType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetworkLayoutType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CommMADL_NetworkType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MADL_DayOfYearType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MADL_NodeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommMADL_ControlType::CommMADL_ControlType()
  : networkIdentifier_Accessor{boost::make_unique<CommMADL_NetworkType>()},
    networkLayout_Accessor{boost::make_unique<CommMADL_NetworkLayoutType>()} {
}

CommMADL_ControlType::~CommMADL_ControlType() = default;

void CommMADL_ControlType::copy(const uci::type::CommMADL_ControlType& accessor) {
  copyImpl(accessor, false);
}

void CommMADL_ControlType::copyImpl(const uci::type::CommMADL_ControlType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommMADL_ControlType&>(accessor);
    setNode(accessorImpl.node_Accessor);
    if (accessorImpl.flightGroupIdentifier_Accessor) {
      setFlightGroupIdentifier(*(accessorImpl.flightGroupIdentifier_Accessor));
    } else {
      flightGroupIdentifier_Accessor.reset();
    }
    setNetworkIdentifier(*(accessorImpl.networkIdentifier_Accessor));
    setNetworkLayout(*(accessorImpl.networkLayout_Accessor));
    if (accessorImpl.hasMADL_DayOfYear()) {
      setMADL_DayOfYear(accessorImpl.getMADL_DayOfYear());
    } else {
      clearMADL_DayOfYear();
    }
    if (accessorImpl.hasVoiceTxExtent()) {
      setVoiceTxExtent(accessorImpl.getVoiceTxExtent());
    } else {
      clearVoiceTxExtent();
    }
    if (accessorImpl.linkCommandedState_Accessor) {
      setLinkCommandedState(*(accessorImpl.linkCommandedState_Accessor));
    } else {
      linkCommandedState_Accessor.reset();
    }
    if (accessorImpl.netChangeRequest_Accessor) {
      setNetChangeRequest(*(accessorImpl.netChangeRequest_Accessor));
    } else {
      netChangeRequest_Accessor.reset();
    }
  }
}

void CommMADL_ControlType::reset() noexcept {
  node_Accessor = 0;
  flightGroupIdentifier_Accessor.reset();
  networkIdentifier_Accessor->reset();
  networkLayout_Accessor->reset();
  clearMADL_DayOfYear();
  clearVoiceTxExtent();
  linkCommandedState_Accessor.reset();
  netChangeRequest_Accessor.reset();
}

uci::type::MADL_NodeRangeTypeValue CommMADL_ControlType::getNode() const {
  return node_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setNode(uci::type::MADL_NodeRangeTypeValue value) {
  node_Accessor = value;
  return *this;
}


uci::type::CommMADL_FlightGroupType& CommMADL_ControlType::getFlightGroupIdentifier_() const {
  if (flightGroupIdentifier_Accessor) {
    return *flightGroupIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getFlightGroupIdentifier(): An attempt was made to get an optional field that was not enabled, call hasFlightGroupIdentifier() to determine if it is safe to call getFlightGroupIdentifier()");
}

const uci::type::CommMADL_FlightGroupType& CommMADL_ControlType::getFlightGroupIdentifier() const {
  return getFlightGroupIdentifier_();
}

uci::type::CommMADL_FlightGroupType& CommMADL_ControlType::getFlightGroupIdentifier() {
  return getFlightGroupIdentifier_();
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setFlightGroupIdentifier(const uci::type::CommMADL_FlightGroupType& value) {
  return setFlightGroupIdentifier(value.c_str());
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setFlightGroupIdentifier(const std::string& value) {
  return setFlightGroupIdentifier(value.c_str());
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setFlightGroupIdentifier(const char* value) {
  enableFlightGroupIdentifier().setStringValue(value);
  return *this;
}

bool CommMADL_ControlType::hasFlightGroupIdentifier() const noexcept {
  return static_cast<bool>(flightGroupIdentifier_Accessor);
}

uci::type::CommMADL_FlightGroupType& CommMADL_ControlType::enableFlightGroupIdentifier(uci::base::accessorType::AccessorType type) {
  if (!flightGroupIdentifier_Accessor) {
    flightGroupIdentifier_Accessor = CommMADL_FlightGroupType::create(type);
  }
  return *flightGroupIdentifier_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::clearFlightGroupIdentifier() noexcept {
  flightGroupIdentifier_Accessor.reset();
  return *this;
}

const uci::type::CommMADL_NetworkType& CommMADL_ControlType::getNetworkIdentifier() const {
  return *networkIdentifier_Accessor;
}

uci::type::CommMADL_NetworkType& CommMADL_ControlType::getNetworkIdentifier() {
  return *networkIdentifier_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setNetworkIdentifier(const uci::type::CommMADL_NetworkType& accessor) {
  if (&accessor != networkIdentifier_Accessor.get()) {
    networkIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommMADL_NetworkLayoutType& CommMADL_ControlType::getNetworkLayout() const {
  return *networkLayout_Accessor;
}

uci::type::CommMADL_NetworkLayoutType& CommMADL_ControlType::getNetworkLayout() {
  return *networkLayout_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setNetworkLayout(const uci::type::CommMADL_NetworkLayoutType& accessor) {
  if (&accessor != networkLayout_Accessor.get()) {
    networkLayout_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::MADL_DayOfYearTypeValue CommMADL_ControlType::getMADL_DayOfYear() const {
  if (mADL_DayOfYear_Accessor) {
    return *mADL_DayOfYear_Accessor;
  }
  throw uci::base::UCIException("Error in getMADL_DayOfYear(): An attempt was made to get an optional field that was not enabled, call hasMADL_DayOfYear() to determine if it is safe to call getMADL_DayOfYear()");
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setMADL_DayOfYear(uci::type::MADL_DayOfYearTypeValue value) {
  mADL_DayOfYear_Accessor = value;
  return *this;
}

bool CommMADL_ControlType::hasMADL_DayOfYear() const noexcept {
  return mADL_DayOfYear_Accessor.has_value();
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::clearMADL_DayOfYear() noexcept {
  mADL_DayOfYear_Accessor.reset();
  return *this;
}

xs::Boolean CommMADL_ControlType::getVoiceTxExtent() const {
  if (voiceTxExtent_Accessor) {
    return *voiceTxExtent_Accessor;
  }
  throw uci::base::UCIException("Error in getVoiceTxExtent(): An attempt was made to get an optional field that was not enabled, call hasVoiceTxExtent() to determine if it is safe to call getVoiceTxExtent()");
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setVoiceTxExtent(xs::Boolean value) {
  voiceTxExtent_Accessor = value;
  return *this;
}

bool CommMADL_ControlType::hasVoiceTxExtent() const noexcept {
  return voiceTxExtent_Accessor.has_value();
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::clearVoiceTxExtent() noexcept {
  voiceTxExtent_Accessor.reset();
  return *this;
}

uci::type::CommMADL_LinkCommandListType& CommMADL_ControlType::getLinkCommandedState_() const {
  if (linkCommandedState_Accessor) {
    return *linkCommandedState_Accessor;
  }
  throw uci::base::UCIException("Error in getLinkCommandedState(): An attempt was made to get an optional field that was not enabled, call hasLinkCommandedState() to determine if it is safe to call getLinkCommandedState()");
}

const uci::type::CommMADL_LinkCommandListType& CommMADL_ControlType::getLinkCommandedState() const {
  return getLinkCommandedState_();
}

uci::type::CommMADL_LinkCommandListType& CommMADL_ControlType::getLinkCommandedState() {
  return getLinkCommandedState_();
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setLinkCommandedState(const uci::type::CommMADL_LinkCommandListType& accessor) {
  enableLinkCommandedState();
  if (&accessor != linkCommandedState_Accessor.get()) {
    linkCommandedState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommMADL_ControlType::hasLinkCommandedState() const noexcept {
  return static_cast<bool>(linkCommandedState_Accessor);
}

uci::type::CommMADL_LinkCommandListType& CommMADL_ControlType::enableLinkCommandedState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_LinkCommandListType : type};
  if ((!linkCommandedState_Accessor) || (linkCommandedState_Accessor->getAccessorType() != requestedType)) {
    linkCommandedState_Accessor = CommMADL_LinkCommandListType::create(requestedType);
    if (!linkCommandedState_Accessor) {
      throw uci::base::UCIException("Error in enableLinkCommandedState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *linkCommandedState_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::clearLinkCommandedState() noexcept {
  linkCommandedState_Accessor.reset();
  return *this;
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_ControlType::getNetChangeRequest_() const {
  if (netChangeRequest_Accessor) {
    return *netChangeRequest_Accessor;
  }
  throw uci::base::UCIException("Error in getNetChangeRequest(): An attempt was made to get an optional field that was not enabled, call hasNetChangeRequest() to determine if it is safe to call getNetChangeRequest()");
}

const uci::type::CommMADL_NetChangeRequestType& CommMADL_ControlType::getNetChangeRequest() const {
  return getNetChangeRequest_();
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_ControlType::getNetChangeRequest() {
  return getNetChangeRequest_();
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::setNetChangeRequest(const uci::type::CommMADL_NetChangeRequestType& accessor) {
  enableNetChangeRequest();
  if (&accessor != netChangeRequest_Accessor.get()) {
    netChangeRequest_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommMADL_ControlType::hasNetChangeRequest() const noexcept {
  return static_cast<bool>(netChangeRequest_Accessor);
}

uci::type::CommMADL_NetChangeRequestType& CommMADL_ControlType::enableNetChangeRequest(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_NetChangeRequestType : type};
  if ((!netChangeRequest_Accessor) || (netChangeRequest_Accessor->getAccessorType() != requestedType)) {
    netChangeRequest_Accessor = CommMADL_NetChangeRequestType::create(requestedType);
    if (!netChangeRequest_Accessor) {
      throw uci::base::UCIException("Error in enableNetChangeRequest(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *netChangeRequest_Accessor;
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::clearNetChangeRequest() noexcept {
  netChangeRequest_Accessor.reset();
  return *this;
}

std::unique_ptr<CommMADL_ControlType> CommMADL_ControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commMADL_ControlType : type};
  return (requestedType == uci::type::accessorType::commMADL_ControlType) ? boost::make_unique<CommMADL_ControlType>() : nullptr;
}

/**  */
namespace CommMADL_ControlType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_ControlType"};
constexpr const char* Node_Name{"Node"};
constexpr const char* FlightGroupIdentifier_Name{"FlightGroupIdentifier"};
constexpr const char* NetworkIdentifier_Name{"NetworkIdentifier"};
constexpr const char* NetworkLayout_Name{"NetworkLayout"};
constexpr const char* MADL_DayOfYear_Name{"MADL_DayOfYear"};
constexpr const char* VoiceTxExtent_Name{"VoiceTxExtent"};
constexpr const char* LinkCommandedState_Name{"LinkCommandedState"};
constexpr const char* NetChangeRequest_Name{"NetChangeRequest"};

} // namespace CommMADL_ControlType_Names

void CommMADL_ControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_ControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_ControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::Node_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNode(asb_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::FlightGroupIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlightGroupIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::NetworkIdentifier_Name) {
      CommMADL_NetworkType::deserialize(valueType.second, accessor.getNetworkIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::NetworkLayout_Name) {
      CommMADL_NetworkLayoutType::deserialize(valueType.second, accessor.getNetworkLayout(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::MADL_DayOfYear_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMADL_DayOfYear(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::VoiceTxExtent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceTxExtent(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::LinkCommandedState_Name) {
      CommMADL_LinkCommandListType::deserialize(valueType.second, accessor.enableLinkCommandedState(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_ControlType_Names::NetChangeRequest_Name) {
      CommMADL_NetChangeRequestType::deserialize(valueType.second, accessor.enableNetChangeRequest(), nodeName, nsPrefix);
    }
  }
}

std::string CommMADL_ControlType::serialize(const uci::type::CommMADL_ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommMADL_ControlType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_ControlType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getNode(), node, CommMADL_ControlType_Names::Node_Name);
  if (accessor.hasFlightGroupIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getFlightGroupIdentifier(), node, CommMADL_ControlType_Names::FlightGroupIdentifier_Name);
  }
  CommMADL_NetworkType::serialize(accessor.getNetworkIdentifier(), node, CommMADL_ControlType_Names::NetworkIdentifier_Name);
  CommMADL_NetworkLayoutType::serialize(accessor.getNetworkLayout(), node, CommMADL_ControlType_Names::NetworkLayout_Name);
  if (accessor.hasMADL_DayOfYear()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getMADL_DayOfYear(), node, CommMADL_ControlType_Names::MADL_DayOfYear_Name);
  }
  if (accessor.hasVoiceTxExtent()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceTxExtent(), node, CommMADL_ControlType_Names::VoiceTxExtent_Name);
  }
  if (accessor.hasLinkCommandedState()) {
    CommMADL_LinkCommandListType::serialize(accessor.getLinkCommandedState(), node, CommMADL_ControlType_Names::LinkCommandedState_Name);
  }
  if (accessor.hasNetChangeRequest()) {
    CommMADL_NetChangeRequestType::serialize(accessor.getNetChangeRequest(), node, CommMADL_ControlType_Names::NetChangeRequest_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommMADL_ControlType& CommMADL_ControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommMADL_ControlType>().release());
}

uci::type::CommMADL_ControlType& CommMADL_ControlType::create(const uci::type::CommMADL_ControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommMADL_ControlType> newAccessor{boost::make_unique<asb_uci::type::CommMADL_ControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommMADL_ControlType::destroy(uci::type::CommMADL_ControlType& accessor) {
  delete dynamic_cast<asb_uci::type::CommMADL_ControlType*>(&accessor);
}

} // namespace type

} // namespace uci

