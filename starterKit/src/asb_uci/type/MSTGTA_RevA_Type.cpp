/** @file MSTGTA_RevA_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MSTGTA_RevA_Type.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MSTGTA_TGT_LOC_Type.h"
#include "asb_uci/type/MSTGTA_TGT_LTIOV_Type.h"
#include "asb_uci/type/TGT_UTCStringType.h"
#include "asb_uci/type/VisibleString12Type.h"
#include "asb_uci/type/VisibleString15Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ElevationType.h"
#include "uci/type/MSTGTA_RevA_Type.h"
#include "uci/type/MSTGTA_TGT_LOC_Type.h"
#include "uci/type/MSTGTA_TGT_LTIOV_Type.h"
#include "uci/type/MeterUnitLetterStringType.h"
#include "uci/type/NITF_TargetCategoryCodeType.h"
#include "uci/type/NITF_TargetNumberType.h"
#include "uci/type/NITF_TargetPriorityType.h"
#include "uci/type/SingleDigitStringType.h"
#include "uci/type/TGT_UTCStringType.h"
#include "uci/type/VisibleString12Type.h"
#include "uci/type/VisibleString15Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MSTGTA_RevA_Type::MSTGTA_RevA_Type()
  : tGT_LOC_Accessor{boost::make_unique<MSTGTA_TGT_LOC_Type>()} {
}

MSTGTA_RevA_Type::~MSTGTA_RevA_Type() = default;

void MSTGTA_RevA_Type::copy(const uci::type::MSTGTA_RevA_Type& accessor) {
  copyImpl(accessor, false);
}

void MSTGTA_RevA_Type::copyImpl(const uci::type::MSTGTA_RevA_Type& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MSTGTA_RevA_Type&>(accessor);
    if (accessorImpl.hasTGT_NUM()) {
      setTGT_NUM(accessorImpl.getTGT_NUM());
    } else {
      clearTGT_NUM();
    }
    if (accessorImpl.tGT_Identifier_Accessor) {
      setTGT_Identifier(*(accessorImpl.tGT_Identifier_Accessor));
    } else {
      tGT_Identifier_Accessor.reset();
    }
    if (accessorImpl.tGT_BE_Accessor) {
      setTGT_BE(*(accessorImpl.tGT_BE_Accessor));
    } else {
      tGT_BE_Accessor.reset();
    }
    if (accessorImpl.hasTGT_PRI()) {
      setTGT_PRI(accessorImpl.getTGT_PRI());
    } else {
      clearTGT_PRI();
    }
    if (accessorImpl.tGT_REQ_Accessor) {
      setTGT_REQ(*(accessorImpl.tGT_REQ_Accessor));
    } else {
      tGT_REQ_Accessor.reset();
    }
    if (accessorImpl.tGT_LTIOV_Accessor) {
      setTGT_LTIOV(*(accessorImpl.tGT_LTIOV_Accessor));
    } else {
      tGT_LTIOV_Accessor.reset();
    }
    if (accessorImpl.tGT_TYPE_Accessor) {
      setTGT_TYPE(*(accessorImpl.tGT_TYPE_Accessor));
    } else {
      tGT_TYPE_Accessor.reset();
    }
    if (accessorImpl.tGT_COLL_Accessor) {
      setTGT_COLL(*(accessorImpl.tGT_COLL_Accessor));
    } else {
      tGT_COLL_Accessor.reset();
    }
    if (accessorImpl.hasTGT_CAT()) {
      setTGT_CAT(accessorImpl.getTGT_CAT());
    } else {
      clearTGT_CAT();
    }
    if (accessorImpl.tGT_UTC_Accessor) {
      setTGT_UTC(*(accessorImpl.tGT_UTC_Accessor));
    } else {
      tGT_UTC_Accessor.reset();
    }
    if (accessorImpl.hasTGT_ELEV()) {
      setTGT_ELEV(accessorImpl.getTGT_ELEV());
    } else {
      clearTGT_ELEV();
    }
    if (accessorImpl.tGT_ELEV_UNIT_Accessor) {
      setTGT_ELEV_UNIT(*(accessorImpl.tGT_ELEV_UNIT_Accessor));
    } else {
      tGT_ELEV_UNIT_Accessor.reset();
    }
    setTGT_LOC(*(accessorImpl.tGT_LOC_Accessor));
  }
}

void MSTGTA_RevA_Type::reset() noexcept {
  clearTGT_NUM();
  tGT_Identifier_Accessor.reset();
  tGT_BE_Accessor.reset();
  clearTGT_PRI();
  tGT_REQ_Accessor.reset();
  tGT_LTIOV_Accessor.reset();
  tGT_TYPE_Accessor.reset();
  tGT_COLL_Accessor.reset();
  clearTGT_CAT();
  tGT_UTC_Accessor.reset();
  clearTGT_ELEV();
  tGT_ELEV_UNIT_Accessor.reset();
  tGT_LOC_Accessor->reset();
}

uci::type::NITF_TargetNumberTypeValue MSTGTA_RevA_Type::getTGT_NUM() const {
  if (tGT_NUM_Accessor) {
    return *tGT_NUM_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_NUM(): An attempt was made to get an optional field that was not enabled, call hasTGT_NUM() to determine if it is safe to call getTGT_NUM()");
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_NUM(uci::type::NITF_TargetNumberTypeValue value) {
  tGT_NUM_Accessor = value;
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_NUM() const noexcept {
  return tGT_NUM_Accessor.has_value();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_NUM() noexcept {
  tGT_NUM_Accessor.reset();
  return *this;
}

uci::type::VisibleString12Type& MSTGTA_RevA_Type::getTGT_Identifier_() const {
  if (tGT_Identifier_Accessor) {
    return *tGT_Identifier_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_Identifier(): An attempt was made to get an optional field that was not enabled, call hasTGT_Identifier() to determine if it is safe to call getTGT_Identifier()");
}

const uci::type::VisibleString12Type& MSTGTA_RevA_Type::getTGT_Identifier() const {
  return getTGT_Identifier_();
}

uci::type::VisibleString12Type& MSTGTA_RevA_Type::getTGT_Identifier() {
  return getTGT_Identifier_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_Identifier(const uci::type::VisibleString12Type& value) {
  return setTGT_Identifier(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_Identifier(const std::string& value) {
  return setTGT_Identifier(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_Identifier(const char* value) {
  enableTGT_Identifier().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_Identifier() const noexcept {
  return static_cast<bool>(tGT_Identifier_Accessor);
}

uci::type::VisibleString12Type& MSTGTA_RevA_Type::enableTGT_Identifier(uci::base::accessorType::AccessorType type) {
  if (!tGT_Identifier_Accessor) {
    tGT_Identifier_Accessor = VisibleString12Type::create(type);
  }
  return *tGT_Identifier_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_Identifier() noexcept {
  tGT_Identifier_Accessor.reset();
  return *this;
}

uci::type::VisibleString15Type& MSTGTA_RevA_Type::getTGT_BE_() const {
  if (tGT_BE_Accessor) {
    return *tGT_BE_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_BE(): An attempt was made to get an optional field that was not enabled, call hasTGT_BE() to determine if it is safe to call getTGT_BE()");
}

const uci::type::VisibleString15Type& MSTGTA_RevA_Type::getTGT_BE() const {
  return getTGT_BE_();
}

uci::type::VisibleString15Type& MSTGTA_RevA_Type::getTGT_BE() {
  return getTGT_BE_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_BE(const uci::type::VisibleString15Type& value) {
  return setTGT_BE(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_BE(const std::string& value) {
  return setTGT_BE(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_BE(const char* value) {
  enableTGT_BE().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_BE() const noexcept {
  return static_cast<bool>(tGT_BE_Accessor);
}

uci::type::VisibleString15Type& MSTGTA_RevA_Type::enableTGT_BE(uci::base::accessorType::AccessorType type) {
  if (!tGT_BE_Accessor) {
    tGT_BE_Accessor = VisibleString15Type::create(type);
  }
  return *tGT_BE_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_BE() noexcept {
  tGT_BE_Accessor.reset();
  return *this;
}

uci::type::NITF_TargetPriorityTypeValue MSTGTA_RevA_Type::getTGT_PRI() const {
  if (tGT_PRI_Accessor) {
    return *tGT_PRI_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_PRI(): An attempt was made to get an optional field that was not enabled, call hasTGT_PRI() to determine if it is safe to call getTGT_PRI()");
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_PRI(uci::type::NITF_TargetPriorityTypeValue value) {
  tGT_PRI_Accessor = value;
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_PRI() const noexcept {
  return tGT_PRI_Accessor.has_value();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_PRI() noexcept {
  tGT_PRI_Accessor.reset();
  return *this;
}

uci::type::VisibleString12Type& MSTGTA_RevA_Type::getTGT_REQ_() const {
  if (tGT_REQ_Accessor) {
    return *tGT_REQ_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_REQ(): An attempt was made to get an optional field that was not enabled, call hasTGT_REQ() to determine if it is safe to call getTGT_REQ()");
}

const uci::type::VisibleString12Type& MSTGTA_RevA_Type::getTGT_REQ() const {
  return getTGT_REQ_();
}

uci::type::VisibleString12Type& MSTGTA_RevA_Type::getTGT_REQ() {
  return getTGT_REQ_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_REQ(const uci::type::VisibleString12Type& value) {
  return setTGT_REQ(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_REQ(const std::string& value) {
  return setTGT_REQ(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_REQ(const char* value) {
  enableTGT_REQ().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_REQ() const noexcept {
  return static_cast<bool>(tGT_REQ_Accessor);
}

uci::type::VisibleString12Type& MSTGTA_RevA_Type::enableTGT_REQ(uci::base::accessorType::AccessorType type) {
  if (!tGT_REQ_Accessor) {
    tGT_REQ_Accessor = VisibleString12Type::create(type);
  }
  return *tGT_REQ_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_REQ() noexcept {
  tGT_REQ_Accessor.reset();
  return *this;
}

uci::type::MSTGTA_TGT_LTIOV_Type& MSTGTA_RevA_Type::getTGT_LTIOV_() const {
  if (tGT_LTIOV_Accessor) {
    return *tGT_LTIOV_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_LTIOV(): An attempt was made to get an optional field that was not enabled, call hasTGT_LTIOV() to determine if it is safe to call getTGT_LTIOV()");
}

const uci::type::MSTGTA_TGT_LTIOV_Type& MSTGTA_RevA_Type::getTGT_LTIOV() const {
  return getTGT_LTIOV_();
}

uci::type::MSTGTA_TGT_LTIOV_Type& MSTGTA_RevA_Type::getTGT_LTIOV() {
  return getTGT_LTIOV_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_LTIOV(const uci::type::MSTGTA_TGT_LTIOV_Type& value) {
  return setTGT_LTIOV(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_LTIOV(const std::string& value) {
  return setTGT_LTIOV(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_LTIOV(const char* value) {
  enableTGT_LTIOV().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_LTIOV() const noexcept {
  return static_cast<bool>(tGT_LTIOV_Accessor);
}

uci::type::MSTGTA_TGT_LTIOV_Type& MSTGTA_RevA_Type::enableTGT_LTIOV(uci::base::accessorType::AccessorType type) {
  if (!tGT_LTIOV_Accessor) {
    tGT_LTIOV_Accessor = MSTGTA_TGT_LTIOV_Type::create(type);
  }
  return *tGT_LTIOV_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_LTIOV() noexcept {
  tGT_LTIOV_Accessor.reset();
  return *this;
}

uci::type::SingleDigitStringType& MSTGTA_RevA_Type::getTGT_TYPE_() const {
  if (tGT_TYPE_Accessor) {
    return *tGT_TYPE_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_TYPE(): An attempt was made to get an optional field that was not enabled, call hasTGT_TYPE() to determine if it is safe to call getTGT_TYPE()");
}

const uci::type::SingleDigitStringType& MSTGTA_RevA_Type::getTGT_TYPE() const {
  return getTGT_TYPE_();
}

uci::type::SingleDigitStringType& MSTGTA_RevA_Type::getTGT_TYPE() {
  return getTGT_TYPE_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_TYPE(const uci::type::SingleDigitStringType& value) {
  return setTGT_TYPE(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_TYPE(const std::string& value) {
  return setTGT_TYPE(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_TYPE(const char* value) {
  enableTGT_TYPE().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_TYPE() const noexcept {
  return static_cast<bool>(tGT_TYPE_Accessor);
}

uci::type::SingleDigitStringType& MSTGTA_RevA_Type::enableTGT_TYPE(uci::base::accessorType::AccessorType type) {
  if (!tGT_TYPE_Accessor) {
    tGT_TYPE_Accessor = SingleDigitStringType::create(type);
  }
  return *tGT_TYPE_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_TYPE() noexcept {
  tGT_TYPE_Accessor.reset();
  return *this;
}

uci::type::SingleDigitStringType& MSTGTA_RevA_Type::getTGT_COLL_() const {
  if (tGT_COLL_Accessor) {
    return *tGT_COLL_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_COLL(): An attempt was made to get an optional field that was not enabled, call hasTGT_COLL() to determine if it is safe to call getTGT_COLL()");
}

const uci::type::SingleDigitStringType& MSTGTA_RevA_Type::getTGT_COLL() const {
  return getTGT_COLL_();
}

uci::type::SingleDigitStringType& MSTGTA_RevA_Type::getTGT_COLL() {
  return getTGT_COLL_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_COLL(const uci::type::SingleDigitStringType& value) {
  return setTGT_COLL(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_COLL(const std::string& value) {
  return setTGT_COLL(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_COLL(const char* value) {
  enableTGT_COLL().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_COLL() const noexcept {
  return static_cast<bool>(tGT_COLL_Accessor);
}

uci::type::SingleDigitStringType& MSTGTA_RevA_Type::enableTGT_COLL(uci::base::accessorType::AccessorType type) {
  if (!tGT_COLL_Accessor) {
    tGT_COLL_Accessor = SingleDigitStringType::create(type);
  }
  return *tGT_COLL_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_COLL() noexcept {
  tGT_COLL_Accessor.reset();
  return *this;
}

uci::type::NITF_TargetCategoryCodeTypeValue MSTGTA_RevA_Type::getTGT_CAT() const {
  if (tGT_CAT_Accessor) {
    return *tGT_CAT_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_CAT(): An attempt was made to get an optional field that was not enabled, call hasTGT_CAT() to determine if it is safe to call getTGT_CAT()");
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_CAT(uci::type::NITF_TargetCategoryCodeTypeValue value) {
  tGT_CAT_Accessor = value;
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_CAT() const noexcept {
  return tGT_CAT_Accessor.has_value();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_CAT() noexcept {
  tGT_CAT_Accessor.reset();
  return *this;
}

uci::type::TGT_UTCStringType& MSTGTA_RevA_Type::getTGT_UTC_() const {
  if (tGT_UTC_Accessor) {
    return *tGT_UTC_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_UTC(): An attempt was made to get an optional field that was not enabled, call hasTGT_UTC() to determine if it is safe to call getTGT_UTC()");
}

const uci::type::TGT_UTCStringType& MSTGTA_RevA_Type::getTGT_UTC() const {
  return getTGT_UTC_();
}

uci::type::TGT_UTCStringType& MSTGTA_RevA_Type::getTGT_UTC() {
  return getTGT_UTC_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_UTC(const uci::type::TGT_UTCStringType& value) {
  return setTGT_UTC(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_UTC(const std::string& value) {
  return setTGT_UTC(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_UTC(const char* value) {
  enableTGT_UTC().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_UTC() const noexcept {
  return static_cast<bool>(tGT_UTC_Accessor);
}

uci::type::TGT_UTCStringType& MSTGTA_RevA_Type::enableTGT_UTC(uci::base::accessorType::AccessorType type) {
  if (!tGT_UTC_Accessor) {
    tGT_UTC_Accessor = TGT_UTCStringType::create(type);
  }
  return *tGT_UTC_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_UTC() noexcept {
  tGT_UTC_Accessor.reset();
  return *this;
}

uci::type::ElevationTypeValue MSTGTA_RevA_Type::getTGT_ELEV() const {
  if (tGT_ELEV_Accessor) {
    return *tGT_ELEV_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_ELEV(): An attempt was made to get an optional field that was not enabled, call hasTGT_ELEV() to determine if it is safe to call getTGT_ELEV()");
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_ELEV(uci::type::ElevationTypeValue value) {
  tGT_ELEV_Accessor = value;
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_ELEV() const noexcept {
  return tGT_ELEV_Accessor.has_value();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_ELEV() noexcept {
  tGT_ELEV_Accessor.reset();
  return *this;
}

uci::type::MeterUnitLetterStringType& MSTGTA_RevA_Type::getTGT_ELEV_UNIT_() const {
  if (tGT_ELEV_UNIT_Accessor) {
    return *tGT_ELEV_UNIT_Accessor;
  }
  throw uci::base::UCIException("Error in getTGT_ELEV_UNIT(): An attempt was made to get an optional field that was not enabled, call hasTGT_ELEV_UNIT() to determine if it is safe to call getTGT_ELEV_UNIT()");
}

const uci::type::MeterUnitLetterStringType& MSTGTA_RevA_Type::getTGT_ELEV_UNIT() const {
  return getTGT_ELEV_UNIT_();
}

uci::type::MeterUnitLetterStringType& MSTGTA_RevA_Type::getTGT_ELEV_UNIT() {
  return getTGT_ELEV_UNIT_();
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_ELEV_UNIT(const uci::type::MeterUnitLetterStringType& value) {
  return setTGT_ELEV_UNIT(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_ELEV_UNIT(const std::string& value) {
  return setTGT_ELEV_UNIT(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_ELEV_UNIT(const char* value) {
  enableTGT_ELEV_UNIT().setStringValue(value);
  return *this;
}

bool MSTGTA_RevA_Type::hasTGT_ELEV_UNIT() const noexcept {
  return static_cast<bool>(tGT_ELEV_UNIT_Accessor);
}

uci::type::MeterUnitLetterStringType& MSTGTA_RevA_Type::enableTGT_ELEV_UNIT(uci::base::accessorType::AccessorType type) {
  if (!tGT_ELEV_UNIT_Accessor) {
    tGT_ELEV_UNIT_Accessor = MeterUnitLetterStringType::create(type);
  }
  return *tGT_ELEV_UNIT_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::clearTGT_ELEV_UNIT() noexcept {
  tGT_ELEV_UNIT_Accessor.reset();
  return *this;
}

const uci::type::MSTGTA_TGT_LOC_Type& MSTGTA_RevA_Type::getTGT_LOC() const noexcept {
  return *tGT_LOC_Accessor;
}

uci::type::MSTGTA_TGT_LOC_Type& MSTGTA_RevA_Type::getTGT_LOC() noexcept {
  return *tGT_LOC_Accessor;
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_LOC(const uci::type::MSTGTA_TGT_LOC_Type& value) {
  return setTGT_LOC(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_LOC(const std::string& value) {
  return setTGT_LOC(value.c_str());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::setTGT_LOC(const char* value) {
  tGT_LOC_Accessor->setStringValue(value);
  return *this;
}

std::unique_ptr<MSTGTA_RevA_Type> MSTGTA_RevA_Type::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mSTGTA_RevA_Type : type};
  return (requestedType == uci::type::accessorType::mSTGTA_RevA_Type) ? boost::make_unique<MSTGTA_RevA_Type>() : nullptr;
}

/**  */
namespace MSTGTA_RevA_Type_Names {

constexpr const char* Extern_Type_Name{"MSTGTA_RevA_Type"};
constexpr const char* TGT_NUM_Name{"TGT_NUM"};
constexpr const char* TGT_Identifier_Name{"TGT_Identifier"};
constexpr const char* TGT_BE_Name{"TGT_BE"};
constexpr const char* TGT_PRI_Name{"TGT_PRI"};
constexpr const char* TGT_REQ_Name{"TGT_REQ"};
constexpr const char* TGT_LTIOV_Name{"TGT_LTIOV"};
constexpr const char* TGT_TYPE_Name{"TGT_TYPE"};
constexpr const char* TGT_COLL_Name{"TGT_COLL"};
constexpr const char* TGT_CAT_Name{"TGT_CAT"};
constexpr const char* TGT_UTC_Name{"TGT_UTC"};
constexpr const char* TGT_ELEV_Name{"TGT_ELEV"};
constexpr const char* TGT_ELEV_UNIT_Name{"TGT_ELEV_UNIT"};
constexpr const char* TGT_LOC_Name{"TGT_LOC"};

} // namespace MSTGTA_RevA_Type_Names

void MSTGTA_RevA_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::MSTGTA_RevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MSTGTA_RevA_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_NUM_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_NUM(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_Identifier(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_BE_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_BE(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_PRI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_PRI(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_REQ_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_REQ(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_LTIOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_LTIOV(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_TYPE_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_TYPE(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_COLL_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_COLL(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_CAT_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_CAT(asb_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_UTC_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_UTC(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_ELEV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_ELEV(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_ELEV_UNIT_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_ELEV_UNIT(*value);
      }
    } else if (valueType.first == nsPrefix + MSTGTA_RevA_Type_Names::TGT_LOC_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTGT_LOC(*value);
      }
    }
  }
}

std::string MSTGTA_RevA_Type::serialize(const uci::type::MSTGTA_RevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MSTGTA_RevA_Type_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MSTGTA_RevA_Type_Names::Extern_Type_Name);
  }
  if (accessor.hasTGT_NUM()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getTGT_NUM(), node, MSTGTA_RevA_Type_Names::TGT_NUM_Name);
  }
  if (accessor.hasTGT_Identifier()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_Identifier(), node, MSTGTA_RevA_Type_Names::TGT_Identifier_Name);
  }
  if (accessor.hasTGT_BE()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_BE(), node, MSTGTA_RevA_Type_Names::TGT_BE_Name);
  }
  if (accessor.hasTGT_PRI()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getTGT_PRI(), node, MSTGTA_RevA_Type_Names::TGT_PRI_Name);
  }
  if (accessor.hasTGT_REQ()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_REQ(), node, MSTGTA_RevA_Type_Names::TGT_REQ_Name);
  }
  if (accessor.hasTGT_LTIOV()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_LTIOV(), node, MSTGTA_RevA_Type_Names::TGT_LTIOV_Name);
  }
  if (accessor.hasTGT_TYPE()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_TYPE(), node, MSTGTA_RevA_Type_Names::TGT_TYPE_Name);
  }
  if (accessor.hasTGT_COLL()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_COLL(), node, MSTGTA_RevA_Type_Names::TGT_COLL_Name);
  }
  if (accessor.hasTGT_CAT()) {
    asb_uci::util::SerializationHelpers::serializeInt(accessor.getTGT_CAT(), node, MSTGTA_RevA_Type_Names::TGT_CAT_Name);
  }
  if (accessor.hasTGT_UTC()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_UTC(), node, MSTGTA_RevA_Type_Names::TGT_UTC_Name);
  }
  if (accessor.hasTGT_ELEV()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTGT_ELEV(), node, MSTGTA_RevA_Type_Names::TGT_ELEV_Name);
  }
  if (accessor.hasTGT_ELEV_UNIT()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_ELEV_UNIT(), node, MSTGTA_RevA_Type_Names::TGT_ELEV_UNIT_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getTGT_LOC(), node, MSTGTA_RevA_Type_Names::TGT_LOC_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MSTGTA_RevA_Type>().release());
}

uci::type::MSTGTA_RevA_Type& MSTGTA_RevA_Type::create(const uci::type::MSTGTA_RevA_Type& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MSTGTA_RevA_Type> newAccessor{boost::make_unique<asb_uci::type::MSTGTA_RevA_Type>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MSTGTA_RevA_Type::destroy(uci::type::MSTGTA_RevA_Type& accessor) {
  delete dynamic_cast<asb_uci::type::MSTGTA_RevA_Type*>(&accessor);
}

} // namespace type

} // namespace uci

