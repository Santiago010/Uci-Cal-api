/** @file PO_CollectionConstraintsSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_CollectionConstraintsSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_AngleConstraintControlsType.h"
#include "asb_uci/type/PO_CollectionPatternConstraintControlsType.h"
#include "asb_uci/type/PO_GimbalOrientationConstraintType.h"
#include "asb_uci/type/PO_SlantRangeConstraintControlsType.h"
#include "asb_uci/type/PO_SweepSpeedConstraintControlsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_AngleConstraintControlsType.h"
#include "uci/type/PO_CollectionConstraintsSettingsType.h"
#include "uci/type/PO_CollectionPatternConstraintControlsType.h"
#include "uci/type/PO_GimbalOrientationConstraintType.h"
#include "uci/type/PO_SlantRangeConstraintControlsType.h"
#include "uci/type/PO_SweepSpeedConstraintControlsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_CollectionConstraintsSettingsType::PO_CollectionConstraintsSettingsType() = default;

PO_CollectionConstraintsSettingsType::~PO_CollectionConstraintsSettingsType() = default;

void PO_CollectionConstraintsSettingsType::copy(const uci::type::PO_CollectionConstraintsSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_CollectionConstraintsSettingsType::copyImpl(const uci::type::PO_CollectionConstraintsSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_CollectionConstraintsSettingsType&>(accessor);
    if (accessorImpl.mapAngle_Accessor) {
      setMapAngle(*(accessorImpl.mapAngle_Accessor));
    } else {
      mapAngle_Accessor.reset();
    }
    if (accessorImpl.grazingAngle_Accessor) {
      setGrazingAngle(*(accessorImpl.grazingAngle_Accessor));
    } else {
      grazingAngle_Accessor.reset();
    }
    if (accessorImpl.lookAngle_Accessor) {
      setLookAngle(*(accessorImpl.lookAngle_Accessor));
    } else {
      lookAngle_Accessor.reset();
    }
    if (accessorImpl.elevationAngle_Accessor) {
      setElevationAngle(*(accessorImpl.elevationAngle_Accessor));
    } else {
      elevationAngle_Accessor.reset();
    }
    if (accessorImpl.slantRange_Accessor) {
      setSlantRange(*(accessorImpl.slantRange_Accessor));
    } else {
      slantRange_Accessor.reset();
    }
    if (accessorImpl.collectionPattern_Accessor) {
      setCollectionPattern(*(accessorImpl.collectionPattern_Accessor));
    } else {
      collectionPattern_Accessor.reset();
    }
    if (accessorImpl.sunElevAngles_Accessor) {
      setSunElevAngles(*(accessorImpl.sunElevAngles_Accessor));
    } else {
      sunElevAngles_Accessor.reset();
    }
    if (accessorImpl.sunAzimuthAngles_Accessor) {
      setSunAzimuthAngles(*(accessorImpl.sunAzimuthAngles_Accessor));
    } else {
      sunAzimuthAngles_Accessor.reset();
    }
    if (accessorImpl.sweepSpeed_Accessor) {
      setSweepSpeed(*(accessorImpl.sweepSpeed_Accessor));
    } else {
      sweepSpeed_Accessor.reset();
    }
    if (accessorImpl.gimbalOrientation_Accessor) {
      setGimbalOrientation(*(accessorImpl.gimbalOrientation_Accessor));
    } else {
      gimbalOrientation_Accessor.reset();
    }
  }
}

void PO_CollectionConstraintsSettingsType::reset() noexcept {
  mapAngle_Accessor.reset();
  grazingAngle_Accessor.reset();
  lookAngle_Accessor.reset();
  elevationAngle_Accessor.reset();
  slantRange_Accessor.reset();
  collectionPattern_Accessor.reset();
  sunElevAngles_Accessor.reset();
  sunAzimuthAngles_Accessor.reset();
  sweepSpeed_Accessor.reset();
  gimbalOrientation_Accessor.reset();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getMapAngle_() const {
  if (mapAngle_Accessor) {
    return *mapAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getMapAngle(): An attempt was made to get an optional field that was not enabled, call hasMapAngle() to determine if it is safe to call getMapAngle()");
}

const uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getMapAngle() const {
  return getMapAngle_();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getMapAngle() {
  return getMapAngle_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setMapAngle(const uci::type::PO_AngleConstraintControlsType& accessor) {
  enableMapAngle();
  if (&accessor != mapAngle_Accessor.get()) {
    mapAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasMapAngle() const noexcept {
  return static_cast<bool>(mapAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::enableMapAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsType : type};
  if ((!mapAngle_Accessor) || (mapAngle_Accessor->getAccessorType() != requestedType)) {
    mapAngle_Accessor = PO_AngleConstraintControlsType::create(requestedType);
    if (!mapAngle_Accessor) {
      throw uci::base::UCIException("Error in enableMapAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mapAngle_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearMapAngle() noexcept {
  mapAngle_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getGrazingAngle_() const {
  if (grazingAngle_Accessor) {
    return *grazingAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getGrazingAngle(): An attempt was made to get an optional field that was not enabled, call hasGrazingAngle() to determine if it is safe to call getGrazingAngle()");
}

const uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getGrazingAngle() const {
  return getGrazingAngle_();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getGrazingAngle() {
  return getGrazingAngle_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setGrazingAngle(const uci::type::PO_AngleConstraintControlsType& accessor) {
  enableGrazingAngle();
  if (&accessor != grazingAngle_Accessor.get()) {
    grazingAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasGrazingAngle() const noexcept {
  return static_cast<bool>(grazingAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::enableGrazingAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsType : type};
  if ((!grazingAngle_Accessor) || (grazingAngle_Accessor->getAccessorType() != requestedType)) {
    grazingAngle_Accessor = PO_AngleConstraintControlsType::create(requestedType);
    if (!grazingAngle_Accessor) {
      throw uci::base::UCIException("Error in enableGrazingAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *grazingAngle_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearGrazingAngle() noexcept {
  grazingAngle_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getLookAngle_() const {
  if (lookAngle_Accessor) {
    return *lookAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getLookAngle(): An attempt was made to get an optional field that was not enabled, call hasLookAngle() to determine if it is safe to call getLookAngle()");
}

const uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getLookAngle() const {
  return getLookAngle_();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getLookAngle() {
  return getLookAngle_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setLookAngle(const uci::type::PO_AngleConstraintControlsType& accessor) {
  enableLookAngle();
  if (&accessor != lookAngle_Accessor.get()) {
    lookAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasLookAngle() const noexcept {
  return static_cast<bool>(lookAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::enableLookAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsType : type};
  if ((!lookAngle_Accessor) || (lookAngle_Accessor->getAccessorType() != requestedType)) {
    lookAngle_Accessor = PO_AngleConstraintControlsType::create(requestedType);
    if (!lookAngle_Accessor) {
      throw uci::base::UCIException("Error in enableLookAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *lookAngle_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearLookAngle() noexcept {
  lookAngle_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getElevationAngle_() const {
  if (elevationAngle_Accessor) {
    return *elevationAngle_Accessor;
  }
  throw uci::base::UCIException("Error in getElevationAngle(): An attempt was made to get an optional field that was not enabled, call hasElevationAngle() to determine if it is safe to call getElevationAngle()");
}

const uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getElevationAngle() const {
  return getElevationAngle_();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getElevationAngle() {
  return getElevationAngle_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setElevationAngle(const uci::type::PO_AngleConstraintControlsType& accessor) {
  enableElevationAngle();
  if (&accessor != elevationAngle_Accessor.get()) {
    elevationAngle_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasElevationAngle() const noexcept {
  return static_cast<bool>(elevationAngle_Accessor);
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::enableElevationAngle(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsType : type};
  if ((!elevationAngle_Accessor) || (elevationAngle_Accessor->getAccessorType() != requestedType)) {
    elevationAngle_Accessor = PO_AngleConstraintControlsType::create(requestedType);
    if (!elevationAngle_Accessor) {
      throw uci::base::UCIException("Error in enableElevationAngle(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *elevationAngle_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearElevationAngle() noexcept {
  elevationAngle_Accessor.reset();
  return *this;
}

uci::type::PO_SlantRangeConstraintControlsType& PO_CollectionConstraintsSettingsType::getSlantRange_() const {
  if (slantRange_Accessor) {
    return *slantRange_Accessor;
  }
  throw uci::base::UCIException("Error in getSlantRange(): An attempt was made to get an optional field that was not enabled, call hasSlantRange() to determine if it is safe to call getSlantRange()");
}

const uci::type::PO_SlantRangeConstraintControlsType& PO_CollectionConstraintsSettingsType::getSlantRange() const {
  return getSlantRange_();
}

uci::type::PO_SlantRangeConstraintControlsType& PO_CollectionConstraintsSettingsType::getSlantRange() {
  return getSlantRange_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setSlantRange(const uci::type::PO_SlantRangeConstraintControlsType& accessor) {
  enableSlantRange();
  if (&accessor != slantRange_Accessor.get()) {
    slantRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasSlantRange() const noexcept {
  return static_cast<bool>(slantRange_Accessor);
}

uci::type::PO_SlantRangeConstraintControlsType& PO_CollectionConstraintsSettingsType::enableSlantRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_SlantRangeConstraintControlsType : type};
  if ((!slantRange_Accessor) || (slantRange_Accessor->getAccessorType() != requestedType)) {
    slantRange_Accessor = PO_SlantRangeConstraintControlsType::create(requestedType);
    if (!slantRange_Accessor) {
      throw uci::base::UCIException("Error in enableSlantRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *slantRange_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearSlantRange() noexcept {
  slantRange_Accessor.reset();
  return *this;
}

uci::type::PO_CollectionPatternConstraintControlsType& PO_CollectionConstraintsSettingsType::getCollectionPattern_() const {
  if (collectionPattern_Accessor) {
    return *collectionPattern_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPattern(): An attempt was made to get an optional field that was not enabled, call hasCollectionPattern() to determine if it is safe to call getCollectionPattern()");
}

const uci::type::PO_CollectionPatternConstraintControlsType& PO_CollectionConstraintsSettingsType::getCollectionPattern() const {
  return getCollectionPattern_();
}

uci::type::PO_CollectionPatternConstraintControlsType& PO_CollectionConstraintsSettingsType::getCollectionPattern() {
  return getCollectionPattern_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setCollectionPattern(const uci::type::PO_CollectionPatternConstraintControlsType& accessor) {
  enableCollectionPattern();
  if (&accessor != collectionPattern_Accessor.get()) {
    collectionPattern_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasCollectionPattern() const noexcept {
  return static_cast<bool>(collectionPattern_Accessor);
}

uci::type::PO_CollectionPatternConstraintControlsType& PO_CollectionConstraintsSettingsType::enableCollectionPattern(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionPatternConstraintControlsType : type};
  if ((!collectionPattern_Accessor) || (collectionPattern_Accessor->getAccessorType() != requestedType)) {
    collectionPattern_Accessor = PO_CollectionPatternConstraintControlsType::create(requestedType);
    if (!collectionPattern_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPattern(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPattern_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearCollectionPattern() noexcept {
  collectionPattern_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getSunElevAngles_() const {
  if (sunElevAngles_Accessor) {
    return *sunElevAngles_Accessor;
  }
  throw uci::base::UCIException("Error in getSunElevAngles(): An attempt was made to get an optional field that was not enabled, call hasSunElevAngles() to determine if it is safe to call getSunElevAngles()");
}

const uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getSunElevAngles() const {
  return getSunElevAngles_();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getSunElevAngles() {
  return getSunElevAngles_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setSunElevAngles(const uci::type::PO_AngleConstraintControlsType& accessor) {
  enableSunElevAngles();
  if (&accessor != sunElevAngles_Accessor.get()) {
    sunElevAngles_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasSunElevAngles() const noexcept {
  return static_cast<bool>(sunElevAngles_Accessor);
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::enableSunElevAngles(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsType : type};
  if ((!sunElevAngles_Accessor) || (sunElevAngles_Accessor->getAccessorType() != requestedType)) {
    sunElevAngles_Accessor = PO_AngleConstraintControlsType::create(requestedType);
    if (!sunElevAngles_Accessor) {
      throw uci::base::UCIException("Error in enableSunElevAngles(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sunElevAngles_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearSunElevAngles() noexcept {
  sunElevAngles_Accessor.reset();
  return *this;
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getSunAzimuthAngles_() const {
  if (sunAzimuthAngles_Accessor) {
    return *sunAzimuthAngles_Accessor;
  }
  throw uci::base::UCIException("Error in getSunAzimuthAngles(): An attempt was made to get an optional field that was not enabled, call hasSunAzimuthAngles() to determine if it is safe to call getSunAzimuthAngles()");
}

const uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getSunAzimuthAngles() const {
  return getSunAzimuthAngles_();
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::getSunAzimuthAngles() {
  return getSunAzimuthAngles_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setSunAzimuthAngles(const uci::type::PO_AngleConstraintControlsType& accessor) {
  enableSunAzimuthAngles();
  if (&accessor != sunAzimuthAngles_Accessor.get()) {
    sunAzimuthAngles_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasSunAzimuthAngles() const noexcept {
  return static_cast<bool>(sunAzimuthAngles_Accessor);
}

uci::type::PO_AngleConstraintControlsType& PO_CollectionConstraintsSettingsType::enableSunAzimuthAngles(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_AngleConstraintControlsType : type};
  if ((!sunAzimuthAngles_Accessor) || (sunAzimuthAngles_Accessor->getAccessorType() != requestedType)) {
    sunAzimuthAngles_Accessor = PO_AngleConstraintControlsType::create(requestedType);
    if (!sunAzimuthAngles_Accessor) {
      throw uci::base::UCIException("Error in enableSunAzimuthAngles(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sunAzimuthAngles_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearSunAzimuthAngles() noexcept {
  sunAzimuthAngles_Accessor.reset();
  return *this;
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_CollectionConstraintsSettingsType::getSweepSpeed_() const {
  if (sweepSpeed_Accessor) {
    return *sweepSpeed_Accessor;
  }
  throw uci::base::UCIException("Error in getSweepSpeed(): An attempt was made to get an optional field that was not enabled, call hasSweepSpeed() to determine if it is safe to call getSweepSpeed()");
}

const uci::type::PO_SweepSpeedConstraintControlsType& PO_CollectionConstraintsSettingsType::getSweepSpeed() const {
  return getSweepSpeed_();
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_CollectionConstraintsSettingsType::getSweepSpeed() {
  return getSweepSpeed_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setSweepSpeed(const uci::type::PO_SweepSpeedConstraintControlsType& accessor) {
  enableSweepSpeed();
  if (&accessor != sweepSpeed_Accessor.get()) {
    sweepSpeed_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasSweepSpeed() const noexcept {
  return static_cast<bool>(sweepSpeed_Accessor);
}

uci::type::PO_SweepSpeedConstraintControlsType& PO_CollectionConstraintsSettingsType::enableSweepSpeed(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_SweepSpeedConstraintControlsType : type};
  if ((!sweepSpeed_Accessor) || (sweepSpeed_Accessor->getAccessorType() != requestedType)) {
    sweepSpeed_Accessor = PO_SweepSpeedConstraintControlsType::create(requestedType);
    if (!sweepSpeed_Accessor) {
      throw uci::base::UCIException("Error in enableSweepSpeed(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sweepSpeed_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearSweepSpeed() noexcept {
  sweepSpeed_Accessor.reset();
  return *this;
}

uci::type::PO_GimbalOrientationConstraintType& PO_CollectionConstraintsSettingsType::getGimbalOrientation_() const {
  if (gimbalOrientation_Accessor) {
    return *gimbalOrientation_Accessor;
  }
  throw uci::base::UCIException("Error in getGimbalOrientation(): An attempt was made to get an optional field that was not enabled, call hasGimbalOrientation() to determine if it is safe to call getGimbalOrientation()");
}

const uci::type::PO_GimbalOrientationConstraintType& PO_CollectionConstraintsSettingsType::getGimbalOrientation() const {
  return getGimbalOrientation_();
}

uci::type::PO_GimbalOrientationConstraintType& PO_CollectionConstraintsSettingsType::getGimbalOrientation() {
  return getGimbalOrientation_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::setGimbalOrientation(const uci::type::PO_GimbalOrientationConstraintType& accessor) {
  enableGimbalOrientation();
  if (&accessor != gimbalOrientation_Accessor.get()) {
    gimbalOrientation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CollectionConstraintsSettingsType::hasGimbalOrientation() const noexcept {
  return static_cast<bool>(gimbalOrientation_Accessor);
}

uci::type::PO_GimbalOrientationConstraintType& PO_CollectionConstraintsSettingsType::enableGimbalOrientation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_GimbalOrientationConstraintType : type};
  if ((!gimbalOrientation_Accessor) || (gimbalOrientation_Accessor->getAccessorType() != requestedType)) {
    gimbalOrientation_Accessor = PO_GimbalOrientationConstraintType::create(requestedType);
    if (!gimbalOrientation_Accessor) {
      throw uci::base::UCIException("Error in enableGimbalOrientation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *gimbalOrientation_Accessor;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::clearGimbalOrientation() noexcept {
  gimbalOrientation_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_CollectionConstraintsSettingsType> PO_CollectionConstraintsSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionConstraintsSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_CollectionConstraintsSettingsType) ? boost::make_unique<PO_CollectionConstraintsSettingsType>() : nullptr;
}

/**  */
namespace PO_CollectionConstraintsSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_CollectionConstraintsSettingsType"};
constexpr const char* MapAngle_Name{"MapAngle"};
constexpr const char* GrazingAngle_Name{"GrazingAngle"};
constexpr const char* LookAngle_Name{"LookAngle"};
constexpr const char* ElevationAngle_Name{"ElevationAngle"};
constexpr const char* SlantRange_Name{"SlantRange"};
constexpr const char* CollectionPattern_Name{"CollectionPattern"};
constexpr const char* SunElevAngles_Name{"SunElevAngles"};
constexpr const char* SunAzimuthAngles_Name{"SunAzimuthAngles"};
constexpr const char* SweepSpeed_Name{"SweepSpeed"};
constexpr const char* GimbalOrientation_Name{"GimbalOrientation"};

} // namespace PO_CollectionConstraintsSettingsType_Names

void PO_CollectionConstraintsSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CollectionConstraintsSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CollectionConstraintsSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::MapAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableMapAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::GrazingAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableGrazingAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::LookAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableLookAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::ElevationAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableElevationAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SlantRange_Name) {
      PO_SlantRangeConstraintControlsType::deserialize(valueType.second, accessor.enableSlantRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::CollectionPattern_Name) {
      PO_CollectionPatternConstraintControlsType::deserialize(valueType.second, accessor.enableCollectionPattern(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SunElevAngles_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableSunElevAngles(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SunAzimuthAngles_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableSunAzimuthAngles(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SweepSpeed_Name) {
      PO_SweepSpeedConstraintControlsType::deserialize(valueType.second, accessor.enableSweepSpeed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::GimbalOrientation_Name) {
      PO_GimbalOrientationConstraintType::deserialize(valueType.second, accessor.enableGimbalOrientation(), nodeName, nsPrefix);
    }
  }
}

std::string PO_CollectionConstraintsSettingsType::serialize(const uci::type::PO_CollectionConstraintsSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_CollectionConstraintsSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CollectionConstraintsSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasMapAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getMapAngle(), node, PO_CollectionConstraintsSettingsType_Names::MapAngle_Name);
  }
  if (accessor.hasGrazingAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getGrazingAngle(), node, PO_CollectionConstraintsSettingsType_Names::GrazingAngle_Name);
  }
  if (accessor.hasLookAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getLookAngle(), node, PO_CollectionConstraintsSettingsType_Names::LookAngle_Name);
  }
  if (accessor.hasElevationAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getElevationAngle(), node, PO_CollectionConstraintsSettingsType_Names::ElevationAngle_Name);
  }
  if (accessor.hasSlantRange()) {
    PO_SlantRangeConstraintControlsType::serialize(accessor.getSlantRange(), node, PO_CollectionConstraintsSettingsType_Names::SlantRange_Name);
  }
  if (accessor.hasCollectionPattern()) {
    PO_CollectionPatternConstraintControlsType::serialize(accessor.getCollectionPattern(), node, PO_CollectionConstraintsSettingsType_Names::CollectionPattern_Name);
  }
  if (accessor.hasSunElevAngles()) {
    PO_AngleConstraintControlsType::serialize(accessor.getSunElevAngles(), node, PO_CollectionConstraintsSettingsType_Names::SunElevAngles_Name);
  }
  if (accessor.hasSunAzimuthAngles()) {
    PO_AngleConstraintControlsType::serialize(accessor.getSunAzimuthAngles(), node, PO_CollectionConstraintsSettingsType_Names::SunAzimuthAngles_Name);
  }
  if (accessor.hasSweepSpeed()) {
    PO_SweepSpeedConstraintControlsType::serialize(accessor.getSweepSpeed(), node, PO_CollectionConstraintsSettingsType_Names::SweepSpeed_Name);
  }
  if (accessor.hasGimbalOrientation()) {
    PO_GimbalOrientationConstraintType::serialize(accessor.getGimbalOrientation(), node, PO_CollectionConstraintsSettingsType_Names::GimbalOrientation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_CollectionConstraintsSettingsType>().release());
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CollectionConstraintsSettingsType::create(const uci::type::PO_CollectionConstraintsSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_CollectionConstraintsSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_CollectionConstraintsSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_CollectionConstraintsSettingsType::destroy(uci::type::PO_CollectionConstraintsSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_CollectionConstraintsSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

