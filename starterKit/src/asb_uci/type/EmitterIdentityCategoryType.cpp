/** @file EmitterIdentityCategoryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EmitterIdentityCategoryType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommunicationsEmitterIdentityType.h"
#include "asb_uci/type/JammerEmitterIdentityType.h"
#include "asb_uci/type/MissileEmitterIdentityType.h"
#include "asb_uci/type/RadarEmitterIdentityType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommunicationsEmitterIdentityType.h"
#include "uci/type/EmitterIdentityCategoryType.h"
#include "uci/type/JammerEmitterIdentityType.h"
#include "uci/type/MissileEmitterIdentityType.h"
#include "uci/type/RadarEmitterIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterIdentityCategoryType::EmitterIdentityCategoryType() = default;

EmitterIdentityCategoryType::~EmitterIdentityCategoryType() = default;

void EmitterIdentityCategoryType::copy(const uci::type::EmitterIdentityCategoryType& accessor) {
  copyImpl(accessor, false);
}

void EmitterIdentityCategoryType::copyImpl(const uci::type::EmitterIdentityCategoryType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterIdentityCategoryType&>(accessor);
    if (accessorImpl.radar_Accessor) {
      setRadar(*(accessorImpl.radar_Accessor));
    } else {
      radar_Accessor.reset();
    }
    if (accessorImpl.communications_Accessor) {
      setCommunications(*(accessorImpl.communications_Accessor));
    } else {
      communications_Accessor.reset();
    }
    if (accessorImpl.jammer_Accessor) {
      setJammer(*(accessorImpl.jammer_Accessor));
    } else {
      jammer_Accessor.reset();
    }
    if (accessorImpl.missile_Accessor) {
      setMissile(*(accessorImpl.missile_Accessor));
    } else {
      missile_Accessor.reset();
    }
  }
}

void EmitterIdentityCategoryType::reset() noexcept {
  radar_Accessor.reset();
  communications_Accessor.reset();
  jammer_Accessor.reset();
  missile_Accessor.reset();
}

uci::type::EmitterIdentityCategoryType::EmitterIdentityCategoryTypeChoice EmitterIdentityCategoryType::getEmitterIdentityCategoryTypeChoiceOrdinal() const noexcept {
  if (radar_Accessor) {
    return EMITTERIDENTITYCATEGORYTYPE_CHOICE_RADAR;
  }
  if (communications_Accessor) {
    return EMITTERIDENTITYCATEGORYTYPE_CHOICE_COMMUNICATIONS;
  }
  if (jammer_Accessor) {
    return EMITTERIDENTITYCATEGORYTYPE_CHOICE_JAMMER;
  }
  if (missile_Accessor) {
    return EMITTERIDENTITYCATEGORYTYPE_CHOICE_MISSILE;
  }
  return EMITTERIDENTITYCATEGORYTYPE_CHOICE_NONE;
}

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::setEmitterIdentityCategoryTypeChoiceOrdinal(uci::type::EmitterIdentityCategoryType::EmitterIdentityCategoryTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case EMITTERIDENTITYCATEGORYTYPE_CHOICE_RADAR:
      chooseRadar("setEmitterIdentityCategoryTypeChoiceOrdinal", type);
      break;
    case EMITTERIDENTITYCATEGORYTYPE_CHOICE_COMMUNICATIONS:
      chooseCommunications("setEmitterIdentityCategoryTypeChoiceOrdinal", type);
      break;
    case EMITTERIDENTITYCATEGORYTYPE_CHOICE_JAMMER:
      chooseJammer("setEmitterIdentityCategoryTypeChoiceOrdinal", type);
      break;
    case EMITTERIDENTITYCATEGORYTYPE_CHOICE_MISSILE:
      chooseMissile("setEmitterIdentityCategoryTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEmitterIdentityCategoryTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::RadarEmitterIdentityType& EmitterIdentityCategoryType::getRadar_() const {
  if (radar_Accessor) {
    return *radar_Accessor;
  }
  throw uci::base::UCIException("Error in getRadar(): Unable to get Radar, field not selected");
}

const uci::type::RadarEmitterIdentityType& EmitterIdentityCategoryType::getRadar() const {
  return getRadar_();
}

uci::type::RadarEmitterIdentityType& EmitterIdentityCategoryType::getRadar() {
  return getRadar_();
}

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::setRadar(const uci::type::RadarEmitterIdentityType& accessor) {
  chooseRadar();
  if (&accessor != radar_Accessor.get()) {
    radar_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterIdentityCategoryType::isRadar() const noexcept {
  return static_cast<bool>(radar_Accessor);
}

uci::type::RadarEmitterIdentityType& EmitterIdentityCategoryType::chooseRadar(const std::string& method, uci::base::accessorType::AccessorType type) {
  communications_Accessor.reset();
  jammer_Accessor.reset();
  missile_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::radarEmitterIdentityType : type};
  if ((!radar_Accessor) || (radar_Accessor->getAccessorType() != requestedType)) {
    radar_Accessor = RadarEmitterIdentityType::create(type);
    if (!radar_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *radar_Accessor;
}

uci::type::RadarEmitterIdentityType& EmitterIdentityCategoryType::chooseRadar(uci::base::accessorType::AccessorType type) {
  return chooseRadar("chooseRadar", type);
}

uci::type::CommunicationsEmitterIdentityType& EmitterIdentityCategoryType::getCommunications_() const {
  if (communications_Accessor) {
    return *communications_Accessor;
  }
  throw uci::base::UCIException("Error in getCommunications(): Unable to get Communications, field not selected");
}

const uci::type::CommunicationsEmitterIdentityType& EmitterIdentityCategoryType::getCommunications() const {
  return getCommunications_();
}

uci::type::CommunicationsEmitterIdentityType& EmitterIdentityCategoryType::getCommunications() {
  return getCommunications_();
}

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::setCommunications(const uci::type::CommunicationsEmitterIdentityType& accessor) {
  chooseCommunications();
  if (&accessor != communications_Accessor.get()) {
    communications_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterIdentityCategoryType::isCommunications() const noexcept {
  return static_cast<bool>(communications_Accessor);
}

uci::type::CommunicationsEmitterIdentityType& EmitterIdentityCategoryType::chooseCommunications(const std::string& method, uci::base::accessorType::AccessorType type) {
  radar_Accessor.reset();
  jammer_Accessor.reset();
  missile_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::communicationsEmitterIdentityType : type};
  if ((!communications_Accessor) || (communications_Accessor->getAccessorType() != requestedType)) {
    communications_Accessor = CommunicationsEmitterIdentityType::create(type);
    if (!communications_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *communications_Accessor;
}

uci::type::CommunicationsEmitterIdentityType& EmitterIdentityCategoryType::chooseCommunications(uci::base::accessorType::AccessorType type) {
  return chooseCommunications("chooseCommunications", type);
}

uci::type::JammerEmitterIdentityType& EmitterIdentityCategoryType::getJammer_() const {
  if (jammer_Accessor) {
    return *jammer_Accessor;
  }
  throw uci::base::UCIException("Error in getJammer(): Unable to get Jammer, field not selected");
}

const uci::type::JammerEmitterIdentityType& EmitterIdentityCategoryType::getJammer() const {
  return getJammer_();
}

uci::type::JammerEmitterIdentityType& EmitterIdentityCategoryType::getJammer() {
  return getJammer_();
}

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::setJammer(const uci::type::JammerEmitterIdentityType& accessor) {
  chooseJammer();
  if (&accessor != jammer_Accessor.get()) {
    jammer_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterIdentityCategoryType::isJammer() const noexcept {
  return static_cast<bool>(jammer_Accessor);
}

uci::type::JammerEmitterIdentityType& EmitterIdentityCategoryType::chooseJammer(const std::string& method, uci::base::accessorType::AccessorType type) {
  radar_Accessor.reset();
  communications_Accessor.reset();
  missile_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::jammerEmitterIdentityType : type};
  if ((!jammer_Accessor) || (jammer_Accessor->getAccessorType() != requestedType)) {
    jammer_Accessor = JammerEmitterIdentityType::create(type);
    if (!jammer_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *jammer_Accessor;
}

uci::type::JammerEmitterIdentityType& EmitterIdentityCategoryType::chooseJammer(uci::base::accessorType::AccessorType type) {
  return chooseJammer("chooseJammer", type);
}

uci::type::MissileEmitterIdentityType& EmitterIdentityCategoryType::getMissile_() const {
  if (missile_Accessor) {
    return *missile_Accessor;
  }
  throw uci::base::UCIException("Error in getMissile(): Unable to get Missile, field not selected");
}

const uci::type::MissileEmitterIdentityType& EmitterIdentityCategoryType::getMissile() const {
  return getMissile_();
}

uci::type::MissileEmitterIdentityType& EmitterIdentityCategoryType::getMissile() {
  return getMissile_();
}

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::setMissile(const uci::type::MissileEmitterIdentityType& accessor) {
  chooseMissile();
  if (&accessor != missile_Accessor.get()) {
    missile_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EmitterIdentityCategoryType::isMissile() const noexcept {
  return static_cast<bool>(missile_Accessor);
}

uci::type::MissileEmitterIdentityType& EmitterIdentityCategoryType::chooseMissile(const std::string& method, uci::base::accessorType::AccessorType type) {
  radar_Accessor.reset();
  communications_Accessor.reset();
  jammer_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missileEmitterIdentityType : type};
  if ((!missile_Accessor) || (missile_Accessor->getAccessorType() != requestedType)) {
    missile_Accessor = MissileEmitterIdentityType::create(type);
    if (!missile_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missile_Accessor;
}

uci::type::MissileEmitterIdentityType& EmitterIdentityCategoryType::chooseMissile(uci::base::accessorType::AccessorType type) {
  return chooseMissile("chooseMissile", type);
}

std::unique_ptr<EmitterIdentityCategoryType> EmitterIdentityCategoryType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterIdentityCategoryType : type};
  return (requestedType == uci::type::accessorType::emitterIdentityCategoryType) ? boost::make_unique<EmitterIdentityCategoryType>() : nullptr;
}

/**  */
namespace EmitterIdentityCategoryType_Names {

constexpr const char* Extern_Type_Name{"EmitterIdentityCategoryType"};
constexpr const char* Radar_Name{"Radar"};
constexpr const char* Communications_Name{"Communications"};
constexpr const char* Jammer_Name{"Jammer"};
constexpr const char* Missile_Name{"Missile"};

} // namespace EmitterIdentityCategoryType_Names

void EmitterIdentityCategoryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterIdentityCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterIdentityCategoryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterIdentityCategoryType_Names::Radar_Name) {
      RadarEmitterIdentityType::deserialize(valueType.second, accessor.chooseRadar(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterIdentityCategoryType_Names::Communications_Name) {
      CommunicationsEmitterIdentityType::deserialize(valueType.second, accessor.chooseCommunications(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterIdentityCategoryType_Names::Jammer_Name) {
      JammerEmitterIdentityType::deserialize(valueType.second, accessor.chooseJammer(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterIdentityCategoryType_Names::Missile_Name) {
      MissileEmitterIdentityType::deserialize(valueType.second, accessor.chooseMissile(), nodeName, nsPrefix);
    }
  }
}

std::string EmitterIdentityCategoryType::serialize(const uci::type::EmitterIdentityCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterIdentityCategoryType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterIdentityCategoryType_Names::Extern_Type_Name);
  }
  if (accessor.isRadar()) {
    RadarEmitterIdentityType::serialize(accessor.getRadar(), node, EmitterIdentityCategoryType_Names::Radar_Name);
  } else if (accessor.isCommunications()) {
    CommunicationsEmitterIdentityType::serialize(accessor.getCommunications(), node, EmitterIdentityCategoryType_Names::Communications_Name);
  } else if (accessor.isJammer()) {
    JammerEmitterIdentityType::serialize(accessor.getJammer(), node, EmitterIdentityCategoryType_Names::Jammer_Name);
  } else if (accessor.isMissile()) {
    MissileEmitterIdentityType::serialize(accessor.getMissile(), node, EmitterIdentityCategoryType_Names::Missile_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterIdentityCategoryType>().release());
}

uci::type::EmitterIdentityCategoryType& EmitterIdentityCategoryType::create(const uci::type::EmitterIdentityCategoryType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterIdentityCategoryType> newAccessor{boost::make_unique<asb_uci::type::EmitterIdentityCategoryType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterIdentityCategoryType::destroy(uci::type::EmitterIdentityCategoryType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterIdentityCategoryType*>(&accessor);
}

} // namespace type

} // namespace uci

