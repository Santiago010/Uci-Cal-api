/** @file SubCapabilityDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SubCapabilityDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ESM_LocationType.h"
#include "../../../include/asb_uci/type/ESM_SubcapabilityGeolocationType.h"
#include "../../../include/asb_uci/type/ESM_TargetType.h"
#include "../../../include/asb_uci/type/FrequencyRangeType.h"
#include "../../../include/asb_uci/type/PulseDataCollectCommandType.h"
#include "../../../include/asb_uci/type/SelectAntennaType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_LocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_SubcapabilityGeolocationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ESM_TargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/FrequencyRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PulseDataCollectCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SelectAntennaType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubCapabilityDetailsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubCapabilityDetailsType::SubCapabilityDetailsType()
  : frequencyRestriction_Accessor{boost::make_unique<FrequencyRestriction>(0, SIZE_MAX)},
    targetEmitterData_Accessor{boost::make_unique<TargetEmitterData>(0, SIZE_MAX)} {
}

SubCapabilityDetailsType::~SubCapabilityDetailsType() = default;

void SubCapabilityDetailsType::copy(const uci::type::SubCapabilityDetailsType& accessor) {
  copyImpl(accessor, false);
}

void SubCapabilityDetailsType::copyImpl(const uci::type::SubCapabilityDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubCapabilityDetailsType&>(accessor);
    if (accessorImpl.selectAntenna_Accessor) {
      setSelectAntenna(*(accessorImpl.selectAntenna_Accessor));
    } else {
      selectAntenna_Accessor.reset();
    }
    setFrequencyRestriction(*(accessorImpl.frequencyRestriction_Accessor));
    setTargetEmitterData(*(accessorImpl.targetEmitterData_Accessor));
    if (accessorImpl.eSM_Location_Accessor) {
      setESM_Location(*(accessorImpl.eSM_Location_Accessor));
    } else {
      eSM_Location_Accessor.reset();
    }
    if (accessorImpl.pulseDataCollection_Accessor) {
      setPulseDataCollection(*(accessorImpl.pulseDataCollection_Accessor));
    } else {
      pulseDataCollection_Accessor.reset();
    }
    if (accessorImpl.geolocation_Accessor) {
      setGeolocation(*(accessorImpl.geolocation_Accessor));
    } else {
      geolocation_Accessor.reset();
    }
  }
}

void SubCapabilityDetailsType::reset() noexcept {
  selectAntenna_Accessor.reset();
  frequencyRestriction_Accessor->reset();
  targetEmitterData_Accessor->reset();
  eSM_Location_Accessor.reset();
  pulseDataCollection_Accessor.reset();
  geolocation_Accessor.reset();
}

uci::type::SelectAntennaType& SubCapabilityDetailsType::getSelectAntenna_() const {
  if (selectAntenna_Accessor) {
    return *selectAntenna_Accessor;
  }
  throw uci::base::UCIException("Error in getSelectAntenna(): An attempt was made to get an optional field that was not enabled, call hasSelectAntenna() to determine if it is safe to call getSelectAntenna()");
}

const uci::type::SelectAntennaType& SubCapabilityDetailsType::getSelectAntenna() const {
  return getSelectAntenna_();
}

uci::type::SelectAntennaType& SubCapabilityDetailsType::getSelectAntenna() {
  return getSelectAntenna_();
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::setSelectAntenna(const uci::type::SelectAntennaType& accessor) {
  enableSelectAntenna();
  if (&accessor != selectAntenna_Accessor.get()) {
    selectAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubCapabilityDetailsType::hasSelectAntenna() const noexcept {
  return static_cast<bool>(selectAntenna_Accessor);
}

uci::type::SelectAntennaType& SubCapabilityDetailsType::enableSelectAntenna(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectAntennaType : type};
  if ((!selectAntenna_Accessor) || (selectAntenna_Accessor->getAccessorType() != requestedType)) {
    selectAntenna_Accessor = SelectAntennaType::create(requestedType);
    if (!selectAntenna_Accessor) {
      throw uci::base::UCIException("Error in enableSelectAntenna(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *selectAntenna_Accessor;
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::clearSelectAntenna() noexcept {
  selectAntenna_Accessor.reset();
  return *this;
}

const uci::type::SubCapabilityDetailsType::FrequencyRestriction& SubCapabilityDetailsType::getFrequencyRestriction() const {
  return *frequencyRestriction_Accessor;
}

uci::type::SubCapabilityDetailsType::FrequencyRestriction& SubCapabilityDetailsType::getFrequencyRestriction() {
  return *frequencyRestriction_Accessor;
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::setFrequencyRestriction(const uci::type::SubCapabilityDetailsType::FrequencyRestriction& accessor) {
  if (&accessor != frequencyRestriction_Accessor.get()) {
    frequencyRestriction_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SubCapabilityDetailsType::TargetEmitterData& SubCapabilityDetailsType::getTargetEmitterData() const {
  return *targetEmitterData_Accessor;
}

uci::type::SubCapabilityDetailsType::TargetEmitterData& SubCapabilityDetailsType::getTargetEmitterData() {
  return *targetEmitterData_Accessor;
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::setTargetEmitterData(const uci::type::SubCapabilityDetailsType::TargetEmitterData& accessor) {
  if (&accessor != targetEmitterData_Accessor.get()) {
    targetEmitterData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ESM_LocationType& SubCapabilityDetailsType::getESM_Location_() const {
  if (eSM_Location_Accessor) {
    return *eSM_Location_Accessor;
  }
  throw uci::base::UCIException("Error in getESM_Location(): An attempt was made to get an optional field that was not enabled, call hasESM_Location() to determine if it is safe to call getESM_Location()");
}

const uci::type::ESM_LocationType& SubCapabilityDetailsType::getESM_Location() const {
  return getESM_Location_();
}

uci::type::ESM_LocationType& SubCapabilityDetailsType::getESM_Location() {
  return getESM_Location_();
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::setESM_Location(const uci::type::ESM_LocationType& accessor) {
  enableESM_Location();
  if (&accessor != eSM_Location_Accessor.get()) {
    eSM_Location_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubCapabilityDetailsType::hasESM_Location() const noexcept {
  return static_cast<bool>(eSM_Location_Accessor);
}

uci::type::ESM_LocationType& SubCapabilityDetailsType::enableESM_Location(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_LocationType : type};
  if ((!eSM_Location_Accessor) || (eSM_Location_Accessor->getAccessorType() != requestedType)) {
    eSM_Location_Accessor = ESM_LocationType::create(requestedType);
    if (!eSM_Location_Accessor) {
      throw uci::base::UCIException("Error in enableESM_Location(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eSM_Location_Accessor;
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::clearESM_Location() noexcept {
  eSM_Location_Accessor.reset();
  return *this;
}

uci::type::PulseDataCollectCommandType& SubCapabilityDetailsType::getPulseDataCollection_() const {
  if (pulseDataCollection_Accessor) {
    return *pulseDataCollection_Accessor;
  }
  throw uci::base::UCIException("Error in getPulseDataCollection(): An attempt was made to get an optional field that was not enabled, call hasPulseDataCollection() to determine if it is safe to call getPulseDataCollection()");
}

const uci::type::PulseDataCollectCommandType& SubCapabilityDetailsType::getPulseDataCollection() const {
  return getPulseDataCollection_();
}

uci::type::PulseDataCollectCommandType& SubCapabilityDetailsType::getPulseDataCollection() {
  return getPulseDataCollection_();
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::setPulseDataCollection(const uci::type::PulseDataCollectCommandType& accessor) {
  enablePulseDataCollection();
  if (&accessor != pulseDataCollection_Accessor.get()) {
    pulseDataCollection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubCapabilityDetailsType::hasPulseDataCollection() const noexcept {
  return static_cast<bool>(pulseDataCollection_Accessor);
}

uci::type::PulseDataCollectCommandType& SubCapabilityDetailsType::enablePulseDataCollection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pulseDataCollectCommandType : type};
  if ((!pulseDataCollection_Accessor) || (pulseDataCollection_Accessor->getAccessorType() != requestedType)) {
    pulseDataCollection_Accessor = PulseDataCollectCommandType::create(requestedType);
    if (!pulseDataCollection_Accessor) {
      throw uci::base::UCIException("Error in enablePulseDataCollection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pulseDataCollection_Accessor;
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::clearPulseDataCollection() noexcept {
  pulseDataCollection_Accessor.reset();
  return *this;
}

uci::type::ESM_SubcapabilityGeolocationType& SubCapabilityDetailsType::getGeolocation_() const {
  if (geolocation_Accessor) {
    return *geolocation_Accessor;
  }
  throw uci::base::UCIException("Error in getGeolocation(): An attempt was made to get an optional field that was not enabled, call hasGeolocation() to determine if it is safe to call getGeolocation()");
}

const uci::type::ESM_SubcapabilityGeolocationType& SubCapabilityDetailsType::getGeolocation() const {
  return getGeolocation_();
}

uci::type::ESM_SubcapabilityGeolocationType& SubCapabilityDetailsType::getGeolocation() {
  return getGeolocation_();
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::setGeolocation(const uci::type::ESM_SubcapabilityGeolocationType& accessor) {
  enableGeolocation();
  if (&accessor != geolocation_Accessor.get()) {
    geolocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SubCapabilityDetailsType::hasGeolocation() const noexcept {
  return static_cast<bool>(geolocation_Accessor);
}

uci::type::ESM_SubcapabilityGeolocationType& SubCapabilityDetailsType::enableGeolocation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eSM_SubcapabilityGeolocationType : type};
  if ((!geolocation_Accessor) || (geolocation_Accessor->getAccessorType() != requestedType)) {
    geolocation_Accessor = ESM_SubcapabilityGeolocationType::create(requestedType);
    if (!geolocation_Accessor) {
      throw uci::base::UCIException("Error in enableGeolocation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geolocation_Accessor;
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::clearGeolocation() noexcept {
  geolocation_Accessor.reset();
  return *this;
}

std::unique_ptr<SubCapabilityDetailsType> SubCapabilityDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subCapabilityDetailsType : type};
  return (requestedType == uci::type::accessorType::subCapabilityDetailsType) ? boost::make_unique<SubCapabilityDetailsType>() : nullptr;
}

/**  */
namespace SubCapabilityDetailsType_Names {

constexpr const char* Extern_Type_Name{"SubCapabilityDetailsType"};
constexpr const char* SelectAntenna_Name{"SelectAntenna"};
constexpr const char* FrequencyRestriction_Name{"FrequencyRestriction"};
constexpr const char* TargetEmitterData_Name{"TargetEmitterData"};
constexpr const char* ESM_Location_Name{"ESM_Location"};
constexpr const char* PulseDataCollection_Name{"PulseDataCollection"};
constexpr const char* Geolocation_Name{"Geolocation"};

} // namespace SubCapabilityDetailsType_Names

void SubCapabilityDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubCapabilityDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubCapabilityDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubCapabilityDetailsType_Names::SelectAntenna_Name) {
      SelectAntennaType::deserialize(valueType.second, accessor.enableSelectAntenna(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubCapabilityDetailsType_Names::FrequencyRestriction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubCapabilityDetailsType::FrequencyRestriction& boundedList = accessor.getFrequencyRestriction();
        const uci::type::SubCapabilityDetailsType::FrequencyRestriction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubCapabilityDetailsType_Names::TargetEmitterData_Name) {
      uci::type::SubCapabilityDetailsType::TargetEmitterData& boundedList = accessor.getTargetEmitterData();
      const uci::type::SubCapabilityDetailsType::TargetEmitterData::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      asb_uci::type::ESM_TargetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubCapabilityDetailsType_Names::ESM_Location_Name) {
      ESM_LocationType::deserialize(valueType.second, accessor.enableESM_Location(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubCapabilityDetailsType_Names::PulseDataCollection_Name) {
      PulseDataCollectCommandType::deserialize(valueType.second, accessor.enablePulseDataCollection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubCapabilityDetailsType_Names::Geolocation_Name) {
      ESM_SubcapabilityGeolocationType::deserialize(valueType.second, accessor.enableGeolocation(), nodeName, nsPrefix);
    }
  }
}

std::string SubCapabilityDetailsType::serialize(const uci::type::SubCapabilityDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubCapabilityDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubCapabilityDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.hasSelectAntenna()) {
    SelectAntennaType::serialize(accessor.getSelectAntenna(), node, SubCapabilityDetailsType_Names::SelectAntenna_Name);
  }
  {
    const uci::type::SubCapabilityDetailsType::FrequencyRestriction& boundedList = accessor.getFrequencyRestriction();
    for (uci::type::SubCapabilityDetailsType::FrequencyRestriction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, SubCapabilityDetailsType_Names::FrequencyRestriction_Name);
    }
  }
  {
    const uci::type::SubCapabilityDetailsType::TargetEmitterData& boundedList = accessor.getTargetEmitterData();
    for (uci::type::SubCapabilityDetailsType::TargetEmitterData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ESM_TargetType::serialize(boundedList.at(i), node, SubCapabilityDetailsType_Names::TargetEmitterData_Name);
    }
  }
  if (accessor.hasESM_Location()) {
    ESM_LocationType::serialize(accessor.getESM_Location(), node, SubCapabilityDetailsType_Names::ESM_Location_Name);
  }
  if (accessor.hasPulseDataCollection()) {
    PulseDataCollectCommandType::serialize(accessor.getPulseDataCollection(), node, SubCapabilityDetailsType_Names::PulseDataCollection_Name);
  }
  if (accessor.hasGeolocation()) {
    ESM_SubcapabilityGeolocationType::serialize(accessor.getGeolocation(), node, SubCapabilityDetailsType_Names::Geolocation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubCapabilityDetailsType>().release());
}

uci::type::SubCapabilityDetailsType& SubCapabilityDetailsType::create(const uci::type::SubCapabilityDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubCapabilityDetailsType> newAccessor{boost::make_unique<asb_uci::type::SubCapabilityDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubCapabilityDetailsType::destroy(uci::type::SubCapabilityDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::SubCapabilityDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

