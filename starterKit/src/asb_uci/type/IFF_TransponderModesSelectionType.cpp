/** @file IFF_TransponderModesSelectionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_TransponderModesSelectionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IFF_Mode5DetailsType.h"
#include "../../../include/asb_uci/type/IFF_ModeS_Type.h"
#include "../../../include/asb_uci/type/OctalValueType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_Mode5DetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_ModeS_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_TransponderModesSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OctalValueType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_TransponderModesSelectionType::IFF_TransponderModesSelectionType() = default;

IFF_TransponderModesSelectionType::~IFF_TransponderModesSelectionType() = default;

void IFF_TransponderModesSelectionType::copy(const uci::type::IFF_TransponderModesSelectionType& accessor) {
  copyImpl(accessor, false);
}

void IFF_TransponderModesSelectionType::copyImpl(const uci::type::IFF_TransponderModesSelectionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const IFF_TransponderModesSelectionType&>(accessor);
    if (accessorImpl.mode1_Code_Accessor) {
      setMode1_Code(*(accessorImpl.mode1_Code_Accessor));
    } else {
      mode1_Code_Accessor.reset();
    }
    if (accessorImpl.mode2_Code_Accessor) {
      setMode2_Code(*(accessorImpl.mode2_Code_Accessor));
    } else {
      mode2_Code_Accessor.reset();
    }
    if (accessorImpl.mode3A_Code_Accessor) {
      setMode3A_Code(*(accessorImpl.mode3A_Code_Accessor));
    } else {
      mode3A_Code_Accessor.reset();
    }
    setModeC_Enable(accessorImpl.modeC_Enable_Accessor);
    if (accessorImpl.mode5_Accessor) {
      setMode5(*(accessorImpl.mode5_Accessor));
    } else {
      mode5_Accessor.reset();
    }
    if (accessorImpl.modeS_Accessor) {
      setModeS(*(accessorImpl.modeS_Accessor));
    } else {
      modeS_Accessor.reset();
    }
    setADS_B_Enable(accessorImpl.aDS_B_Enable_Accessor);
  }
}

void IFF_TransponderModesSelectionType::reset() noexcept {
  mode1_Code_Accessor.reset();
  mode2_Code_Accessor.reset();
  mode3A_Code_Accessor.reset();
  modeC_Enable_Accessor = false;
  mode5_Accessor.reset();
  modeS_Accessor.reset();
  aDS_B_Enable_Accessor = false;
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode1_Code_() const {
  if (mode1_Code_Accessor) {
    return *mode1_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getMode1_Code(): An attempt was made to get an optional field that was not enabled, call hasMode1_Code() to determine if it is safe to call getMode1_Code()");
}

const uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode1_Code() const {
  return getMode1_Code_();
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode1_Code() {
  return getMode1_Code_();
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode1_Code(const uci::type::OctalValueType& value) {
  return setMode1_Code(value.c_str());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode1_Code(const std::string& value) {
  return setMode1_Code(value.c_str());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode1_Code(const char* value) {
  enableMode1_Code().setStringValue(value);
  return *this;
}

bool IFF_TransponderModesSelectionType::hasMode1_Code() const noexcept {
  return static_cast<bool>(mode1_Code_Accessor);
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::enableMode1_Code(uci::base::accessorType::AccessorType type) {
  if (!mode1_Code_Accessor) {
    mode1_Code_Accessor = OctalValueType::create(type);
  }
  return *mode1_Code_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::clearMode1_Code() noexcept {
  mode1_Code_Accessor.reset();
  return *this;
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode2_Code_() const {
  if (mode2_Code_Accessor) {
    return *mode2_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getMode2_Code(): An attempt was made to get an optional field that was not enabled, call hasMode2_Code() to determine if it is safe to call getMode2_Code()");
}

const uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode2_Code() const {
  return getMode2_Code_();
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode2_Code() {
  return getMode2_Code_();
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode2_Code(const uci::type::OctalValueType& value) {
  return setMode2_Code(value.c_str());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode2_Code(const std::string& value) {
  return setMode2_Code(value.c_str());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode2_Code(const char* value) {
  enableMode2_Code().setStringValue(value);
  return *this;
}

bool IFF_TransponderModesSelectionType::hasMode2_Code() const noexcept {
  return static_cast<bool>(mode2_Code_Accessor);
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::enableMode2_Code(uci::base::accessorType::AccessorType type) {
  if (!mode2_Code_Accessor) {
    mode2_Code_Accessor = OctalValueType::create(type);
  }
  return *mode2_Code_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::clearMode2_Code() noexcept {
  mode2_Code_Accessor.reset();
  return *this;
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode3A_Code_() const {
  if (mode3A_Code_Accessor) {
    return *mode3A_Code_Accessor;
  }
  throw uci::base::UCIException("Error in getMode3A_Code(): An attempt was made to get an optional field that was not enabled, call hasMode3A_Code() to determine if it is safe to call getMode3A_Code()");
}

const uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode3A_Code() const {
  return getMode3A_Code_();
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::getMode3A_Code() {
  return getMode3A_Code_();
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode3A_Code(const uci::type::OctalValueType& value) {
  return setMode3A_Code(value.c_str());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode3A_Code(const std::string& value) {
  return setMode3A_Code(value.c_str());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode3A_Code(const char* value) {
  enableMode3A_Code().setStringValue(value);
  return *this;
}

bool IFF_TransponderModesSelectionType::hasMode3A_Code() const noexcept {
  return static_cast<bool>(mode3A_Code_Accessor);
}

uci::type::OctalValueType& IFF_TransponderModesSelectionType::enableMode3A_Code(uci::base::accessorType::AccessorType type) {
  if (!mode3A_Code_Accessor) {
    mode3A_Code_Accessor = OctalValueType::create(type);
  }
  return *mode3A_Code_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::clearMode3A_Code() noexcept {
  mode3A_Code_Accessor.reset();
  return *this;
}

xs::Boolean IFF_TransponderModesSelectionType::getModeC_Enable() const {
  return modeC_Enable_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setModeC_Enable(xs::Boolean value) {
  modeC_Enable_Accessor = value;
  return *this;
}


uci::type::IFF_Mode5DetailsType& IFF_TransponderModesSelectionType::getMode5_() const {
  if (mode5_Accessor) {
    return *mode5_Accessor;
  }
  throw uci::base::UCIException("Error in getMode5(): An attempt was made to get an optional field that was not enabled, call hasMode5() to determine if it is safe to call getMode5()");
}

const uci::type::IFF_Mode5DetailsType& IFF_TransponderModesSelectionType::getMode5() const {
  return getMode5_();
}

uci::type::IFF_Mode5DetailsType& IFF_TransponderModesSelectionType::getMode5() {
  return getMode5_();
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setMode5(const uci::type::IFF_Mode5DetailsType& accessor) {
  enableMode5();
  if (&accessor != mode5_Accessor.get()) {
    mode5_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_TransponderModesSelectionType::hasMode5() const noexcept {
  return static_cast<bool>(mode5_Accessor);
}

uci::type::IFF_Mode5DetailsType& IFF_TransponderModesSelectionType::enableMode5(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_Mode5DetailsType : type};
  if ((!mode5_Accessor) || (mode5_Accessor->getAccessorType() != requestedType)) {
    mode5_Accessor = IFF_Mode5DetailsType::create(requestedType);
    if (!mode5_Accessor) {
      throw uci::base::UCIException("Error in enableMode5(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mode5_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::clearMode5() noexcept {
  mode5_Accessor.reset();
  return *this;
}

uci::type::IFF_ModeS_Type& IFF_TransponderModesSelectionType::getModeS_() const {
  if (modeS_Accessor) {
    return *modeS_Accessor;
  }
  throw uci::base::UCIException("Error in getModeS(): An attempt was made to get an optional field that was not enabled, call hasModeS() to determine if it is safe to call getModeS()");
}

const uci::type::IFF_ModeS_Type& IFF_TransponderModesSelectionType::getModeS() const {
  return getModeS_();
}

uci::type::IFF_ModeS_Type& IFF_TransponderModesSelectionType::getModeS() {
  return getModeS_();
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setModeS(const uci::type::IFF_ModeS_Type& accessor) {
  enableModeS();
  if (&accessor != modeS_Accessor.get()) {
    modeS_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_TransponderModesSelectionType::hasModeS() const noexcept {
  return static_cast<bool>(modeS_Accessor);
}

uci::type::IFF_ModeS_Type& IFF_TransponderModesSelectionType::enableModeS(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_ModeS_Type : type};
  if ((!modeS_Accessor) || (modeS_Accessor->getAccessorType() != requestedType)) {
    modeS_Accessor = IFF_ModeS_Type::create(requestedType);
    if (!modeS_Accessor) {
      throw uci::base::UCIException("Error in enableModeS(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *modeS_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::clearModeS() noexcept {
  modeS_Accessor.reset();
  return *this;
}

xs::Boolean IFF_TransponderModesSelectionType::getADS_B_Enable() const {
  return aDS_B_Enable_Accessor;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::setADS_B_Enable(xs::Boolean value) {
  aDS_B_Enable_Accessor = value;
  return *this;
}


std::unique_ptr<IFF_TransponderModesSelectionType> IFF_TransponderModesSelectionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_TransponderModesSelectionType : type};
  return (requestedType == uci::type::accessorType::iFF_TransponderModesSelectionType) ? boost::make_unique<IFF_TransponderModesSelectionType>() : nullptr;
}

/**  */
namespace IFF_TransponderModesSelectionType_Names {

constexpr const char* Extern_Type_Name{"IFF_TransponderModesSelectionType"};
constexpr const char* Mode1_Code_Name{"Mode1_Code"};
constexpr const char* Mode2_Code_Name{"Mode2_Code"};
constexpr const char* Mode3A_Code_Name{"Mode3A_Code"};
constexpr const char* ModeC_Enable_Name{"ModeC_Enable"};
constexpr const char* Mode5_Name{"Mode5"};
constexpr const char* ModeS_Name{"ModeS"};
constexpr const char* ADS_B_Enable_Name{"ADS_B_Enable"};

} // namespace IFF_TransponderModesSelectionType_Names

void IFF_TransponderModesSelectionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_TransponderModesSelectionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_TransponderModesSelectionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::Mode1_Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMode1_Code(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::Mode2_Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMode2_Code(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::Mode3A_Code_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMode3A_Code(*value);
      }
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::ModeC_Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModeC_Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::Mode5_Name) {
      IFF_Mode5DetailsType::deserialize(valueType.second, accessor.enableMode5(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::ModeS_Name) {
      IFF_ModeS_Type::deserialize(valueType.second, accessor.enableModeS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_TransponderModesSelectionType_Names::ADS_B_Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setADS_B_Enable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string IFF_TransponderModesSelectionType::serialize(const uci::type::IFF_TransponderModesSelectionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_TransponderModesSelectionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_TransponderModesSelectionType_Names::Extern_Type_Name);
  }
  if (accessor.hasMode1_Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMode1_Code(), node, IFF_TransponderModesSelectionType_Names::Mode1_Code_Name);
  }
  if (accessor.hasMode2_Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMode2_Code(), node, IFF_TransponderModesSelectionType_Names::Mode2_Code_Name);
  }
  if (accessor.hasMode3A_Code()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMode3A_Code(), node, IFF_TransponderModesSelectionType_Names::Mode3A_Code_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getModeC_Enable(), node, IFF_TransponderModesSelectionType_Names::ModeC_Enable_Name);
  if (accessor.hasMode5()) {
    IFF_Mode5DetailsType::serialize(accessor.getMode5(), node, IFF_TransponderModesSelectionType_Names::Mode5_Name);
  }
  if (accessor.hasModeS()) {
    IFF_ModeS_Type::serialize(accessor.getModeS(), node, IFF_TransponderModesSelectionType_Names::ModeS_Name);
  }
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getADS_B_Enable(), node, IFF_TransponderModesSelectionType_Names::ADS_B_Enable_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_TransponderModesSelectionType>().release());
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModesSelectionType::create(const uci::type::IFF_TransponderModesSelectionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_TransponderModesSelectionType> newAccessor{boost::make_unique<asb_uci::type::IFF_TransponderModesSelectionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_TransponderModesSelectionType::destroy(uci::type::IFF_TransponderModesSelectionType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_TransponderModesSelectionType*>(&accessor);
}

} // namespace type

} // namespace uci

