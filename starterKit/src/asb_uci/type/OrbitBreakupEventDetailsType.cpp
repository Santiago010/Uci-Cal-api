/** @file OrbitBreakupEventDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitBreakupEventDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitCollisionType.h"
#include "../../../include/asb_uci/type/OrbitObjectBreakupType.h"
#include "../../../include/asb_uci/type/OrbitalConjunctionID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitBreakupEventDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitCollisionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitObjectBreakupType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalConjunctionID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitBreakupEventDetailsType::OrbitBreakupEventDetailsType() = default;

OrbitBreakupEventDetailsType::~OrbitBreakupEventDetailsType() = default;

void OrbitBreakupEventDetailsType::copy(const uci::type::OrbitBreakupEventDetailsType& accessor) {
  copyImpl(accessor, false);
}

void OrbitBreakupEventDetailsType::copyImpl(const uci::type::OrbitBreakupEventDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitBreakupEventDetailsType&>(accessor);
    if (accessorImpl.orbitalConjunctionID_Accessor) {
      setOrbitalConjunctionID(*(accessorImpl.orbitalConjunctionID_Accessor));
    } else {
      orbitalConjunctionID_Accessor.reset();
    }
    if (accessorImpl.collision_Accessor) {
      setCollision(*(accessorImpl.collision_Accessor));
    } else {
      collision_Accessor.reset();
    }
    if (accessorImpl.singleObjectBreakup_Accessor) {
      setSingleObjectBreakup(*(accessorImpl.singleObjectBreakup_Accessor));
    } else {
      singleObjectBreakup_Accessor.reset();
    }
  }
}

void OrbitBreakupEventDetailsType::reset() noexcept {
  orbitalConjunctionID_Accessor.reset();
  collision_Accessor.reset();
  singleObjectBreakup_Accessor.reset();
}

uci::type::OrbitBreakupEventDetailsType::OrbitBreakupEventDetailsTypeChoice OrbitBreakupEventDetailsType::getOrbitBreakupEventDetailsTypeChoiceOrdinal() const noexcept {
  if (orbitalConjunctionID_Accessor) {
    return ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_ORBITALCONJUNCTIONID;
  }
  if (collision_Accessor) {
    return ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_COLLISION;
  }
  if (singleObjectBreakup_Accessor) {
    return ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_SINGLEOBJECTBREAKUP;
  }
  return ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_NONE;
}

uci::type::OrbitBreakupEventDetailsType& OrbitBreakupEventDetailsType::setOrbitBreakupEventDetailsTypeChoiceOrdinal(uci::type::OrbitBreakupEventDetailsType::OrbitBreakupEventDetailsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_ORBITALCONJUNCTIONID:
      chooseOrbitalConjunctionID("setOrbitBreakupEventDetailsTypeChoiceOrdinal", type);
      break;
    case ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_COLLISION:
      chooseCollision("setOrbitBreakupEventDetailsTypeChoiceOrdinal", type);
      break;
    case ORBITBREAKUPEVENTDETAILSTYPE_CHOICE_SINGLEOBJECTBREAKUP:
      chooseSingleObjectBreakup("setOrbitBreakupEventDetailsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setOrbitBreakupEventDetailsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalConjunctionID_Type& OrbitBreakupEventDetailsType::getOrbitalConjunctionID_() const {
  if (orbitalConjunctionID_Accessor) {
    return *orbitalConjunctionID_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitalConjunctionID(): Unable to get OrbitalConjunctionID, field not selected");
}

const uci::type::OrbitalConjunctionID_Type& OrbitBreakupEventDetailsType::getOrbitalConjunctionID() const {
  return getOrbitalConjunctionID_();
}

uci::type::OrbitalConjunctionID_Type& OrbitBreakupEventDetailsType::getOrbitalConjunctionID() {
  return getOrbitalConjunctionID_();
}

uci::type::OrbitBreakupEventDetailsType& OrbitBreakupEventDetailsType::setOrbitalConjunctionID(const uci::type::OrbitalConjunctionID_Type& accessor) {
  chooseOrbitalConjunctionID();
  if (&accessor != orbitalConjunctionID_Accessor.get()) {
    orbitalConjunctionID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitBreakupEventDetailsType::isOrbitalConjunctionID() const noexcept {
  return static_cast<bool>(orbitalConjunctionID_Accessor);
}

uci::type::OrbitalConjunctionID_Type& OrbitBreakupEventDetailsType::chooseOrbitalConjunctionID(const std::string& method, uci::base::accessorType::AccessorType type) {
  collision_Accessor.reset();
  singleObjectBreakup_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalConjunctionID_Type : type};
  if ((!orbitalConjunctionID_Accessor) || (orbitalConjunctionID_Accessor->getAccessorType() != requestedType)) {
    orbitalConjunctionID_Accessor = OrbitalConjunctionID_Type::create(type);
    if (!orbitalConjunctionID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitalConjunctionID_Accessor;
}

uci::type::OrbitalConjunctionID_Type& OrbitBreakupEventDetailsType::chooseOrbitalConjunctionID(uci::base::accessorType::AccessorType type) {
  return chooseOrbitalConjunctionID("chooseOrbitalConjunctionID", type);
}

uci::type::OrbitCollisionType& OrbitBreakupEventDetailsType::getCollision_() const {
  if (collision_Accessor) {
    return *collision_Accessor;
  }
  throw uci::base::UCIException("Error in getCollision(): Unable to get Collision, field not selected");
}

const uci::type::OrbitCollisionType& OrbitBreakupEventDetailsType::getCollision() const {
  return getCollision_();
}

uci::type::OrbitCollisionType& OrbitBreakupEventDetailsType::getCollision() {
  return getCollision_();
}

uci::type::OrbitBreakupEventDetailsType& OrbitBreakupEventDetailsType::setCollision(const uci::type::OrbitCollisionType& accessor) {
  chooseCollision();
  if (&accessor != collision_Accessor.get()) {
    collision_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitBreakupEventDetailsType::isCollision() const noexcept {
  return static_cast<bool>(collision_Accessor);
}

uci::type::OrbitCollisionType& OrbitBreakupEventDetailsType::chooseCollision(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitalConjunctionID_Accessor.reset();
  singleObjectBreakup_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitCollisionType : type};
  if ((!collision_Accessor) || (collision_Accessor->getAccessorType() != requestedType)) {
    collision_Accessor = OrbitCollisionType::create(type);
    if (!collision_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collision_Accessor;
}

uci::type::OrbitCollisionType& OrbitBreakupEventDetailsType::chooseCollision(uci::base::accessorType::AccessorType type) {
  return chooseCollision("chooseCollision", type);
}

uci::type::OrbitObjectBreakupType& OrbitBreakupEventDetailsType::getSingleObjectBreakup_() const {
  if (singleObjectBreakup_Accessor) {
    return *singleObjectBreakup_Accessor;
  }
  throw uci::base::UCIException("Error in getSingleObjectBreakup(): Unable to get SingleObjectBreakup, field not selected");
}

const uci::type::OrbitObjectBreakupType& OrbitBreakupEventDetailsType::getSingleObjectBreakup() const {
  return getSingleObjectBreakup_();
}

uci::type::OrbitObjectBreakupType& OrbitBreakupEventDetailsType::getSingleObjectBreakup() {
  return getSingleObjectBreakup_();
}

uci::type::OrbitBreakupEventDetailsType& OrbitBreakupEventDetailsType::setSingleObjectBreakup(const uci::type::OrbitObjectBreakupType& accessor) {
  chooseSingleObjectBreakup();
  if (&accessor != singleObjectBreakup_Accessor.get()) {
    singleObjectBreakup_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitBreakupEventDetailsType::isSingleObjectBreakup() const noexcept {
  return static_cast<bool>(singleObjectBreakup_Accessor);
}

uci::type::OrbitObjectBreakupType& OrbitBreakupEventDetailsType::chooseSingleObjectBreakup(const std::string& method, uci::base::accessorType::AccessorType type) {
  orbitalConjunctionID_Accessor.reset();
  collision_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitObjectBreakupType : type};
  if ((!singleObjectBreakup_Accessor) || (singleObjectBreakup_Accessor->getAccessorType() != requestedType)) {
    singleObjectBreakup_Accessor = OrbitObjectBreakupType::create(type);
    if (!singleObjectBreakup_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *singleObjectBreakup_Accessor;
}

uci::type::OrbitObjectBreakupType& OrbitBreakupEventDetailsType::chooseSingleObjectBreakup(uci::base::accessorType::AccessorType type) {
  return chooseSingleObjectBreakup("chooseSingleObjectBreakup", type);
}

std::unique_ptr<OrbitBreakupEventDetailsType> OrbitBreakupEventDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitBreakupEventDetailsType : type};
  return (requestedType == uci::type::accessorType::orbitBreakupEventDetailsType) ? boost::make_unique<OrbitBreakupEventDetailsType>() : nullptr;
}

/**  */
namespace OrbitBreakupEventDetailsType_Names {

constexpr const char* Extern_Type_Name{"OrbitBreakupEventDetailsType"};
constexpr const char* OrbitalConjunctionID_Name{"OrbitalConjunctionID"};
constexpr const char* Collision_Name{"Collision"};
constexpr const char* SingleObjectBreakup_Name{"SingleObjectBreakup"};

} // namespace OrbitBreakupEventDetailsType_Names

void OrbitBreakupEventDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitBreakupEventDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitBreakupEventDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitBreakupEventDetailsType_Names::OrbitalConjunctionID_Name) {
      OrbitalConjunctionID_Type::deserialize(valueType.second, accessor.chooseOrbitalConjunctionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitBreakupEventDetailsType_Names::Collision_Name) {
      OrbitCollisionType::deserialize(valueType.second, accessor.chooseCollision(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitBreakupEventDetailsType_Names::SingleObjectBreakup_Name) {
      OrbitObjectBreakupType::deserialize(valueType.second, accessor.chooseSingleObjectBreakup(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitBreakupEventDetailsType::serialize(const uci::type::OrbitBreakupEventDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitBreakupEventDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitBreakupEventDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.isOrbitalConjunctionID()) {
    OrbitalConjunctionID_Type::serialize(accessor.getOrbitalConjunctionID(), node, OrbitBreakupEventDetailsType_Names::OrbitalConjunctionID_Name);
  } else if (accessor.isCollision()) {
    OrbitCollisionType::serialize(accessor.getCollision(), node, OrbitBreakupEventDetailsType_Names::Collision_Name);
  } else if (accessor.isSingleObjectBreakup()) {
    OrbitObjectBreakupType::serialize(accessor.getSingleObjectBreakup(), node, OrbitBreakupEventDetailsType_Names::SingleObjectBreakup_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitBreakupEventDetailsType& OrbitBreakupEventDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitBreakupEventDetailsType>().release());
}

uci::type::OrbitBreakupEventDetailsType& OrbitBreakupEventDetailsType::create(const uci::type::OrbitBreakupEventDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitBreakupEventDetailsType> newAccessor{boost::make_unique<asb_uci::type::OrbitBreakupEventDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitBreakupEventDetailsType::destroy(uci::type::OrbitBreakupEventDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitBreakupEventDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

