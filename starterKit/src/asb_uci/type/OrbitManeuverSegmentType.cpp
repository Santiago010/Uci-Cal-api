/** @file OrbitManeuverSegmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OrbitManeuverSegmentType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitManeuverSegmentID_Type.h"
#include "../../../include/asb_uci/type/OrbitPlanManeuverTypeEnum.h"
#include "../../../include/asb_uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../include/asb_uci/type/OrbitalManeuverDetailsBaseType.h"
#include "../../../include/asb_uci/type/PathSegmentSourceEnum.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitManeuverSegmentID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitManeuverSegmentType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanManeuverTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalKinematicsChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalManeuverDetailsBaseType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PathSegmentSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitManeuverSegmentType::OrbitManeuverSegmentType()
  : segmentID_Accessor{boost::make_unique<OrbitManeuverSegmentID_Type>()},
    source_Accessor{boost::make_unique<PathSegmentSourceEnum>()},
    endPoint_Accessor{boost::make_unique<OrbitalKinematicsChoiceType>()},
    maneuverType_Accessor{boost::make_unique<ManeuverType>(0, 11)} {
}

OrbitManeuverSegmentType::~OrbitManeuverSegmentType() = default;

void OrbitManeuverSegmentType::copy(const uci::type::OrbitManeuverSegmentType& accessor) {
  copyImpl(accessor, false);
}

void OrbitManeuverSegmentType::copyImpl(const uci::type::OrbitManeuverSegmentType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitManeuverSegmentType&>(accessor);
    setSegmentID(*(accessorImpl.segmentID_Accessor));
    setSource(*(accessorImpl.source_Accessor));
    setStartEpoch(accessorImpl.startEpoch_Accessor);
    setEndPoint(*(accessorImpl.endPoint_Accessor));
    setLocked(accessorImpl.locked_Accessor);
    setManeuverType(*(accessorImpl.maneuverType_Accessor));
    if (accessorImpl.deltaVelocity_Accessor) {
      setDeltaVelocity(*(accessorImpl.deltaVelocity_Accessor));
    } else {
      deltaVelocity_Accessor.reset();
    }
    if (accessorImpl.hasModified()) {
      setModified(accessorImpl.getModified());
    } else {
      clearModified();
    }
    if (accessorImpl.nextSegmentID_Accessor) {
      setNextSegmentID(*(accessorImpl.nextSegmentID_Accessor));
    } else {
      nextSegmentID_Accessor.reset();
    }
  }
}

void OrbitManeuverSegmentType::reset() noexcept {
  segmentID_Accessor->reset();
  source_Accessor->reset();
  startEpoch_Accessor = 0;
  endPoint_Accessor->reset();
  locked_Accessor = false;
  maneuverType_Accessor->reset();
  deltaVelocity_Accessor.reset();
  clearModified();
  nextSegmentID_Accessor.reset();
}

const uci::type::OrbitManeuverSegmentID_Type& OrbitManeuverSegmentType::getSegmentID() const {
  return *segmentID_Accessor;
}

uci::type::OrbitManeuverSegmentID_Type& OrbitManeuverSegmentType::getSegmentID() {
  return *segmentID_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setSegmentID(const uci::type::OrbitManeuverSegmentID_Type& accessor) {
  if (&accessor != segmentID_Accessor.get()) {
    segmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PathSegmentSourceEnum& OrbitManeuverSegmentType::getSource() const {
  return *source_Accessor;
}

uci::type::PathSegmentSourceEnum& OrbitManeuverSegmentType::getSource() {
  return *source_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setSource(const uci::type::PathSegmentSourceEnum& accessor) {
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setSource(uci::type::PathSegmentSourceEnum::EnumerationItem value) {
  source_Accessor->setValue(value);
  return *this;
}


uci::type::DateTimeTypeValue OrbitManeuverSegmentType::getStartEpoch() const {
  return startEpoch_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setStartEpoch(uci::type::DateTimeTypeValue value) {
  startEpoch_Accessor = value;
  return *this;
}


const uci::type::OrbitalKinematicsChoiceType& OrbitManeuverSegmentType::getEndPoint() const {
  return *endPoint_Accessor;
}

uci::type::OrbitalKinematicsChoiceType& OrbitManeuverSegmentType::getEndPoint() {
  return *endPoint_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setEndPoint(const uci::type::OrbitalKinematicsChoiceType& accessor) {
  if (&accessor != endPoint_Accessor.get()) {
    endPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean OrbitManeuverSegmentType::getLocked() const {
  return locked_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setLocked(xs::Boolean value) {
  locked_Accessor = value;
  return *this;
}


const uci::type::OrbitManeuverSegmentType::ManeuverType& OrbitManeuverSegmentType::getManeuverType() const {
  return *maneuverType_Accessor;
}

uci::type::OrbitManeuverSegmentType::ManeuverType& OrbitManeuverSegmentType::getManeuverType() {
  return *maneuverType_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setManeuverType(const uci::type::OrbitManeuverSegmentType::ManeuverType& accessor) {
  if (&accessor != maneuverType_Accessor.get()) {
    maneuverType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitManeuverSegmentType::getDeltaVelocity_() const {
  if (deltaVelocity_Accessor) {
    return *deltaVelocity_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaVelocity(): An attempt was made to get an optional field that was not enabled, call hasDeltaVelocity() to determine if it is safe to call getDeltaVelocity()");
}

const uci::type::OrbitalManeuverDetailsBaseType& OrbitManeuverSegmentType::getDeltaVelocity() const {
  return getDeltaVelocity_();
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitManeuverSegmentType::getDeltaVelocity() {
  return getDeltaVelocity_();
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setDeltaVelocity(const uci::type::OrbitalManeuverDetailsBaseType& accessor) {
  enableDeltaVelocity(accessor.getAccessorType());
  if (&accessor != deltaVelocity_Accessor.get()) {
    deltaVelocity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OrbitManeuverSegmentType::hasDeltaVelocity() const noexcept {
  return static_cast<bool>(deltaVelocity_Accessor);
}

uci::type::OrbitalManeuverDetailsBaseType& OrbitManeuverSegmentType::enableDeltaVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalManeuverDetailsBaseType : type};
  if ((!deltaVelocity_Accessor) || (deltaVelocity_Accessor->getAccessorType() != requestedType)) {
    deltaVelocity_Accessor = OrbitalManeuverDetailsBaseType::create(requestedType);
    if (!deltaVelocity_Accessor) {
      throw uci::base::UCIException("Error in enableDeltaVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *deltaVelocity_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::clearDeltaVelocity() noexcept {
  deltaVelocity_Accessor.reset();
  return *this;
}

xs::Boolean OrbitManeuverSegmentType::getModified() const {
  if (modified_Accessor) {
    return *modified_Accessor;
  }
  throw uci::base::UCIException("Error in getModified(): An attempt was made to get an optional field that was not enabled, call hasModified() to determine if it is safe to call getModified()");
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setModified(xs::Boolean value) {
  modified_Accessor = value;
  return *this;
}

bool OrbitManeuverSegmentType::hasModified() const noexcept {
  return modified_Accessor.has_value();
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::clearModified() noexcept {
  modified_Accessor.reset();
  return *this;
}

uci::type::OrbitManeuverSegmentID_Type& OrbitManeuverSegmentType::getNextSegmentID_() const {
  if (nextSegmentID_Accessor) {
    return *nextSegmentID_Accessor;
  }
  throw uci::base::UCIException("Error in getNextSegmentID(): An attempt was made to get an optional field that was not enabled, call hasNextSegmentID() to determine if it is safe to call getNextSegmentID()");
}

const uci::type::OrbitManeuverSegmentID_Type& OrbitManeuverSegmentType::getNextSegmentID() const {
  return getNextSegmentID_();
}

uci::type::OrbitManeuverSegmentID_Type& OrbitManeuverSegmentType::getNextSegmentID() {
  return getNextSegmentID_();
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::setNextSegmentID(const uci::type::OrbitManeuverSegmentID_Type& accessor) {
  enableNextSegmentID();
  if (&accessor != nextSegmentID_Accessor.get()) {
    nextSegmentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitManeuverSegmentType::hasNextSegmentID() const noexcept {
  return static_cast<bool>(nextSegmentID_Accessor);
}

uci::type::OrbitManeuverSegmentID_Type& OrbitManeuverSegmentType::enableNextSegmentID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitManeuverSegmentID_Type : type};
  if ((!nextSegmentID_Accessor) || (nextSegmentID_Accessor->getAccessorType() != requestedType)) {
    nextSegmentID_Accessor = OrbitManeuverSegmentID_Type::create(requestedType);
    if (!nextSegmentID_Accessor) {
      throw uci::base::UCIException("Error in enableNextSegmentID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *nextSegmentID_Accessor;
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::clearNextSegmentID() noexcept {
  nextSegmentID_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitManeuverSegmentType> OrbitManeuverSegmentType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitManeuverSegmentType : type};
  return (requestedType == uci::type::accessorType::orbitManeuverSegmentType) ? boost::make_unique<OrbitManeuverSegmentType>() : nullptr;
}

/**  */
namespace OrbitManeuverSegmentType_Names {

constexpr const char* Extern_Type_Name{"OrbitManeuverSegmentType"};
constexpr const char* SegmentID_Name{"SegmentID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* StartEpoch_Name{"StartEpoch"};
constexpr const char* EndPoint_Name{"EndPoint"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* ManeuverType_Name{"ManeuverType"};
constexpr const char* DeltaVelocity_Name{"DeltaVelocity"};
constexpr const char* Modified_Name{"Modified"};
constexpr const char* NextSegmentID_Name{"NextSegmentID"};

} // namespace OrbitManeuverSegmentType_Names

void OrbitManeuverSegmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitManeuverSegmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitManeuverSegmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::SegmentID_Name) {
      OrbitManeuverSegmentID_Type::deserialize(valueType.second, accessor.getSegmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::StartEpoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::EndPoint_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.getEndPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::ManeuverType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitManeuverSegmentType::ManeuverType& boundedList = accessor.getManeuverType();
        const uci::type::OrbitManeuverSegmentType::ManeuverType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::DeltaVelocity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDeltaVelocity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::Modified_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModified(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitManeuverSegmentType_Names::NextSegmentID_Name) {
      OrbitManeuverSegmentID_Type::deserialize(valueType.second, accessor.enableNextSegmentID(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitManeuverSegmentType::serialize(const uci::type::OrbitManeuverSegmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitManeuverSegmentType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitManeuverSegmentType_Names::Extern_Type_Name);
  }
  OrbitManeuverSegmentID_Type::serialize(accessor.getSegmentID(), node, OrbitManeuverSegmentType_Names::SegmentID_Name);
  PathSegmentSourceEnum::serialize(accessor.getSource(), node, OrbitManeuverSegmentType_Names::Source_Name, false);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getStartEpoch(), node, OrbitManeuverSegmentType_Names::StartEpoch_Name);
  OrbitalKinematicsChoiceType::serialize(accessor.getEndPoint(), node, OrbitManeuverSegmentType_Names::EndPoint_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, OrbitManeuverSegmentType_Names::Locked_Name);
  {
    const uci::type::OrbitManeuverSegmentType::ManeuverType& boundedList = accessor.getManeuverType();
    for (uci::type::OrbitManeuverSegmentType::ManeuverType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitPlanManeuverTypeEnum::serialize(boundedList.at(i), node, OrbitManeuverSegmentType_Names::ManeuverType_Name, false);
    }
  }
  if (accessor.hasDeltaVelocity()) {
    OrbitalManeuverDetailsBaseType::serialize(accessor.getDeltaVelocity(), node, OrbitManeuverSegmentType_Names::DeltaVelocity_Name);
  }
  if (accessor.hasModified()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getModified(), node, OrbitManeuverSegmentType_Names::Modified_Name);
  }
  if (accessor.hasNextSegmentID()) {
    OrbitManeuverSegmentID_Type::serialize(accessor.getNextSegmentID(), node, OrbitManeuverSegmentType_Names::NextSegmentID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitManeuverSegmentType>().release());
}

uci::type::OrbitManeuverSegmentType& OrbitManeuverSegmentType::create(const uci::type::OrbitManeuverSegmentType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitManeuverSegmentType> newAccessor{boost::make_unique<asb_uci::type::OrbitManeuverSegmentType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitManeuverSegmentType::destroy(uci::type::OrbitManeuverSegmentType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitManeuverSegmentType*>(&accessor);
}

} // namespace type

} // namespace uci

