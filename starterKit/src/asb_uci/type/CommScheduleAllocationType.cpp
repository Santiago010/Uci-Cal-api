/** @file CommScheduleAllocationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommScheduleAllocationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommCoverageUserDataType.h"
#include "asb_uci/type/CommScheduleAllocationID_Type.h"
#include "asb_uci/type/CommSchedulingRequirementID_Type.h"
#include "asb_uci/type/RequestID_Type.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommCoverageUserDataType.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/CommScheduleAllocationType.h"
#include "uci/type/CommSchedulingRequirementID_Type.h"
#include "uci/type/RequestID_Type.h"
#include "uci/type/SystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommScheduleAllocationType::CommScheduleAllocationType()
  : commScheduleAllocationID_Accessor{boost::make_unique<CommScheduleAllocationID_Type>()},
    controllingSystemID_Accessor{boost::make_unique<SystemID_Type>()},
    systemID_Accessor{boost::make_unique<SystemID_Type>()},
    commSchedulingRequirementID_Accessor{boost::make_unique<CommSchedulingRequirementID>(0, SIZE_MAX)},
    allocatedComm_Accessor{boost::make_unique<AllocatedComm>(1, SIZE_MAX)} {
}

CommScheduleAllocationType::~CommScheduleAllocationType() = default;

void CommScheduleAllocationType::copy(const uci::type::CommScheduleAllocationType& accessor) {
  copyImpl(accessor, false);
}

void CommScheduleAllocationType::copyImpl(const uci::type::CommScheduleAllocationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CommScheduleAllocationType&>(accessor);
    setCommScheduleAllocationID(*(accessorImpl.commScheduleAllocationID_Accessor));
    setControllingSystemID(*(accessorImpl.controllingSystemID_Accessor));
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.designatedSystemID_Accessor) {
      setDesignatedSystemID(*(accessorImpl.designatedSystemID_Accessor));
    } else {
      designatedSystemID_Accessor.reset();
    }
    setCommSchedulingRequirementID(*(accessorImpl.commSchedulingRequirementID_Accessor));
    if (accessorImpl.commSchedulingRequestID_Accessor) {
      setCommSchedulingRequestID(*(accessorImpl.commSchedulingRequestID_Accessor));
    } else {
      commSchedulingRequestID_Accessor.reset();
    }
    setAllocatedComm(*(accessorImpl.allocatedComm_Accessor));
  }
}

void CommScheduleAllocationType::reset() noexcept {
  commScheduleAllocationID_Accessor->reset();
  controllingSystemID_Accessor->reset();
  systemID_Accessor->reset();
  designatedSystemID_Accessor.reset();
  commSchedulingRequirementID_Accessor->reset();
  commSchedulingRequestID_Accessor.reset();
  allocatedComm_Accessor->reset();
}

const uci::type::CommScheduleAllocationID_Type& CommScheduleAllocationType::getCommScheduleAllocationID() const {
  return *commScheduleAllocationID_Accessor;
}

uci::type::CommScheduleAllocationID_Type& CommScheduleAllocationType::getCommScheduleAllocationID() {
  return *commScheduleAllocationID_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setCommScheduleAllocationID(const uci::type::CommScheduleAllocationID_Type& accessor) {
  if (&accessor != commScheduleAllocationID_Accessor.get()) {
    commScheduleAllocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemID_Type& CommScheduleAllocationType::getControllingSystemID() const {
  return *controllingSystemID_Accessor;
}

uci::type::SystemID_Type& CommScheduleAllocationType::getControllingSystemID() {
  return *controllingSystemID_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setControllingSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != controllingSystemID_Accessor.get()) {
    controllingSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SystemID_Type& CommScheduleAllocationType::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::SystemID_Type& CommScheduleAllocationType::getSystemID() {
  return *systemID_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setSystemID(const uci::type::SystemID_Type& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SystemID_Type& CommScheduleAllocationType::getDesignatedSystemID_() const {
  if (designatedSystemID_Accessor) {
    return *designatedSystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getDesignatedSystemID(): An attempt was made to get an optional field that was not enabled, call hasDesignatedSystemID() to determine if it is safe to call getDesignatedSystemID()");
}

const uci::type::SystemID_Type& CommScheduleAllocationType::getDesignatedSystemID() const {
  return getDesignatedSystemID_();
}

uci::type::SystemID_Type& CommScheduleAllocationType::getDesignatedSystemID() {
  return getDesignatedSystemID_();
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setDesignatedSystemID(const uci::type::SystemID_Type& accessor) {
  enableDesignatedSystemID();
  if (&accessor != designatedSystemID_Accessor.get()) {
    designatedSystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommScheduleAllocationType::hasDesignatedSystemID() const noexcept {
  return static_cast<bool>(designatedSystemID_Accessor);
}

uci::type::SystemID_Type& CommScheduleAllocationType::enableDesignatedSystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemID_Type : type};
  if ((!designatedSystemID_Accessor) || (designatedSystemID_Accessor->getAccessorType() != requestedType)) {
    designatedSystemID_Accessor = SystemID_Type::create(requestedType);
    if (!designatedSystemID_Accessor) {
      throw uci::base::UCIException("Error in enableDesignatedSystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *designatedSystemID_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::clearDesignatedSystemID() noexcept {
  designatedSystemID_Accessor.reset();
  return *this;
}

const uci::type::CommScheduleAllocationType::CommSchedulingRequirementID& CommScheduleAllocationType::getCommSchedulingRequirementID() const {
  return *commSchedulingRequirementID_Accessor;
}

uci::type::CommScheduleAllocationType::CommSchedulingRequirementID& CommScheduleAllocationType::getCommSchedulingRequirementID() {
  return *commSchedulingRequirementID_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setCommSchedulingRequirementID(const uci::type::CommScheduleAllocationType::CommSchedulingRequirementID& accessor) {
  if (&accessor != commSchedulingRequirementID_Accessor.get()) {
    commSchedulingRequirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequestID_Type& CommScheduleAllocationType::getCommSchedulingRequestID_() const {
  if (commSchedulingRequestID_Accessor) {
    return *commSchedulingRequestID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommSchedulingRequestID(): An attempt was made to get an optional field that was not enabled, call hasCommSchedulingRequestID() to determine if it is safe to call getCommSchedulingRequestID()");
}

const uci::type::RequestID_Type& CommScheduleAllocationType::getCommSchedulingRequestID() const {
  return getCommSchedulingRequestID_();
}

uci::type::RequestID_Type& CommScheduleAllocationType::getCommSchedulingRequestID() {
  return getCommSchedulingRequestID_();
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setCommSchedulingRequestID(const uci::type::RequestID_Type& accessor) {
  enableCommSchedulingRequestID();
  if (&accessor != commSchedulingRequestID_Accessor.get()) {
    commSchedulingRequestID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommScheduleAllocationType::hasCommSchedulingRequestID() const noexcept {
  return static_cast<bool>(commSchedulingRequestID_Accessor);
}

uci::type::RequestID_Type& CommScheduleAllocationType::enableCommSchedulingRequestID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requestID_Type : type};
  if ((!commSchedulingRequestID_Accessor) || (commSchedulingRequestID_Accessor->getAccessorType() != requestedType)) {
    commSchedulingRequestID_Accessor = RequestID_Type::create(requestedType);
    if (!commSchedulingRequestID_Accessor) {
      throw uci::base::UCIException("Error in enableCommSchedulingRequestID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commSchedulingRequestID_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::clearCommSchedulingRequestID() noexcept {
  commSchedulingRequestID_Accessor.reset();
  return *this;
}

const uci::type::CommScheduleAllocationType::AllocatedComm& CommScheduleAllocationType::getAllocatedComm() const {
  return *allocatedComm_Accessor;
}

uci::type::CommScheduleAllocationType::AllocatedComm& CommScheduleAllocationType::getAllocatedComm() {
  return *allocatedComm_Accessor;
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::setAllocatedComm(const uci::type::CommScheduleAllocationType::AllocatedComm& accessor) {
  if (&accessor != allocatedComm_Accessor.get()) {
    allocatedComm_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommScheduleAllocationType> CommScheduleAllocationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commScheduleAllocationType : type};
  return (requestedType == uci::type::accessorType::commScheduleAllocationType) ? boost::make_unique<CommScheduleAllocationType>() : nullptr;
}

/**  */
namespace CommScheduleAllocationType_Names {

constexpr const char* Extern_Type_Name{"CommScheduleAllocationType"};
constexpr const char* CommScheduleAllocationID_Name{"CommScheduleAllocationID"};
constexpr const char* ControllingSystemID_Name{"ControllingSystemID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* DesignatedSystemID_Name{"DesignatedSystemID"};
constexpr const char* CommSchedulingRequirementID_Name{"CommSchedulingRequirementID"};
constexpr const char* CommSchedulingRequestID_Name{"CommSchedulingRequestID"};
constexpr const char* AllocatedComm_Name{"AllocatedComm"};

} // namespace CommScheduleAllocationType_Names

void CommScheduleAllocationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommScheduleAllocationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommScheduleAllocationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::CommScheduleAllocationID_Name) {
      CommScheduleAllocationID_Type::deserialize(valueType.second, accessor.getCommScheduleAllocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::ControllingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getControllingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::DesignatedSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableDesignatedSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::CommSchedulingRequirementID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommScheduleAllocationType::CommSchedulingRequirementID& boundedList = accessor.getCommSchedulingRequirementID();
        const uci::type::CommScheduleAllocationType::CommSchedulingRequirementID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommSchedulingRequirementID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::CommSchedulingRequestID_Name) {
      RequestID_Type::deserialize(valueType.second, accessor.enableCommSchedulingRequestID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommScheduleAllocationType_Names::AllocatedComm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommScheduleAllocationType::AllocatedComm& boundedList = accessor.getAllocatedComm();
        const uci::type::CommScheduleAllocationType::AllocatedComm::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommCoverageUserDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CommScheduleAllocationType::serialize(const uci::type::CommScheduleAllocationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommScheduleAllocationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommScheduleAllocationType_Names::Extern_Type_Name);
  }
  CommScheduleAllocationID_Type::serialize(accessor.getCommScheduleAllocationID(), node, CommScheduleAllocationType_Names::CommScheduleAllocationID_Name);
  SystemID_Type::serialize(accessor.getControllingSystemID(), node, CommScheduleAllocationType_Names::ControllingSystemID_Name);
  SystemID_Type::serialize(accessor.getSystemID(), node, CommScheduleAllocationType_Names::SystemID_Name);
  if (accessor.hasDesignatedSystemID()) {
    SystemID_Type::serialize(accessor.getDesignatedSystemID(), node, CommScheduleAllocationType_Names::DesignatedSystemID_Name);
  }
  {
    const uci::type::CommScheduleAllocationType::CommSchedulingRequirementID& boundedList = accessor.getCommSchedulingRequirementID();
    for (uci::type::CommScheduleAllocationType::CommSchedulingRequirementID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommSchedulingRequirementID_Type::serialize(boundedList.at(i), node, CommScheduleAllocationType_Names::CommSchedulingRequirementID_Name);
    }
  }
  if (accessor.hasCommSchedulingRequestID()) {
    RequestID_Type::serialize(accessor.getCommSchedulingRequestID(), node, CommScheduleAllocationType_Names::CommSchedulingRequestID_Name);
  }
  {
    const uci::type::CommScheduleAllocationType::AllocatedComm& boundedList = accessor.getAllocatedComm();
    for (uci::type::CommScheduleAllocationType::AllocatedComm::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommCoverageUserDataType::serialize(boundedList.at(i), node, CommScheduleAllocationType_Names::AllocatedComm_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommScheduleAllocationType>().release());
}

uci::type::CommScheduleAllocationType& CommScheduleAllocationType::create(const uci::type::CommScheduleAllocationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommScheduleAllocationType> newAccessor{boost::make_unique<asb_uci::type::CommScheduleAllocationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommScheduleAllocationType::destroy(uci::type::CommScheduleAllocationType& accessor) {
  delete dynamic_cast<asb_uci::type::CommScheduleAllocationType*>(&accessor);
}

} // namespace type

} // namespace uci

