/** @file ProductTypeFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ProductTypeFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/FileFormatType.h"
#include "asb_uci/type/LocationFilterType.h"
#include "asb_uci/type/SecurityInformationType.h"
#include "asb_uci/type/SourceFilterType.h"
#include "asb_uci/type/SourceLocationFilterType.h"
#include "asb_uci/type/VisibleString1024Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/FileFormatType.h"
#include "uci/type/LocationFilterType.h"
#include "uci/type/ProductTypeFilterType.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/SourceFilterType.h"
#include "uci/type/SourceLocationFilterType.h"
#include "uci/type/VisibleString1024Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ProductTypeFilterType::ProductTypeFilterType() = default;

ProductTypeFilterType::~ProductTypeFilterType() = default;

void ProductTypeFilterType::copy(const uci::type::ProductTypeFilterType& accessor) {
  copyImpl(accessor, false);
}

void ProductTypeFilterType::copyImpl(const uci::type::ProductTypeFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ProductTypeFilterType&>(accessor);
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
    if (accessorImpl.geospatial_Accessor) {
      setGeospatial(*(accessorImpl.geospatial_Accessor));
    } else {
      geospatial_Accessor.reset();
    }
    if (accessorImpl.sourceGeospatial_Accessor) {
      setSourceGeospatial(*(accessorImpl.sourceGeospatial_Accessor));
    } else {
      sourceGeospatial_Accessor.reset();
    }
    if (accessorImpl.fileFormat_Accessor) {
      setFileFormat(*(accessorImpl.fileFormat_Accessor));
    } else {
      fileFormat_Accessor.reset();
    }
    if (accessorImpl.securityInformation_Accessor) {
      setSecurityInformation(*(accessorImpl.securityInformation_Accessor));
    } else {
      securityInformation_Accessor.reset();
    }
    if (accessorImpl.dateTimeRange_Accessor) {
      setDateTimeRange(*(accessorImpl.dateTimeRange_Accessor));
    } else {
      dateTimeRange_Accessor.reset();
    }
    if (accessorImpl.x_Path_Accessor) {
      setX_Path(*(accessorImpl.x_Path_Accessor));
    } else {
      x_Path_Accessor.reset();
    }
  }
}

void ProductTypeFilterType::reset() noexcept {
  source_Accessor.reset();
  geospatial_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  securityInformation_Accessor.reset();
  dateTimeRange_Accessor.reset();
  x_Path_Accessor.reset();
}

uci::type::ProductTypeFilterType::ProductTypeFilterTypeChoice ProductTypeFilterType::getProductTypeFilterTypeChoiceOrdinal() const noexcept {
  if (source_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_SOURCE;
  }
  if (geospatial_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_GEOSPATIAL;
  }
  if (sourceGeospatial_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_SOURCEGEOSPATIAL;
  }
  if (fileFormat_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_FILEFORMAT;
  }
  if (securityInformation_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_SECURITYINFORMATION;
  }
  if (dateTimeRange_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_DATETIMERANGE;
  }
  if (x_Path_Accessor) {
    return PRODUCTTYPEFILTERTYPE_CHOICE_X_PATH;
  }
  return PRODUCTTYPEFILTERTYPE_CHOICE_NONE;
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setProductTypeFilterTypeChoiceOrdinal(uci::type::ProductTypeFilterType::ProductTypeFilterTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PRODUCTTYPEFILTERTYPE_CHOICE_SOURCE:
      chooseSource("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    case PRODUCTTYPEFILTERTYPE_CHOICE_GEOSPATIAL:
      chooseGeospatial("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    case PRODUCTTYPEFILTERTYPE_CHOICE_SOURCEGEOSPATIAL:
      chooseSourceGeospatial("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    case PRODUCTTYPEFILTERTYPE_CHOICE_FILEFORMAT:
      chooseFileFormat("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    case PRODUCTTYPEFILTERTYPE_CHOICE_SECURITYINFORMATION:
      chooseSecurityInformation("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    case PRODUCTTYPEFILTERTYPE_CHOICE_DATETIMERANGE:
      chooseDateTimeRange("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    case PRODUCTTYPEFILTERTYPE_CHOICE_X_PATH:
      chooseX_Path("setProductTypeFilterTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setProductTypeFilterTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::SourceFilterType& ProductTypeFilterType::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): Unable to get Source, field not selected");
}

const uci::type::SourceFilterType& ProductTypeFilterType::getSource() const {
  return getSource_();
}

uci::type::SourceFilterType& ProductTypeFilterType::getSource() {
  return getSource_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setSource(const uci::type::SourceFilterType& accessor) {
  chooseSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductTypeFilterType::isSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::SourceFilterType& ProductTypeFilterType::chooseSource(const std::string& method, uci::base::accessorType::AccessorType type) {
  geospatial_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  securityInformation_Accessor.reset();
  dateTimeRange_Accessor.reset();
  x_Path_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceFilterType : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = SourceFilterType::create(type);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::SourceFilterType& ProductTypeFilterType::chooseSource(uci::base::accessorType::AccessorType type) {
  return chooseSource("chooseSource", type);
}

uci::type::LocationFilterType& ProductTypeFilterType::getGeospatial_() const {
  if (geospatial_Accessor) {
    return *geospatial_Accessor;
  }
  throw uci::base::UCIException("Error in getGeospatial(): Unable to get Geospatial, field not selected");
}

const uci::type::LocationFilterType& ProductTypeFilterType::getGeospatial() const {
  return getGeospatial_();
}

uci::type::LocationFilterType& ProductTypeFilterType::getGeospatial() {
  return getGeospatial_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setGeospatial(const uci::type::LocationFilterType& accessor) {
  chooseGeospatial(accessor.getAccessorType());
  if (&accessor != geospatial_Accessor.get()) {
    geospatial_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductTypeFilterType::isGeospatial() const noexcept {
  return static_cast<bool>(geospatial_Accessor);
}

uci::type::LocationFilterType& ProductTypeFilterType::chooseGeospatial(const std::string& method, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  securityInformation_Accessor.reset();
  dateTimeRange_Accessor.reset();
  x_Path_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::locationFilterType : type};
  if ((!geospatial_Accessor) || (geospatial_Accessor->getAccessorType() != requestedType)) {
    geospatial_Accessor = LocationFilterType::create(type);
    if (!geospatial_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geospatial_Accessor;
}

uci::type::LocationFilterType& ProductTypeFilterType::chooseGeospatial(uci::base::accessorType::AccessorType type) {
  return chooseGeospatial("chooseGeospatial", type);
}

uci::type::SourceLocationFilterType& ProductTypeFilterType::getSourceGeospatial_() const {
  if (sourceGeospatial_Accessor) {
    return *sourceGeospatial_Accessor;
  }
  throw uci::base::UCIException("Error in getSourceGeospatial(): Unable to get SourceGeospatial, field not selected");
}

const uci::type::SourceLocationFilterType& ProductTypeFilterType::getSourceGeospatial() const {
  return getSourceGeospatial_();
}

uci::type::SourceLocationFilterType& ProductTypeFilterType::getSourceGeospatial() {
  return getSourceGeospatial_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setSourceGeospatial(const uci::type::SourceLocationFilterType& accessor) {
  chooseSourceGeospatial();
  if (&accessor != sourceGeospatial_Accessor.get()) {
    sourceGeospatial_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductTypeFilterType::isSourceGeospatial() const noexcept {
  return static_cast<bool>(sourceGeospatial_Accessor);
}

uci::type::SourceLocationFilterType& ProductTypeFilterType::chooseSourceGeospatial(const std::string& method, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  geospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  securityInformation_Accessor.reset();
  dateTimeRange_Accessor.reset();
  x_Path_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sourceLocationFilterType : type};
  if ((!sourceGeospatial_Accessor) || (sourceGeospatial_Accessor->getAccessorType() != requestedType)) {
    sourceGeospatial_Accessor = SourceLocationFilterType::create(type);
    if (!sourceGeospatial_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sourceGeospatial_Accessor;
}

uci::type::SourceLocationFilterType& ProductTypeFilterType::chooseSourceGeospatial(uci::base::accessorType::AccessorType type) {
  return chooseSourceGeospatial("chooseSourceGeospatial", type);
}

uci::type::FileFormatType& ProductTypeFilterType::getFileFormat_() const {
  if (fileFormat_Accessor) {
    return *fileFormat_Accessor;
  }
  throw uci::base::UCIException("Error in getFileFormat(): Unable to get FileFormat, field not selected");
}

const uci::type::FileFormatType& ProductTypeFilterType::getFileFormat() const {
  return getFileFormat_();
}

uci::type::FileFormatType& ProductTypeFilterType::getFileFormat() {
  return getFileFormat_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setFileFormat(const uci::type::FileFormatType& accessor) {
  chooseFileFormat(accessor.getAccessorType());
  if (&accessor != fileFormat_Accessor.get()) {
    fileFormat_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductTypeFilterType::isFileFormat() const noexcept {
  return static_cast<bool>(fileFormat_Accessor);
}

uci::type::FileFormatType& ProductTypeFilterType::chooseFileFormat(const std::string& method, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  geospatial_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  securityInformation_Accessor.reset();
  dateTimeRange_Accessor.reset();
  x_Path_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileFormatType : type};
  if ((!fileFormat_Accessor) || (fileFormat_Accessor->getAccessorType() != requestedType)) {
    fileFormat_Accessor = FileFormatType::create(type);
    if (!fileFormat_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileFormat_Accessor;
}

uci::type::FileFormatType& ProductTypeFilterType::chooseFileFormat(uci::base::accessorType::AccessorType type) {
  return chooseFileFormat("chooseFileFormat", type);
}

uci::type::SecurityInformationType& ProductTypeFilterType::getSecurityInformation_() const {
  if (securityInformation_Accessor) {
    return *securityInformation_Accessor;
  }
  throw uci::base::UCIException("Error in getSecurityInformation(): Unable to get SecurityInformation, field not selected");
}

const uci::type::SecurityInformationType& ProductTypeFilterType::getSecurityInformation() const {
  return getSecurityInformation_();
}

uci::type::SecurityInformationType& ProductTypeFilterType::getSecurityInformation() {
  return getSecurityInformation_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setSecurityInformation(const uci::type::SecurityInformationType& accessor) {
  chooseSecurityInformation();
  if (&accessor != securityInformation_Accessor.get()) {
    securityInformation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductTypeFilterType::isSecurityInformation() const noexcept {
  return static_cast<bool>(securityInformation_Accessor);
}

uci::type::SecurityInformationType& ProductTypeFilterType::chooseSecurityInformation(const std::string& method, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  geospatial_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  dateTimeRange_Accessor.reset();
  x_Path_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::securityInformationType : type};
  if ((!securityInformation_Accessor) || (securityInformation_Accessor->getAccessorType() != requestedType)) {
    securityInformation_Accessor = SecurityInformationType::create(type);
    if (!securityInformation_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *securityInformation_Accessor;
}

uci::type::SecurityInformationType& ProductTypeFilterType::chooseSecurityInformation(uci::base::accessorType::AccessorType type) {
  return chooseSecurityInformation("chooseSecurityInformation", type);
}

uci::type::DateTimeRangeType& ProductTypeFilterType::getDateTimeRange_() const {
  if (dateTimeRange_Accessor) {
    return *dateTimeRange_Accessor;
  }
  throw uci::base::UCIException("Error in getDateTimeRange(): Unable to get DateTimeRange, field not selected");
}

const uci::type::DateTimeRangeType& ProductTypeFilterType::getDateTimeRange() const {
  return getDateTimeRange_();
}

uci::type::DateTimeRangeType& ProductTypeFilterType::getDateTimeRange() {
  return getDateTimeRange_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setDateTimeRange(const uci::type::DateTimeRangeType& accessor) {
  chooseDateTimeRange();
  if (&accessor != dateTimeRange_Accessor.get()) {
    dateTimeRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ProductTypeFilterType::isDateTimeRange() const noexcept {
  return static_cast<bool>(dateTimeRange_Accessor);
}

uci::type::DateTimeRangeType& ProductTypeFilterType::chooseDateTimeRange(const std::string& method, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  geospatial_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  securityInformation_Accessor.reset();
  x_Path_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!dateTimeRange_Accessor) || (dateTimeRange_Accessor->getAccessorType() != requestedType)) {
    dateTimeRange_Accessor = DateTimeRangeType::create(type);
    if (!dateTimeRange_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *dateTimeRange_Accessor;
}

uci::type::DateTimeRangeType& ProductTypeFilterType::chooseDateTimeRange(uci::base::accessorType::AccessorType type) {
  return chooseDateTimeRange("chooseDateTimeRange", type);
}

uci::type::VisibleString1024Type& ProductTypeFilterType::getX_Path_() const {
  if (x_Path_Accessor) {
    return *x_Path_Accessor;
  }
  throw uci::base::UCIException("Error in getX_Path(): An attempt was made to get an optional field that was not enabled, call hasX_Path() to determine if it is safe to call getX_Path()");
}

const uci::type::VisibleString1024Type& ProductTypeFilterType::getX_Path() const {
  return getX_Path_();
}

uci::type::VisibleString1024Type& ProductTypeFilterType::getX_Path() {
  return getX_Path_();
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setX_Path(const uci::type::VisibleString1024Type& value) {
  return setX_Path(value.c_str());
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setX_Path(const std::string& value) {
  return setX_Path(value.c_str());
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::setX_Path(const char * value) {
  chooseX_Path().setStringValue(value);
  return *this;
}

bool ProductTypeFilterType::isX_Path() const noexcept {
  return static_cast<bool>(x_Path_Accessor);
}

uci::type::VisibleString1024Type& ProductTypeFilterType::chooseX_Path(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  source_Accessor.reset();
  geospatial_Accessor.reset();
  sourceGeospatial_Accessor.reset();
  fileFormat_Accessor.reset();
  securityInformation_Accessor.reset();
  dateTimeRange_Accessor.reset();
  if (!x_Path_Accessor) {
    x_Path_Accessor = VisibleString1024Type::create(type);
  }
  return *x_Path_Accessor;
}

uci::type::VisibleString1024Type& ProductTypeFilterType::chooseX_Path(uci::base::accessorType::AccessorType type) {
  return chooseX_Path("chooseX_Path", type);
}

std::unique_ptr<ProductTypeFilterType> ProductTypeFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productTypeFilterType : type};
  return (requestedType == uci::type::accessorType::productTypeFilterType) ? boost::make_unique<ProductTypeFilterType>() : nullptr;
}

/**  */
namespace ProductTypeFilterType_Names {

constexpr const char* Extern_Type_Name{"ProductTypeFilterType"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Geospatial_Name{"Geospatial"};
constexpr const char* SourceGeospatial_Name{"SourceGeospatial"};
constexpr const char* FileFormat_Name{"FileFormat"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* DateTimeRange_Name{"DateTimeRange"};
constexpr const char* X_Path_Name{"X_Path"};

} // namespace ProductTypeFilterType_Names

void ProductTypeFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductTypeFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductTypeFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::Source_Name) {
      SourceFilterType::deserialize(valueType.second, accessor.chooseSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::Geospatial_Name) {
      LocationFilterType::deserialize(valueType.second, accessor.chooseGeospatial(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::SourceGeospatial_Name) {
      SourceLocationFilterType::deserialize(valueType.second, accessor.chooseSourceGeospatial(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::FileFormat_Name) {
      FileFormatType::deserialize(valueType.second, accessor.chooseFileFormat(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.chooseSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::DateTimeRange_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.chooseDateTimeRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductTypeFilterType_Names::X_Path_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseX_Path().setStringValue(*value);
      }
    }
  }
}

std::string ProductTypeFilterType::serialize(const uci::type::ProductTypeFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ProductTypeFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ProductTypeFilterType_Names::Extern_Type_Name);
  }
  if (accessor.isSource()) {
    SourceFilterType::serialize(accessor.getSource(), node, ProductTypeFilterType_Names::Source_Name);
  } else if (accessor.isGeospatial()) {
    LocationFilterType::serialize(accessor.getGeospatial(), node, ProductTypeFilterType_Names::Geospatial_Name);
  } else if (accessor.isSourceGeospatial()) {
    SourceLocationFilterType::serialize(accessor.getSourceGeospatial(), node, ProductTypeFilterType_Names::SourceGeospatial_Name);
  } else if (accessor.isFileFormat()) {
    FileFormatType::serialize(accessor.getFileFormat(), node, ProductTypeFilterType_Names::FileFormat_Name);
  } else if (accessor.isSecurityInformation()) {
    SecurityInformationType::serialize(accessor.getSecurityInformation(), node, ProductTypeFilterType_Names::SecurityInformation_Name);
  } else if (accessor.isDateTimeRange()) {
    DateTimeRangeType::serialize(accessor.getDateTimeRange(), node, ProductTypeFilterType_Names::DateTimeRange_Name);
  } else if (accessor.isX_Path()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getX_Path(), node, ProductTypeFilterType_Names::X_Path_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ProductTypeFilterType& ProductTypeFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ProductTypeFilterType>().release());
}

uci::type::ProductTypeFilterType& ProductTypeFilterType::create(const uci::type::ProductTypeFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ProductTypeFilterType> newAccessor{boost::make_unique<asb_uci::type::ProductTypeFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ProductTypeFilterType::destroy(uci::type::ProductTypeFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::ProductTypeFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

