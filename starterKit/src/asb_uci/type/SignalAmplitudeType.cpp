/** @file SignalAmplitudeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SignalAmplitudeType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/SignalAmplitudeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SignalAmplitudeType::SignalAmplitudeType() = default;

SignalAmplitudeType::~SignalAmplitudeType() = default;

void SignalAmplitudeType::copy(const uci::type::SignalAmplitudeType& accessor) {
  copyImpl(accessor, false);
}

void SignalAmplitudeType::copyImpl(const uci::type::SignalAmplitudeType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SignalAmplitudeType&>(accessor);
    if (accessorImpl.hasAmplitudeAverage()) {
      setAmplitudeAverage(accessorImpl.getAmplitudeAverage());
    } else {
      clearAmplitudeAverage();
    }
    if (accessorImpl.hasAmplitudeMin()) {
      setAmplitudeMin(accessorImpl.getAmplitudeMin());
    } else {
      clearAmplitudeMin();
    }
    if (accessorImpl.hasAmplitudeMax()) {
      setAmplitudeMax(accessorImpl.getAmplitudeMax());
    } else {
      clearAmplitudeMax();
    }
    if (accessorImpl.hasAmplitudeLast()) {
      setAmplitudeLast(accessorImpl.getAmplitudeLast());
    } else {
      clearAmplitudeLast();
    }
    if (accessorImpl.hasRelativeAmplitude()) {
      setRelativeAmplitude(accessorImpl.getRelativeAmplitude());
    } else {
      clearRelativeAmplitude();
    }
  }
}

void SignalAmplitudeType::reset() noexcept {
  clearAmplitudeAverage();
  clearAmplitudeMin();
  clearAmplitudeMax();
  clearAmplitudeLast();
  clearRelativeAmplitude();
}

uci::type::MilliwattPowerRatioTypeValue SignalAmplitudeType::getAmplitudeAverage() const {
  if (amplitudeAverage_Accessor) {
    return *amplitudeAverage_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplitudeAverage(): An attempt was made to get an optional field that was not enabled, call hasAmplitudeAverage() to determine if it is safe to call getAmplitudeAverage()");
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::setAmplitudeAverage(uci::type::MilliwattPowerRatioTypeValue value) {
  amplitudeAverage_Accessor = value;
  return *this;
}

bool SignalAmplitudeType::hasAmplitudeAverage() const noexcept {
  return amplitudeAverage_Accessor.has_value();
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::clearAmplitudeAverage() noexcept {
  amplitudeAverage_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue SignalAmplitudeType::getAmplitudeMin() const {
  if (amplitudeMin_Accessor) {
    return *amplitudeMin_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplitudeMin(): An attempt was made to get an optional field that was not enabled, call hasAmplitudeMin() to determine if it is safe to call getAmplitudeMin()");
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::setAmplitudeMin(uci::type::MilliwattPowerRatioTypeValue value) {
  amplitudeMin_Accessor = value;
  return *this;
}

bool SignalAmplitudeType::hasAmplitudeMin() const noexcept {
  return amplitudeMin_Accessor.has_value();
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::clearAmplitudeMin() noexcept {
  amplitudeMin_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue SignalAmplitudeType::getAmplitudeMax() const {
  if (amplitudeMax_Accessor) {
    return *amplitudeMax_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplitudeMax(): An attempt was made to get an optional field that was not enabled, call hasAmplitudeMax() to determine if it is safe to call getAmplitudeMax()");
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::setAmplitudeMax(uci::type::MilliwattPowerRatioTypeValue value) {
  amplitudeMax_Accessor = value;
  return *this;
}

bool SignalAmplitudeType::hasAmplitudeMax() const noexcept {
  return amplitudeMax_Accessor.has_value();
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::clearAmplitudeMax() noexcept {
  amplitudeMax_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue SignalAmplitudeType::getAmplitudeLast() const {
  if (amplitudeLast_Accessor) {
    return *amplitudeLast_Accessor;
  }
  throw uci::base::UCIException("Error in getAmplitudeLast(): An attempt was made to get an optional field that was not enabled, call hasAmplitudeLast() to determine if it is safe to call getAmplitudeLast()");
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::setAmplitudeLast(uci::type::MilliwattPowerRatioTypeValue value) {
  amplitudeLast_Accessor = value;
  return *this;
}

bool SignalAmplitudeType::hasAmplitudeLast() const noexcept {
  return amplitudeLast_Accessor.has_value();
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::clearAmplitudeLast() noexcept {
  amplitudeLast_Accessor.reset();
  return *this;
}

uci::type::DecibelTypeValue SignalAmplitudeType::getRelativeAmplitude() const {
  if (relativeAmplitude_Accessor) {
    return *relativeAmplitude_Accessor;
  }
  throw uci::base::UCIException("Error in getRelativeAmplitude(): An attempt was made to get an optional field that was not enabled, call hasRelativeAmplitude() to determine if it is safe to call getRelativeAmplitude()");
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::setRelativeAmplitude(uci::type::DecibelTypeValue value) {
  relativeAmplitude_Accessor = value;
  return *this;
}

bool SignalAmplitudeType::hasRelativeAmplitude() const noexcept {
  return relativeAmplitude_Accessor.has_value();
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::clearRelativeAmplitude() noexcept {
  relativeAmplitude_Accessor.reset();
  return *this;
}

std::unique_ptr<SignalAmplitudeType> SignalAmplitudeType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalAmplitudeType : type};
  return (requestedType == uci::type::accessorType::signalAmplitudeType) ? boost::make_unique<SignalAmplitudeType>() : nullptr;
}

/**  */
namespace SignalAmplitudeType_Names {

constexpr const char* Extern_Type_Name{"SignalAmplitudeType"};
constexpr const char* AmplitudeAverage_Name{"AmplitudeAverage"};
constexpr const char* AmplitudeMin_Name{"AmplitudeMin"};
constexpr const char* AmplitudeMax_Name{"AmplitudeMax"};
constexpr const char* AmplitudeLast_Name{"AmplitudeLast"};
constexpr const char* RelativeAmplitude_Name{"RelativeAmplitude"};

} // namespace SignalAmplitudeType_Names

void SignalAmplitudeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalAmplitudeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalAmplitudeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalAmplitudeType_Names::AmplitudeAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitudeAverage(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalAmplitudeType_Names::AmplitudeMin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitudeMin(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalAmplitudeType_Names::AmplitudeMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitudeMax(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalAmplitudeType_Names::AmplitudeLast_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitudeLast(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalAmplitudeType_Names::RelativeAmplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeAmplitude(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SignalAmplitudeType::serialize(const uci::type::SignalAmplitudeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SignalAmplitudeType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SignalAmplitudeType_Names::Extern_Type_Name);
  }
  if (accessor.hasAmplitudeAverage()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitudeAverage(), node, SignalAmplitudeType_Names::AmplitudeAverage_Name);
  }
  if (accessor.hasAmplitudeMin()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitudeMin(), node, SignalAmplitudeType_Names::AmplitudeMin_Name);
  }
  if (accessor.hasAmplitudeMax()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitudeMax(), node, SignalAmplitudeType_Names::AmplitudeMax_Name);
  }
  if (accessor.hasAmplitudeLast()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitudeLast(), node, SignalAmplitudeType_Names::AmplitudeLast_Name);
  }
  if (accessor.hasRelativeAmplitude()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getRelativeAmplitude(), node, SignalAmplitudeType_Names::RelativeAmplitude_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SignalAmplitudeType& SignalAmplitudeType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SignalAmplitudeType>().release());
}

uci::type::SignalAmplitudeType& SignalAmplitudeType::create(const uci::type::SignalAmplitudeType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SignalAmplitudeType> newAccessor{boost::make_unique<asb_uci::type::SignalAmplitudeType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SignalAmplitudeType::destroy(uci::type::SignalAmplitudeType& accessor) {
  delete dynamic_cast<asb_uci::type::SignalAmplitudeType*>(&accessor);
}

} // namespace type

} // namespace uci

