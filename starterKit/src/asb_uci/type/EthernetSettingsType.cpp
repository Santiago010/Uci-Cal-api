/** @file EthernetSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EthernetSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/IPv4_SettingsType.h"
#include "asb_uci/type/IPv6_SettingsType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EthernetSettingsType.h"
#include "uci/type/IPv4_SettingsType.h"
#include "uci/type/IPv6_SettingsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EthernetSettingsType::EthernetSettingsType() = default;

EthernetSettingsType::~EthernetSettingsType() = default;

void EthernetSettingsType::copy(const uci::type::EthernetSettingsType& accessor) {
  copyImpl(accessor, false);
}

void EthernetSettingsType::copyImpl(const uci::type::EthernetSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EthernetSettingsType&>(accessor);
    if (accessorImpl.iPv4_Accessor) {
      setIPv4(*(accessorImpl.iPv4_Accessor));
    } else {
      iPv4_Accessor.reset();
    }
    if (accessorImpl.iPv6_Accessor) {
      setIPv6(*(accessorImpl.iPv6_Accessor));
    } else {
      iPv6_Accessor.reset();
    }
  }
}

void EthernetSettingsType::reset() noexcept {
  iPv4_Accessor.reset();
  iPv6_Accessor.reset();
}

uci::type::EthernetSettingsType::EthernetSettingsTypeChoice EthernetSettingsType::getEthernetSettingsTypeChoiceOrdinal() const noexcept {
  if (iPv4_Accessor) {
    return ETHERNETSETTINGSTYPE_CHOICE_IPV4;
  }
  if (iPv6_Accessor) {
    return ETHERNETSETTINGSTYPE_CHOICE_IPV6;
  }
  return ETHERNETSETTINGSTYPE_CHOICE_NONE;
}

uci::type::EthernetSettingsType& EthernetSettingsType::setEthernetSettingsTypeChoiceOrdinal(uci::type::EthernetSettingsType::EthernetSettingsTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case ETHERNETSETTINGSTYPE_CHOICE_IPV4:
      chooseIPv4("setEthernetSettingsTypeChoiceOrdinal", type);
      break;
    case ETHERNETSETTINGSTYPE_CHOICE_IPV6:
      chooseIPv6("setEthernetSettingsTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setEthernetSettingsTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::IPv4_SettingsType& EthernetSettingsType::getIPv4_() const {
  if (iPv4_Accessor) {
    return *iPv4_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv4(): Unable to get IPv4, field not selected");
}

const uci::type::IPv4_SettingsType& EthernetSettingsType::getIPv4() const {
  return getIPv4_();
}

uci::type::IPv4_SettingsType& EthernetSettingsType::getIPv4() {
  return getIPv4_();
}

uci::type::EthernetSettingsType& EthernetSettingsType::setIPv4(const uci::type::IPv4_SettingsType& accessor) {
  chooseIPv4();
  if (&accessor != iPv4_Accessor.get()) {
    iPv4_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EthernetSettingsType::isIPv4() const noexcept {
  return static_cast<bool>(iPv4_Accessor);
}

uci::type::IPv4_SettingsType& EthernetSettingsType::chooseIPv4(const std::string& method, uci::base::accessorType::AccessorType type) {
  iPv6_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv4_SettingsType : type};
  if ((!iPv4_Accessor) || (iPv4_Accessor->getAccessorType() != requestedType)) {
    iPv4_Accessor = IPv4_SettingsType::create(type);
    if (!iPv4_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iPv4_Accessor;
}

uci::type::IPv4_SettingsType& EthernetSettingsType::chooseIPv4(uci::base::accessorType::AccessorType type) {
  return chooseIPv4("chooseIPv4", type);
}

uci::type::IPv6_SettingsType& EthernetSettingsType::getIPv6_() const {
  if (iPv6_Accessor) {
    return *iPv6_Accessor;
  }
  throw uci::base::UCIException("Error in getIPv6(): Unable to get IPv6, field not selected");
}

const uci::type::IPv6_SettingsType& EthernetSettingsType::getIPv6() const {
  return getIPv6_();
}

uci::type::IPv6_SettingsType& EthernetSettingsType::getIPv6() {
  return getIPv6_();
}

uci::type::EthernetSettingsType& EthernetSettingsType::setIPv6(const uci::type::IPv6_SettingsType& accessor) {
  chooseIPv6();
  if (&accessor != iPv6_Accessor.get()) {
    iPv6_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EthernetSettingsType::isIPv6() const noexcept {
  return static_cast<bool>(iPv6_Accessor);
}

uci::type::IPv6_SettingsType& EthernetSettingsType::chooseIPv6(const std::string& method, uci::base::accessorType::AccessorType type) {
  iPv4_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iPv6_SettingsType : type};
  if ((!iPv6_Accessor) || (iPv6_Accessor->getAccessorType() != requestedType)) {
    iPv6_Accessor = IPv6_SettingsType::create(type);
    if (!iPv6_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *iPv6_Accessor;
}

uci::type::IPv6_SettingsType& EthernetSettingsType::chooseIPv6(uci::base::accessorType::AccessorType type) {
  return chooseIPv6("chooseIPv6", type);
}

std::unique_ptr<EthernetSettingsType> EthernetSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::ethernetSettingsType : type};
  return (requestedType == uci::type::accessorType::ethernetSettingsType) ? boost::make_unique<EthernetSettingsType>() : nullptr;
}

/**  */
namespace EthernetSettingsType_Names {

constexpr const char* Extern_Type_Name{"EthernetSettingsType"};
constexpr const char* IPv4_Name{"IPv4"};
constexpr const char* IPv6_Name{"IPv6"};

} // namespace EthernetSettingsType_Names

void EthernetSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EthernetSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EthernetSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EthernetSettingsType_Names::IPv4_Name) {
      IPv4_SettingsType::deserialize(valueType.second, accessor.chooseIPv4(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EthernetSettingsType_Names::IPv6_Name) {
      IPv6_SettingsType::deserialize(valueType.second, accessor.chooseIPv6(), nodeName, nsPrefix);
    }
  }
}

std::string EthernetSettingsType::serialize(const uci::type::EthernetSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EthernetSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EthernetSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.isIPv4()) {
    IPv4_SettingsType::serialize(accessor.getIPv4(), node, EthernetSettingsType_Names::IPv4_Name);
  } else if (accessor.isIPv6()) {
    IPv6_SettingsType::serialize(accessor.getIPv6(), node, EthernetSettingsType_Names::IPv6_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EthernetSettingsType& EthernetSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EthernetSettingsType>().release());
}

uci::type::EthernetSettingsType& EthernetSettingsType::create(const uci::type::EthernetSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EthernetSettingsType> newAccessor{boost::make_unique<asb_uci::type::EthernetSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EthernetSettingsType::destroy(uci::type::EthernetSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::EthernetSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

