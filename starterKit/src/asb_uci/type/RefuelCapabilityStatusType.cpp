/** @file RefuelCapabilityStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/RefuelCapabilityStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/RefuelCapabilityDrogueStatusType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelCapabilityDrogueStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RefuelCapabilityStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RefuelCapabilityStatusType::RefuelCapabilityStatusType() = default;

RefuelCapabilityStatusType::~RefuelCapabilityStatusType() = default;

void RefuelCapabilityStatusType::copy(const uci::type::RefuelCapabilityStatusType& accessor) {
  copyImpl(accessor, false);
}

void RefuelCapabilityStatusType::copyImpl(const uci::type::RefuelCapabilityStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RefuelCapabilityStatusType&>(accessor);
    if (accessorImpl.boom_Accessor) {
      setBoom(*(accessorImpl.boom_Accessor));
    } else {
      boom_Accessor.reset();
    }
    if (accessorImpl.drogue_Accessor) {
      setDrogue(*(accessorImpl.drogue_Accessor));
    } else {
      drogue_Accessor.reset();
    }
  }
}

void RefuelCapabilityStatusType::reset() noexcept {
  boom_Accessor.reset();
  drogue_Accessor.reset();
}

uci::type::RefuelCapabilityStatusType::RefuelCapabilityStatusTypeChoice RefuelCapabilityStatusType::getRefuelCapabilityStatusTypeChoiceOrdinal() const noexcept {
  if (boom_Accessor) {
    return REFUELCAPABILITYSTATUSTYPE_CHOICE_BOOM;
  }
  if (drogue_Accessor) {
    return REFUELCAPABILITYSTATUSTYPE_CHOICE_DROGUE;
  }
  return REFUELCAPABILITYSTATUSTYPE_CHOICE_NONE;
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::setRefuelCapabilityStatusTypeChoiceOrdinal(uci::type::RefuelCapabilityStatusType::RefuelCapabilityStatusTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REFUELCAPABILITYSTATUSTYPE_CHOICE_BOOM:
      chooseBoom("setRefuelCapabilityStatusTypeChoiceOrdinal", type);
      break;
    case REFUELCAPABILITYSTATUSTYPE_CHOICE_DROGUE:
      chooseDrogue("setRefuelCapabilityStatusTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setRefuelCapabilityStatusTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EmptyType& RefuelCapabilityStatusType::getBoom_() const {
  if (boom_Accessor) {
    return *boom_Accessor;
  }
  throw uci::base::UCIException("Error in getBoom(): An attempt was made to get an optional field that was not enabled, call hasBoom() to determine if it is safe to call getBoom()");
}

const uci::type::EmptyType& RefuelCapabilityStatusType::getBoom() const {
  return getBoom_();
}

uci::type::EmptyType& RefuelCapabilityStatusType::getBoom() {
  return getBoom_();
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::setBoom(const uci::type::EmptyType& value) {
  return setBoom(value.c_str());
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::setBoom(const std::string& value) {
  return setBoom(value.c_str());
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::setBoom(const char * value) {
  chooseBoom().setStringValue(value);
  return *this;
}

bool RefuelCapabilityStatusType::isBoom() const noexcept {
  return static_cast<bool>(boom_Accessor);
}

uci::type::EmptyType& RefuelCapabilityStatusType::chooseBoom(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  drogue_Accessor.reset();
  if (!boom_Accessor) {
    boom_Accessor = EmptyType::create(type);
  }
  return *boom_Accessor;
}

uci::type::EmptyType& RefuelCapabilityStatusType::chooseBoom(uci::base::accessorType::AccessorType type) {
  return chooseBoom("chooseBoom", type);
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityStatusType::getDrogue_() const {
  if (drogue_Accessor) {
    return *drogue_Accessor;
  }
  throw uci::base::UCIException("Error in getDrogue(): Unable to get Drogue, field not selected");
}

const uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityStatusType::getDrogue() const {
  return getDrogue_();
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityStatusType::getDrogue() {
  return getDrogue_();
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::setDrogue(const uci::type::RefuelCapabilityDrogueStatusType& accessor) {
  chooseDrogue();
  if (&accessor != drogue_Accessor.get()) {
    drogue_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RefuelCapabilityStatusType::isDrogue() const noexcept {
  return static_cast<bool>(drogue_Accessor);
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityStatusType::chooseDrogue(const std::string& method, uci::base::accessorType::AccessorType type) {
  boom_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityDrogueStatusType : type};
  if ((!drogue_Accessor) || (drogue_Accessor->getAccessorType() != requestedType)) {
    drogue_Accessor = RefuelCapabilityDrogueStatusType::create(type);
    if (!drogue_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *drogue_Accessor;
}

uci::type::RefuelCapabilityDrogueStatusType& RefuelCapabilityStatusType::chooseDrogue(uci::base::accessorType::AccessorType type) {
  return chooseDrogue("chooseDrogue", type);
}

std::unique_ptr<RefuelCapabilityStatusType> RefuelCapabilityStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::refuelCapabilityStatusType : type};
  return (requestedType == uci::type::accessorType::refuelCapabilityStatusType) ? boost::make_unique<RefuelCapabilityStatusType>() : nullptr;
}

/**  */
namespace RefuelCapabilityStatusType_Names {

constexpr const char* Extern_Type_Name{"RefuelCapabilityStatusType"};
constexpr const char* Boom_Name{"Boom"};
constexpr const char* Drogue_Name{"Drogue"};

} // namespace RefuelCapabilityStatusType_Names

void RefuelCapabilityStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RefuelCapabilityStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RefuelCapabilityStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RefuelCapabilityStatusType_Names::Boom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseBoom().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + RefuelCapabilityStatusType_Names::Drogue_Name) {
      RefuelCapabilityDrogueStatusType::deserialize(valueType.second, accessor.chooseDrogue(), nodeName, nsPrefix);
    }
  }
}

std::string RefuelCapabilityStatusType::serialize(const uci::type::RefuelCapabilityStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RefuelCapabilityStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RefuelCapabilityStatusType_Names::Extern_Type_Name);
  }
  if (accessor.isBoom()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getBoom(), node, RefuelCapabilityStatusType_Names::Boom_Name);
  } else if (accessor.isDrogue()) {
    RefuelCapabilityDrogueStatusType::serialize(accessor.getDrogue(), node, RefuelCapabilityStatusType_Names::Drogue_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RefuelCapabilityStatusType>().release());
}

uci::type::RefuelCapabilityStatusType& RefuelCapabilityStatusType::create(const uci::type::RefuelCapabilityStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RefuelCapabilityStatusType> newAccessor{boost::make_unique<asb_uci::type::RefuelCapabilityStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RefuelCapabilityStatusType::destroy(uci::type::RefuelCapabilityStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::RefuelCapabilityStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

