/** @file ArrivalDataVarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ArrivalDataVarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ArrivalDataVarianceType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ArrivalDataVarianceType::ArrivalDataVarianceType() = default;

ArrivalDataVarianceType::~ArrivalDataVarianceType() = default;

void ArrivalDataVarianceType::copy(const uci::type::ArrivalDataVarianceType& accessor) {
  copyImpl(accessor, false);
}

void ArrivalDataVarianceType::copyImpl(const uci::type::ArrivalDataVarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ArrivalDataVarianceType&>(accessor);
    if (accessorImpl.hasTimeOfArrival()) {
      setTimeOfArrival(accessorImpl.getTimeOfArrival());
    } else {
      clearTimeOfArrival();
    }
    if (accessorImpl.hasTimeDifferenceOfArrival()) {
      setTimeDifferenceOfArrival(accessorImpl.getTimeDifferenceOfArrival());
    } else {
      clearTimeDifferenceOfArrival();
    }
    if (accessorImpl.hasFrequencyOfArrival()) {
      setFrequencyOfArrival(accessorImpl.getFrequencyOfArrival());
    } else {
      clearFrequencyOfArrival();
    }
    if (accessorImpl.hasFrequencyDifferenceOfArrival()) {
      setFrequencyDifferenceOfArrival(accessorImpl.getFrequencyDifferenceOfArrival());
    } else {
      clearFrequencyDifferenceOfArrival();
    }
  }
}

void ArrivalDataVarianceType::reset() noexcept {
  clearTimeOfArrival();
  clearTimeDifferenceOfArrival();
  clearFrequencyOfArrival();
  clearFrequencyDifferenceOfArrival();
}

xs::Double ArrivalDataVarianceType::getTimeOfArrival() const {
  if (timeOfArrival_Accessor) {
    return *timeOfArrival_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeOfArrival(): An attempt was made to get an optional field that was not enabled, call hasTimeOfArrival() to determine if it is safe to call getTimeOfArrival()");
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::setTimeOfArrival(xs::Double value) {
  timeOfArrival_Accessor = value;
  return *this;
}

bool ArrivalDataVarianceType::hasTimeOfArrival() const noexcept {
  return timeOfArrival_Accessor.has_value();
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::clearTimeOfArrival() noexcept {
  timeOfArrival_Accessor.reset();
  return *this;
}

xs::Double ArrivalDataVarianceType::getTimeDifferenceOfArrival() const {
  if (timeDifferenceOfArrival_Accessor) {
    return *timeDifferenceOfArrival_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeDifferenceOfArrival(): An attempt was made to get an optional field that was not enabled, call hasTimeDifferenceOfArrival() to determine if it is safe to call getTimeDifferenceOfArrival()");
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::setTimeDifferenceOfArrival(xs::Double value) {
  timeDifferenceOfArrival_Accessor = value;
  return *this;
}

bool ArrivalDataVarianceType::hasTimeDifferenceOfArrival() const noexcept {
  return timeDifferenceOfArrival_Accessor.has_value();
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::clearTimeDifferenceOfArrival() noexcept {
  timeDifferenceOfArrival_Accessor.reset();
  return *this;
}

xs::Double ArrivalDataVarianceType::getFrequencyOfArrival() const {
  if (frequencyOfArrival_Accessor) {
    return *frequencyOfArrival_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyOfArrival(): An attempt was made to get an optional field that was not enabled, call hasFrequencyOfArrival() to determine if it is safe to call getFrequencyOfArrival()");
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::setFrequencyOfArrival(xs::Double value) {
  frequencyOfArrival_Accessor = value;
  return *this;
}

bool ArrivalDataVarianceType::hasFrequencyOfArrival() const noexcept {
  return frequencyOfArrival_Accessor.has_value();
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::clearFrequencyOfArrival() noexcept {
  frequencyOfArrival_Accessor.reset();
  return *this;
}

xs::Double ArrivalDataVarianceType::getFrequencyDifferenceOfArrival() const {
  if (frequencyDifferenceOfArrival_Accessor) {
    return *frequencyDifferenceOfArrival_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequencyDifferenceOfArrival(): An attempt was made to get an optional field that was not enabled, call hasFrequencyDifferenceOfArrival() to determine if it is safe to call getFrequencyDifferenceOfArrival()");
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::setFrequencyDifferenceOfArrival(xs::Double value) {
  frequencyDifferenceOfArrival_Accessor = value;
  return *this;
}

bool ArrivalDataVarianceType::hasFrequencyDifferenceOfArrival() const noexcept {
  return frequencyDifferenceOfArrival_Accessor.has_value();
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::clearFrequencyDifferenceOfArrival() noexcept {
  frequencyDifferenceOfArrival_Accessor.reset();
  return *this;
}

std::unique_ptr<ArrivalDataVarianceType> ArrivalDataVarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::arrivalDataVarianceType : type};
  return (requestedType == uci::type::accessorType::arrivalDataVarianceType) ? boost::make_unique<ArrivalDataVarianceType>() : nullptr;
}

/**  */
namespace ArrivalDataVarianceType_Names {

constexpr const char* Extern_Type_Name{"ArrivalDataVarianceType"};
constexpr const char* TimeOfArrival_Name{"TimeOfArrival"};
constexpr const char* TimeDifferenceOfArrival_Name{"TimeDifferenceOfArrival"};
constexpr const char* FrequencyOfArrival_Name{"FrequencyOfArrival"};
constexpr const char* FrequencyDifferenceOfArrival_Name{"FrequencyDifferenceOfArrival"};

} // namespace ArrivalDataVarianceType_Names

void ArrivalDataVarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ArrivalDataVarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ArrivalDataVarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ArrivalDataVarianceType_Names::TimeOfArrival_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeOfArrival(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ArrivalDataVarianceType_Names::TimeDifferenceOfArrival_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeDifferenceOfArrival(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ArrivalDataVarianceType_Names::FrequencyOfArrival_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyOfArrival(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ArrivalDataVarianceType_Names::FrequencyDifferenceOfArrival_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyDifferenceOfArrival(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ArrivalDataVarianceType::serialize(const uci::type::ArrivalDataVarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ArrivalDataVarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ArrivalDataVarianceType_Names::Extern_Type_Name);
  }
  if (accessor.hasTimeOfArrival()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTimeOfArrival(), node, ArrivalDataVarianceType_Names::TimeOfArrival_Name);
  }
  if (accessor.hasTimeDifferenceOfArrival()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getTimeDifferenceOfArrival(), node, ArrivalDataVarianceType_Names::TimeDifferenceOfArrival_Name);
  }
  if (accessor.hasFrequencyOfArrival()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyOfArrival(), node, ArrivalDataVarianceType_Names::FrequencyOfArrival_Name);
  }
  if (accessor.hasFrequencyDifferenceOfArrival()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyDifferenceOfArrival(), node, ArrivalDataVarianceType_Names::FrequencyDifferenceOfArrival_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ArrivalDataVarianceType>().release());
}

uci::type::ArrivalDataVarianceType& ArrivalDataVarianceType::create(const uci::type::ArrivalDataVarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ArrivalDataVarianceType> newAccessor{boost::make_unique<asb_uci::type::ArrivalDataVarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ArrivalDataVarianceType::destroy(uci::type::ArrivalDataVarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ArrivalDataVarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

