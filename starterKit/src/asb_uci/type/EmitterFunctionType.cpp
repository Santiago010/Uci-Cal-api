/** @file EmitterFunctionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EmitterFunctionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmitterFunctionType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EmitterFunctionType::EmitterFunctionType() = default;

EmitterFunctionType::~EmitterFunctionType() = default;

void EmitterFunctionType::copy(const uci::type::EmitterFunctionType& accessor) {
  copyImpl(accessor, false);
}

void EmitterFunctionType::copyImpl(const uci::type::EmitterFunctionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const EmitterFunctionType&>(accessor);
    setEmitterFunction(accessorImpl.emitterFunction_Accessor);
    if (accessorImpl.customEmitterFunction_Accessor) {
      setCustomEmitterFunction(*(accessorImpl.customEmitterFunction_Accessor));
    } else {
      customEmitterFunction_Accessor.reset();
    }
    if (accessorImpl.customEmitterFunctionDescription_Accessor) {
      setCustomEmitterFunctionDescription(*(accessorImpl.customEmitterFunctionDescription_Accessor));
    } else {
      customEmitterFunctionDescription_Accessor.reset();
    }
  }
}

void EmitterFunctionType::reset() noexcept {
  emitterFunction_Accessor = 0;
  customEmitterFunction_Accessor.reset();
  customEmitterFunctionDescription_Accessor.reset();
}

xs::UnsignedInt EmitterFunctionType::getEmitterFunction() const {
  return emitterFunction_Accessor;
}

uci::type::EmitterFunctionType& EmitterFunctionType::setEmitterFunction(xs::UnsignedInt value) {
  emitterFunction_Accessor = value;
  return *this;
}


uci::type::ForeignKeyType& EmitterFunctionType::getCustomEmitterFunction_() const {
  if (customEmitterFunction_Accessor) {
    return *customEmitterFunction_Accessor;
  }
  throw uci::base::UCIException("Error in getCustomEmitterFunction(): An attempt was made to get an optional field that was not enabled, call hasCustomEmitterFunction() to determine if it is safe to call getCustomEmitterFunction()");
}

const uci::type::ForeignKeyType& EmitterFunctionType::getCustomEmitterFunction() const {
  return getCustomEmitterFunction_();
}

uci::type::ForeignKeyType& EmitterFunctionType::getCustomEmitterFunction() {
  return getCustomEmitterFunction_();
}

uci::type::EmitterFunctionType& EmitterFunctionType::setCustomEmitterFunction(const uci::type::ForeignKeyType& accessor) {
  enableCustomEmitterFunction(accessor.getAccessorType());
  if (&accessor != customEmitterFunction_Accessor.get()) {
    customEmitterFunction_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool EmitterFunctionType::hasCustomEmitterFunction() const noexcept {
  return static_cast<bool>(customEmitterFunction_Accessor);
}

uci::type::ForeignKeyType& EmitterFunctionType::enableCustomEmitterFunction(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!customEmitterFunction_Accessor) || (customEmitterFunction_Accessor->getAccessorType() != requestedType)) {
    customEmitterFunction_Accessor = ForeignKeyType::create(requestedType);
    if (!customEmitterFunction_Accessor) {
      throw uci::base::UCIException("Error in enableCustomEmitterFunction(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *customEmitterFunction_Accessor;
}

uci::type::EmitterFunctionType& EmitterFunctionType::clearCustomEmitterFunction() noexcept {
  customEmitterFunction_Accessor.reset();
  return *this;
}

uci::type::VisibleString256Type& EmitterFunctionType::getCustomEmitterFunctionDescription_() const {
  if (customEmitterFunctionDescription_Accessor) {
    return *customEmitterFunctionDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getCustomEmitterFunctionDescription(): An attempt was made to get an optional field that was not enabled, call hasCustomEmitterFunctionDescription() to determine if it is safe to call getCustomEmitterFunctionDescription()");
}

const uci::type::VisibleString256Type& EmitterFunctionType::getCustomEmitterFunctionDescription() const {
  return getCustomEmitterFunctionDescription_();
}

uci::type::VisibleString256Type& EmitterFunctionType::getCustomEmitterFunctionDescription() {
  return getCustomEmitterFunctionDescription_();
}

uci::type::EmitterFunctionType& EmitterFunctionType::setCustomEmitterFunctionDescription(const uci::type::VisibleString256Type& value) {
  return setCustomEmitterFunctionDescription(value.c_str());
}

uci::type::EmitterFunctionType& EmitterFunctionType::setCustomEmitterFunctionDescription(const std::string& value) {
  return setCustomEmitterFunctionDescription(value.c_str());
}

uci::type::EmitterFunctionType& EmitterFunctionType::setCustomEmitterFunctionDescription(const char* value) {
  enableCustomEmitterFunctionDescription().setStringValue(value);
  return *this;
}

bool EmitterFunctionType::hasCustomEmitterFunctionDescription() const noexcept {
  return static_cast<bool>(customEmitterFunctionDescription_Accessor);
}

uci::type::VisibleString256Type& EmitterFunctionType::enableCustomEmitterFunctionDescription(uci::base::accessorType::AccessorType type) {
  if (!customEmitterFunctionDescription_Accessor) {
    customEmitterFunctionDescription_Accessor = boost::make_unique<std::string>("");
  }
  return *customEmitterFunctionDescription_Accessor;
}

uci::type::EmitterFunctionType& EmitterFunctionType::clearCustomEmitterFunctionDescription() noexcept {
  customEmitterFunctionDescription_Accessor.reset();
  return *this;
}

std::unique_ptr<EmitterFunctionType> EmitterFunctionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emitterFunctionType : type};
  return (requestedType == uci::type::accessorType::emitterFunctionType) ? boost::make_unique<EmitterFunctionType>() : nullptr;
}

/**  */
namespace EmitterFunctionType_Names {

constexpr const char* Extern_Type_Name{"EmitterFunctionType"};
constexpr const char* EmitterFunction_Name{"EmitterFunction"};
constexpr const char* CustomEmitterFunction_Name{"CustomEmitterFunction"};
constexpr const char* CustomEmitterFunctionDescription_Name{"CustomEmitterFunctionDescription"};

} // namespace EmitterFunctionType_Names

void EmitterFunctionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EmitterFunctionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EmitterFunctionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EmitterFunctionType_Names::EmitterFunction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmitterFunction(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EmitterFunctionType_Names::CustomEmitterFunction_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCustomEmitterFunction(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EmitterFunctionType_Names::CustomEmitterFunctionDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCustomEmitterFunctionDescription(*value);
      }
    }
  }
}

std::string EmitterFunctionType::serialize(const uci::type::EmitterFunctionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EmitterFunctionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EmitterFunctionType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEmitterFunction(), node, EmitterFunctionType_Names::EmitterFunction_Name);
  if (accessor.hasCustomEmitterFunction()) {
    ForeignKeyType::serialize(accessor.getCustomEmitterFunction(), node, EmitterFunctionType_Names::CustomEmitterFunction_Name);
  }
  if (accessor.hasCustomEmitterFunctionDescription()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getCustomEmitterFunctionDescription(), node, EmitterFunctionType_Names::CustomEmitterFunctionDescription_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EmitterFunctionType& EmitterFunctionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EmitterFunctionType>().release());
}

uci::type::EmitterFunctionType& EmitterFunctionType::create(const uci::type::EmitterFunctionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EmitterFunctionType> newAccessor{boost::make_unique<asb_uci::type::EmitterFunctionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EmitterFunctionType::destroy(uci::type::EmitterFunctionType& accessor) {
  delete dynamic_cast<asb_uci::type::EmitterFunctionType*>(&accessor);
}

} // namespace type

} // namespace uci

