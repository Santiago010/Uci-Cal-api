/** @file EntityIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/EntityIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IdentityConfidenceType.h"
#include "../../../include/asb_uci/type/QualifyingTagsType.h"
#include "../../../include/asb_uci/type/TimeFunctionType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityIdentityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/QualifyingTagsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TimeFunctionType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EntityIdentityType::EntityIdentityType()
  : qualifyingTags_Accessor{boost::make_unique<QualifyingTags>(0, SIZE_MAX)},
    associatedTime_Accessor{boost::make_unique<AssociatedTime>(0, 12)} {
}

EntityIdentityType::~EntityIdentityType() = default;

void EntityIdentityType::copy(const uci::type::EntityIdentityType& accessor) {
  copyImpl(accessor, false);
}

void EntityIdentityType::copyImpl(const uci::type::EntityIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    IdentityConfidenceType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EntityIdentityType&>(accessor);
    if (accessorImpl.hasSelfReportedIdentity()) {
      setSelfReportedIdentity(accessorImpl.getSelfReportedIdentity());
    } else {
      clearSelfReportedIdentity();
    }
    if (accessorImpl.hasDifferenceIndicator()) {
      setDifferenceIndicator(accessorImpl.getDifferenceIndicator());
    } else {
      clearDifferenceIndicator();
    }
    setIdentityTimestamp(accessorImpl.identityTimestamp_Accessor);
    setQualifyingTags(*(accessorImpl.qualifyingTags_Accessor));
    setAssociatedTime(*(accessorImpl.associatedTime_Accessor));
  }
}

void EntityIdentityType::reset() noexcept {
  IdentityConfidenceType::reset();
  clearSelfReportedIdentity();
  clearDifferenceIndicator();
  identityTimestamp_Accessor = 0;
  qualifyingTags_Accessor->reset();
  associatedTime_Accessor->reset();
}

xs::Boolean EntityIdentityType::getSelfReportedIdentity() const {
  if (selfReportedIdentity_Accessor) {
    return *selfReportedIdentity_Accessor;
  }
  throw uci::base::UCIException("Error in getSelfReportedIdentity(): An attempt was made to get an optional field that was not enabled, call hasSelfReportedIdentity() to determine if it is safe to call getSelfReportedIdentity()");
}

uci::type::EntityIdentityType& EntityIdentityType::setSelfReportedIdentity(xs::Boolean value) {
  selfReportedIdentity_Accessor = value;
  return *this;
}

bool EntityIdentityType::hasSelfReportedIdentity() const noexcept {
  return selfReportedIdentity_Accessor.has_value();
}

uci::type::EntityIdentityType& EntityIdentityType::clearSelfReportedIdentity() noexcept {
  selfReportedIdentity_Accessor.reset();
  return *this;
}

xs::Boolean EntityIdentityType::getDifferenceIndicator() const {
  if (differenceIndicator_Accessor) {
    return *differenceIndicator_Accessor;
  }
  throw uci::base::UCIException("Error in getDifferenceIndicator(): An attempt was made to get an optional field that was not enabled, call hasDifferenceIndicator() to determine if it is safe to call getDifferenceIndicator()");
}

uci::type::EntityIdentityType& EntityIdentityType::setDifferenceIndicator(xs::Boolean value) {
  differenceIndicator_Accessor = value;
  return *this;
}

bool EntityIdentityType::hasDifferenceIndicator() const noexcept {
  return differenceIndicator_Accessor.has_value();
}

uci::type::EntityIdentityType& EntityIdentityType::clearDifferenceIndicator() noexcept {
  differenceIndicator_Accessor.reset();
  return *this;
}

uci::type::DateTimeTypeValue EntityIdentityType::getIdentityTimestamp() const {
  return identityTimestamp_Accessor;
}

uci::type::EntityIdentityType& EntityIdentityType::setIdentityTimestamp(uci::type::DateTimeTypeValue value) {
  identityTimestamp_Accessor = value;
  return *this;
}


const uci::type::EntityIdentityType::QualifyingTags& EntityIdentityType::getQualifyingTags() const {
  return *qualifyingTags_Accessor;
}

uci::type::EntityIdentityType::QualifyingTags& EntityIdentityType::getQualifyingTags() {
  return *qualifyingTags_Accessor;
}

uci::type::EntityIdentityType& EntityIdentityType::setQualifyingTags(const uci::type::EntityIdentityType::QualifyingTags& accessor) {
  if (&accessor != qualifyingTags_Accessor.get()) {
    qualifyingTags_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::EntityIdentityType::AssociatedTime& EntityIdentityType::getAssociatedTime() const {
  return *associatedTime_Accessor;
}

uci::type::EntityIdentityType::AssociatedTime& EntityIdentityType::getAssociatedTime() {
  return *associatedTime_Accessor;
}

uci::type::EntityIdentityType& EntityIdentityType::setAssociatedTime(const uci::type::EntityIdentityType::AssociatedTime& accessor) {
  if (&accessor != associatedTime_Accessor.get()) {
    associatedTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<EntityIdentityType> EntityIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityIdentityType : type};
  return (requestedType == uci::type::accessorType::entityIdentityType) ? boost::make_unique<EntityIdentityType>() : nullptr;
}

/**  */
namespace EntityIdentityType_Names {

constexpr const char* Extern_Type_Name{"EntityIdentityType"};
constexpr const char* SelfReportedIdentity_Name{"SelfReportedIdentity"};
constexpr const char* DifferenceIndicator_Name{"DifferenceIndicator"};
constexpr const char* IdentityTimestamp_Name{"IdentityTimestamp"};
constexpr const char* QualifyingTags_Name{"QualifyingTags"};
constexpr const char* AssociatedTime_Name{"AssociatedTime"};

} // namespace EntityIdentityType_Names

void EntityIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityIdentityType_Names::SelfReportedIdentity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelfReportedIdentity(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EntityIdentityType_Names::DifferenceIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDifferenceIndicator(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + EntityIdentityType_Names::IdentityTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIdentityTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + EntityIdentityType_Names::QualifyingTags_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityIdentityType::QualifyingTags& boundedList = accessor.getQualifyingTags();
        const uci::type::EntityIdentityType::QualifyingTags::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::QualifyingTagsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityIdentityType_Names::AssociatedTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityIdentityType::AssociatedTime& boundedList = accessor.getAssociatedTime();
        const uci::type::EntityIdentityType::AssociatedTime::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::TimeFunctionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  IdentityConfidenceType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EntityIdentityType::serialize(const uci::type::EntityIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EntityIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EntityIdentityType_Names::Extern_Type_Name);
  }
  IdentityConfidenceType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasSelfReportedIdentity()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelfReportedIdentity(), node, EntityIdentityType_Names::SelfReportedIdentity_Name);
  }
  if (accessor.hasDifferenceIndicator()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getDifferenceIndicator(), node, EntityIdentityType_Names::DifferenceIndicator_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getIdentityTimestamp(), node, EntityIdentityType_Names::IdentityTimestamp_Name);
  {
    const uci::type::EntityIdentityType::QualifyingTags& boundedList = accessor.getQualifyingTags();
    for (uci::type::EntityIdentityType::QualifyingTags::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::QualifyingTagsType::serialize(boundedList.at(i), node, EntityIdentityType_Names::QualifyingTags_Name);
    }
  }
  {
    const uci::type::EntityIdentityType::AssociatedTime& boundedList = accessor.getAssociatedTime();
    for (uci::type::EntityIdentityType::AssociatedTime::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::TimeFunctionType::serialize(boundedList.at(i), node, EntityIdentityType_Names::AssociatedTime_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EntityIdentityType& EntityIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EntityIdentityType>().release());
}

uci::type::EntityIdentityType& EntityIdentityType::create(const uci::type::EntityIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EntityIdentityType> newAccessor{boost::make_unique<asb_uci::type::EntityIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EntityIdentityType::destroy(uci::type::EntityIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::EntityIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

