/** @file PO_ComponentSettingsFocalPlaneArrayPixelScalingType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsB_Type.h"
#include "../../../include/asb_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocalPlaneArrayPixelScalingType::PO_ComponentSettingsFocalPlaneArrayPixelScalingType() = default;

PO_ComponentSettingsFocalPlaneArrayPixelScalingType::~PO_ComponentSettingsFocalPlaneArrayPixelScalingType() = default;

void PO_ComponentSettingsFocalPlaneArrayPixelScalingType::copy(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocalPlaneArrayPixelScalingType::copyImpl(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocalPlaneArrayPixelScalingType&>(accessor);
    if (accessorImpl.scalingSettings_Accessor) {
      setScalingSettings(*(accessorImpl.scalingSettings_Accessor));
    } else {
      scalingSettings_Accessor.reset();
    }
    if (accessorImpl.scalingControls_Accessor) {
      setScalingControls(*(accessorImpl.scalingControls_Accessor));
    } else {
      scalingControls_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsFocalPlaneArrayPixelScalingType::reset() noexcept {
  scalingSettings_Accessor.reset();
  scalingControls_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType::PO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoice PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getPO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoiceOrdinal() const noexcept {
  if (scalingSettings_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELSCALINGTYPE_CHOICE_SCALINGSETTINGS;
  }
  if (scalingControls_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELSCALINGTYPE_CHOICE_SCALINGCONTROLS;
  }
  return PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELSCALINGTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::setPO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType::PO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELSCALINGTYPE_CHOICE_SCALINGSETTINGS:
      chooseScalingSettings("setPO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoiceOrdinal", type);
      break;
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELSCALINGTYPE_CHOICE_SCALINGCONTROLS:
      chooseScalingControls("setPO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocalPlaneArrayPixelScalingTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getScalingSettings_() const {
  if (scalingSettings_Accessor) {
    return *scalingSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getScalingSettings(): Unable to get ScalingSettings, field not selected");
}

const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getScalingSettings() const {
  return getScalingSettings_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getScalingSettings() {
  return getScalingSettings_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::setScalingSettings(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType& accessor) {
  chooseScalingSettings();
  if (&accessor != scalingSettings_Accessor.get()) {
    scalingSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayPixelScalingType::isScalingSettings() const noexcept {
  return static_cast<bool>(scalingSettings_Accessor);
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::chooseScalingSettings(const std::string& method, uci::base::accessorType::AccessorType type) {
  scalingControls_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType : type};
  if ((!scalingSettings_Accessor) || (scalingSettings_Accessor->getAccessorType() != requestedType)) {
    scalingSettings_Accessor = PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType::create(type);
    if (!scalingSettings_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *scalingSettings_Accessor;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::chooseScalingSettings(uci::base::accessorType::AccessorType type) {
  return chooseScalingSettings("chooseScalingSettings", type);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getScalingControls_() const {
  if (scalingControls_Accessor) {
    return *scalingControls_Accessor;
  }
  throw uci::base::UCIException("Error in getScalingControls(): Unable to get ScalingControls, field not selected");
}

const uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getScalingControls() const {
  return getScalingControls_();
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::getScalingControls() {
  return getScalingControls_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::setScalingControls(const uci::type::ComponentControlsB_Type& accessor) {
  chooseScalingControls();
  if (&accessor != scalingControls_Accessor.get()) {
    scalingControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayPixelScalingType::isScalingControls() const noexcept {
  return static_cast<bool>(scalingControls_Accessor);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::chooseScalingControls(const std::string& method, uci::base::accessorType::AccessorType type) {
  scalingSettings_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsB_Type : type};
  if ((!scalingControls_Accessor) || (scalingControls_Accessor->getAccessorType() != requestedType)) {
    scalingControls_Accessor = ComponentControlsB_Type::create(type);
    if (!scalingControls_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *scalingControls_Accessor;
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::chooseScalingControls(uci::base::accessorType::AccessorType type) {
  return chooseScalingControls("chooseScalingControls", type);
}

std::unique_ptr<PO_ComponentSettingsFocalPlaneArrayPixelScalingType> PO_ComponentSettingsFocalPlaneArrayPixelScalingType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelScalingType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelScalingType) ? boost::make_unique<PO_ComponentSettingsFocalPlaneArrayPixelScalingType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocalPlaneArrayPixelScalingType"};
constexpr const char* ScalingSettings_Name{"ScalingSettings"};
constexpr const char* ScalingControls_Name{"ScalingControls"};

} // namespace PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names

void PO_ComponentSettingsFocalPlaneArrayPixelScalingType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::ScalingSettings_Name) {
      PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType::deserialize(valueType.second, accessor.chooseScalingSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::ScalingControls_Name) {
      ComponentControlsB_Type::deserialize(valueType.second, accessor.chooseScalingControls(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFocalPlaneArrayPixelScalingType::serialize(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::Extern_Type_Name);
  }
  if (accessor.isScalingSettings()) {
    PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType::serialize(accessor.getScalingSettings(), node, PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::ScalingSettings_Name);
  } else if (accessor.isScalingControls()) {
    ComponentControlsB_Type::serialize(accessor.getScalingControls(), node, PO_ComponentSettingsFocalPlaneArrayPixelScalingType_Names::ScalingControls_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType>().release());
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& PO_ComponentSettingsFocalPlaneArrayPixelScalingType::create(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocalPlaneArrayPixelScalingType::destroy(uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType*>(&accessor);
}

} // namespace type

} // namespace uci

