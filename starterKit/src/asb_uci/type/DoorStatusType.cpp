/** @file DoorStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DoorStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/DoorStateEnum.h"
#include "asb_uci/type/SupportCapabilityStatusBaseType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/DoorStateEnum.h"
#include "uci/type/DoorStatusType.h"
#include "uci/type/PercentType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DoorStatusType::DoorStatusType()
  : doorState_Accessor{boost::make_unique<DoorStateEnum>()},
    capabilityID_Accessor{boost::make_unique<CapabilityID>(0, SIZE_MAX)} {
}

DoorStatusType::~DoorStatusType() = default;

void DoorStatusType::copy(const uci::type::DoorStatusType& accessor) {
  copyImpl(accessor, false);
}

void DoorStatusType::copyImpl(const uci::type::DoorStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SupportCapabilityStatusBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const DoorStatusType&>(accessor);
    setDoorState(*(accessorImpl.doorState_Accessor));
    setCloseOnHungStore(accessorImpl.closeOnHungStore_Accessor);
    setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    if (accessorImpl.hasLocked()) {
      setLocked(accessorImpl.getLocked());
    } else {
      clearLocked();
    }
    if (accessorImpl.hasPercentOpen()) {
      setPercentOpen(accessorImpl.getPercentOpen());
    } else {
      clearPercentOpen();
    }
  }
}

void DoorStatusType::reset() noexcept {
  SupportCapabilityStatusBaseType::reset();
  doorState_Accessor->reset();
  closeOnHungStore_Accessor = false;
  capabilityID_Accessor->reset();
  clearLocked();
  clearPercentOpen();
}

const uci::type::DoorStateEnum& DoorStatusType::getDoorState() const {
  return *doorState_Accessor;
}

uci::type::DoorStateEnum& DoorStatusType::getDoorState() {
  return *doorState_Accessor;
}

uci::type::DoorStatusType& DoorStatusType::setDoorState(const uci::type::DoorStateEnum& accessor) {
  if (&accessor != doorState_Accessor.get()) {
    doorState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DoorStatusType& DoorStatusType::setDoorState(uci::type::DoorStateEnum::EnumerationItem value) {
  doorState_Accessor->setValue(value);
  return *this;
}


xs::Boolean DoorStatusType::getCloseOnHungStore() const {
  return closeOnHungStore_Accessor;
}

uci::type::DoorStatusType& DoorStatusType::setCloseOnHungStore(xs::Boolean value) {
  closeOnHungStore_Accessor = value;
  return *this;
}


const uci::type::DoorStatusType::CapabilityID& DoorStatusType::getCapabilityID() const {
  return *capabilityID_Accessor;
}

uci::type::DoorStatusType::CapabilityID& DoorStatusType::getCapabilityID() {
  return *capabilityID_Accessor;
}

uci::type::DoorStatusType& DoorStatusType::setCapabilityID(const uci::type::DoorStatusType::CapabilityID& accessor) {
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Boolean DoorStatusType::getLocked() const {
  if (locked_Accessor) {
    return *locked_Accessor;
  }
  throw uci::base::UCIException("Error in getLocked(): An attempt was made to get an optional field that was not enabled, call hasLocked() to determine if it is safe to call getLocked()");
}

uci::type::DoorStatusType& DoorStatusType::setLocked(xs::Boolean value) {
  locked_Accessor = value;
  return *this;
}

bool DoorStatusType::hasLocked() const noexcept {
  return locked_Accessor.has_value();
}

uci::type::DoorStatusType& DoorStatusType::clearLocked() noexcept {
  locked_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue DoorStatusType::getPercentOpen() const {
  if (percentOpen_Accessor) {
    return *percentOpen_Accessor;
  }
  throw uci::base::UCIException("Error in getPercentOpen(): An attempt was made to get an optional field that was not enabled, call hasPercentOpen() to determine if it is safe to call getPercentOpen()");
}

uci::type::DoorStatusType& DoorStatusType::setPercentOpen(uci::type::PercentTypeValue value) {
  percentOpen_Accessor = value;
  return *this;
}

bool DoorStatusType::hasPercentOpen() const noexcept {
  return percentOpen_Accessor.has_value();
}

uci::type::DoorStatusType& DoorStatusType::clearPercentOpen() noexcept {
  percentOpen_Accessor.reset();
  return *this;
}

std::unique_ptr<DoorStatusType> DoorStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::doorStatusType : type};
  return (requestedType == uci::type::accessorType::doorStatusType) ? boost::make_unique<DoorStatusType>() : nullptr;
}

/**  */
namespace DoorStatusType_Names {

constexpr const char* Extern_Type_Name{"DoorStatusType"};
constexpr const char* DoorState_Name{"DoorState"};
constexpr const char* CloseOnHungStore_Name{"CloseOnHungStore"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* PercentOpen_Name{"PercentOpen"};

} // namespace DoorStatusType_Names

void DoorStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DoorStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DoorStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DoorStatusType_Names::DoorState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDoorState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DoorStatusType_Names::CloseOnHungStore_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCloseOnHungStore(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + DoorStatusType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DoorStatusType::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::DoorStatusType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DoorStatusType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + DoorStatusType_Names::PercentOpen_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentOpen(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  SupportCapabilityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string DoorStatusType::serialize(const uci::type::DoorStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DoorStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DoorStatusType_Names::Extern_Type_Name);
  }
  SupportCapabilityStatusBaseType::serialize(accessor, node, "", false, false, false);
  DoorStateEnum::serialize(accessor.getDoorState(), node, DoorStatusType_Names::DoorState_Name, false);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getCloseOnHungStore(), node, DoorStatusType_Names::CloseOnHungStore_Name);
  {
    const uci::type::DoorStatusType::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::DoorStatusType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, DoorStatusType_Names::CapabilityID_Name);
    }
  }
  if (accessor.hasLocked()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, DoorStatusType_Names::Locked_Name);
  }
  if (accessor.hasPercentOpen()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentOpen(), node, DoorStatusType_Names::PercentOpen_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DoorStatusType& DoorStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DoorStatusType>().release());
}

uci::type::DoorStatusType& DoorStatusType::create(const uci::type::DoorStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DoorStatusType> newAccessor{boost::make_unique<asb_uci::type::DoorStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DoorStatusType::destroy(uci::type::DoorStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::DoorStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

