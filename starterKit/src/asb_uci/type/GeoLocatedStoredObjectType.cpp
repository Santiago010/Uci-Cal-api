/** @file GeoLocatedStoredObjectType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/GeoLocatedStoredObjectType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmergencyReferenceOpPointType.h"
#include "asb_uci/type/EntityDataType.h"
#include "asb_uci/type/OpLineMDT.h"
#include "asb_uci/type/OpVolumeMDT.h"
#include "asb_uci/type/OpZoneMDT.h"
#include "asb_uci/type/SystemDataType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmergencyReferenceOpPointType.h"
#include "uci/type/EntityDataType.h"
#include "uci/type/GeoLocatedStoredObjectType.h"
#include "uci/type/OpLineMDT.h"
#include "uci/type/OpVolumeMDT.h"
#include "uci/type/OpZoneMDT.h"
#include "uci/type/SystemDataType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

GeoLocatedStoredObjectType::GeoLocatedStoredObjectType() = default;

GeoLocatedStoredObjectType::~GeoLocatedStoredObjectType() = default;

void GeoLocatedStoredObjectType::copy(const uci::type::GeoLocatedStoredObjectType& accessor) {
  copyImpl(accessor, false);
}

void GeoLocatedStoredObjectType::copyImpl(const uci::type::GeoLocatedStoredObjectType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const GeoLocatedStoredObjectType&>(accessor);
    if (accessorImpl.entity_Accessor) {
      setEntity(*(accessorImpl.entity_Accessor));
    } else {
      entity_Accessor.reset();
    }
    if (accessorImpl.system_Accessor) {
      setSystem(*(accessorImpl.system_Accessor));
    } else {
      system_Accessor.reset();
    }
    if (accessorImpl.opPoint_Accessor) {
      setOpPoint(*(accessorImpl.opPoint_Accessor));
    } else {
      opPoint_Accessor.reset();
    }
    if (accessorImpl.opLine_Accessor) {
      setOpLine(*(accessorImpl.opLine_Accessor));
    } else {
      opLine_Accessor.reset();
    }
    if (accessorImpl.opZone_Accessor) {
      setOpZone(*(accessorImpl.opZone_Accessor));
    } else {
      opZone_Accessor.reset();
    }
    if (accessorImpl.opVolume_Accessor) {
      setOpVolume(*(accessorImpl.opVolume_Accessor));
    } else {
      opVolume_Accessor.reset();
    }
  }
}

void GeoLocatedStoredObjectType::reset() noexcept {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
}

uci::type::GeoLocatedStoredObjectType::GeoLocatedStoredObjectTypeChoice GeoLocatedStoredObjectType::getGeoLocatedStoredObjectTypeChoiceOrdinal() const noexcept {
  if (entity_Accessor) {
    return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_ENTITY;
  }
  if (system_Accessor) {
    return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_SYSTEM;
  }
  if (opPoint_Accessor) {
    return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPPOINT;
  }
  if (opLine_Accessor) {
    return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPLINE;
  }
  if (opZone_Accessor) {
    return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPZONE;
  }
  if (opVolume_Accessor) {
    return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPVOLUME;
  }
  return GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_NONE;
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setGeoLocatedStoredObjectTypeChoiceOrdinal(uci::type::GeoLocatedStoredObjectType::GeoLocatedStoredObjectTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_ENTITY:
      chooseEntity("setGeoLocatedStoredObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_SYSTEM:
      chooseSystem("setGeoLocatedStoredObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPPOINT:
      chooseOpPoint("setGeoLocatedStoredObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPLINE:
      chooseOpLine("setGeoLocatedStoredObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPZONE:
      chooseOpZone("setGeoLocatedStoredObjectTypeChoiceOrdinal", type);
      break;
    case GEOLOCATEDSTOREDOBJECTTYPE_CHOICE_OPVOLUME:
      chooseOpVolume("setGeoLocatedStoredObjectTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setGeoLocatedStoredObjectTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::EntityDataType& GeoLocatedStoredObjectType::getEntity_() const {
  if (entity_Accessor) {
    return *entity_Accessor;
  }
  throw uci::base::UCIException("Error in getEntity(): Unable to get Entity, field not selected");
}

const uci::type::EntityDataType& GeoLocatedStoredObjectType::getEntity() const {
  return getEntity_();
}

uci::type::EntityDataType& GeoLocatedStoredObjectType::getEntity() {
  return getEntity_();
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setEntity(const uci::type::EntityDataType& accessor) {
  chooseEntity();
  if (&accessor != entity_Accessor.get()) {
    entity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedStoredObjectType::isEntity() const noexcept {
  return static_cast<bool>(entity_Accessor);
}

uci::type::EntityDataType& GeoLocatedStoredObjectType::chooseEntity(const std::string& method, uci::base::accessorType::AccessorType type) {
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityDataType : type};
  if ((!entity_Accessor) || (entity_Accessor->getAccessorType() != requestedType)) {
    entity_Accessor = EntityDataType::create(type);
    if (!entity_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entity_Accessor;
}

uci::type::EntityDataType& GeoLocatedStoredObjectType::chooseEntity(uci::base::accessorType::AccessorType type) {
  return chooseEntity("chooseEntity", type);
}

uci::type::SystemDataType& GeoLocatedStoredObjectType::getSystem_() const {
  if (system_Accessor) {
    return *system_Accessor;
  }
  throw uci::base::UCIException("Error in getSystem(): Unable to get System, field not selected");
}

const uci::type::SystemDataType& GeoLocatedStoredObjectType::getSystem() const {
  return getSystem_();
}

uci::type::SystemDataType& GeoLocatedStoredObjectType::getSystem() {
  return getSystem_();
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setSystem(const uci::type::SystemDataType& accessor) {
  chooseSystem();
  if (&accessor != system_Accessor.get()) {
    system_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedStoredObjectType::isSystem() const noexcept {
  return static_cast<bool>(system_Accessor);
}

uci::type::SystemDataType& GeoLocatedStoredObjectType::chooseSystem(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::systemDataType : type};
  if ((!system_Accessor) || (system_Accessor->getAccessorType() != requestedType)) {
    system_Accessor = SystemDataType::create(type);
    if (!system_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *system_Accessor;
}

uci::type::SystemDataType& GeoLocatedStoredObjectType::chooseSystem(uci::base::accessorType::AccessorType type) {
  return chooseSystem("chooseSystem", type);
}

uci::type::EmergencyReferenceOpPointType& GeoLocatedStoredObjectType::getOpPoint_() const {
  if (opPoint_Accessor) {
    return *opPoint_Accessor;
  }
  throw uci::base::UCIException("Error in getOpPoint(): Unable to get OpPoint, field not selected");
}

const uci::type::EmergencyReferenceOpPointType& GeoLocatedStoredObjectType::getOpPoint() const {
  return getOpPoint_();
}

uci::type::EmergencyReferenceOpPointType& GeoLocatedStoredObjectType::getOpPoint() {
  return getOpPoint_();
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setOpPoint(const uci::type::EmergencyReferenceOpPointType& accessor) {
  chooseOpPoint();
  if (&accessor != opPoint_Accessor.get()) {
    opPoint_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedStoredObjectType::isOpPoint() const noexcept {
  return static_cast<bool>(opPoint_Accessor);
}

uci::type::EmergencyReferenceOpPointType& GeoLocatedStoredObjectType::chooseOpPoint(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emergencyReferenceOpPointType : type};
  if ((!opPoint_Accessor) || (opPoint_Accessor->getAccessorType() != requestedType)) {
    opPoint_Accessor = EmergencyReferenceOpPointType::create(type);
    if (!opPoint_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opPoint_Accessor;
}

uci::type::EmergencyReferenceOpPointType& GeoLocatedStoredObjectType::chooseOpPoint(uci::base::accessorType::AccessorType type) {
  return chooseOpPoint("chooseOpPoint", type);
}

uci::type::OpLineMDT& GeoLocatedStoredObjectType::getOpLine_() const {
  if (opLine_Accessor) {
    return *opLine_Accessor;
  }
  throw uci::base::UCIException("Error in getOpLine(): Unable to get OpLine, field not selected");
}

const uci::type::OpLineMDT& GeoLocatedStoredObjectType::getOpLine() const {
  return getOpLine_();
}

uci::type::OpLineMDT& GeoLocatedStoredObjectType::getOpLine() {
  return getOpLine_();
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setOpLine(const uci::type::OpLineMDT& accessor) {
  chooseOpLine();
  if (&accessor != opLine_Accessor.get()) {
    opLine_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedStoredObjectType::isOpLine() const noexcept {
  return static_cast<bool>(opLine_Accessor);
}

uci::type::OpLineMDT& GeoLocatedStoredObjectType::chooseOpLine(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opZone_Accessor.reset();
  opVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opLineMDT : type};
  if ((!opLine_Accessor) || (opLine_Accessor->getAccessorType() != requestedType)) {
    opLine_Accessor = OpLineMDT::create(type);
    if (!opLine_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opLine_Accessor;
}

uci::type::OpLineMDT& GeoLocatedStoredObjectType::chooseOpLine(uci::base::accessorType::AccessorType type) {
  return chooseOpLine("chooseOpLine", type);
}

uci::type::OpZoneMDT& GeoLocatedStoredObjectType::getOpZone_() const {
  if (opZone_Accessor) {
    return *opZone_Accessor;
  }
  throw uci::base::UCIException("Error in getOpZone(): Unable to get OpZone, field not selected");
}

const uci::type::OpZoneMDT& GeoLocatedStoredObjectType::getOpZone() const {
  return getOpZone_();
}

uci::type::OpZoneMDT& GeoLocatedStoredObjectType::getOpZone() {
  return getOpZone_();
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setOpZone(const uci::type::OpZoneMDT& accessor) {
  chooseOpZone();
  if (&accessor != opZone_Accessor.get()) {
    opZone_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedStoredObjectType::isOpZone() const noexcept {
  return static_cast<bool>(opZone_Accessor);
}

uci::type::OpZoneMDT& GeoLocatedStoredObjectType::chooseOpZone(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opVolume_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opZoneMDT : type};
  if ((!opZone_Accessor) || (opZone_Accessor->getAccessorType() != requestedType)) {
    opZone_Accessor = OpZoneMDT::create(type);
    if (!opZone_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opZone_Accessor;
}

uci::type::OpZoneMDT& GeoLocatedStoredObjectType::chooseOpZone(uci::base::accessorType::AccessorType type) {
  return chooseOpZone("chooseOpZone", type);
}

uci::type::OpVolumeMDT& GeoLocatedStoredObjectType::getOpVolume_() const {
  if (opVolume_Accessor) {
    return *opVolume_Accessor;
  }
  throw uci::base::UCIException("Error in getOpVolume(): Unable to get OpVolume, field not selected");
}

const uci::type::OpVolumeMDT& GeoLocatedStoredObjectType::getOpVolume() const {
  return getOpVolume_();
}

uci::type::OpVolumeMDT& GeoLocatedStoredObjectType::getOpVolume() {
  return getOpVolume_();
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::setOpVolume(const uci::type::OpVolumeMDT& accessor) {
  chooseOpVolume();
  if (&accessor != opVolume_Accessor.get()) {
    opVolume_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool GeoLocatedStoredObjectType::isOpVolume() const noexcept {
  return static_cast<bool>(opVolume_Accessor);
}

uci::type::OpVolumeMDT& GeoLocatedStoredObjectType::chooseOpVolume(const std::string& method, uci::base::accessorType::AccessorType type) {
  entity_Accessor.reset();
  system_Accessor.reset();
  opPoint_Accessor.reset();
  opLine_Accessor.reset();
  opZone_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opVolumeMDT : type};
  if ((!opVolume_Accessor) || (opVolume_Accessor->getAccessorType() != requestedType)) {
    opVolume_Accessor = OpVolumeMDT::create(type);
    if (!opVolume_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opVolume_Accessor;
}

uci::type::OpVolumeMDT& GeoLocatedStoredObjectType::chooseOpVolume(uci::base::accessorType::AccessorType type) {
  return chooseOpVolume("chooseOpVolume", type);
}

std::unique_ptr<GeoLocatedStoredObjectType> GeoLocatedStoredObjectType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::geoLocatedStoredObjectType : type};
  return (requestedType == uci::type::accessorType::geoLocatedStoredObjectType) ? boost::make_unique<GeoLocatedStoredObjectType>() : nullptr;
}

/**  */
namespace GeoLocatedStoredObjectType_Names {

constexpr const char* Extern_Type_Name{"GeoLocatedStoredObjectType"};
constexpr const char* Entity_Name{"Entity"};
constexpr const char* System_Name{"System"};
constexpr const char* OpPoint_Name{"OpPoint"};
constexpr const char* OpLine_Name{"OpLine"};
constexpr const char* OpZone_Name{"OpZone"};
constexpr const char* OpVolume_Name{"OpVolume"};

} // namespace GeoLocatedStoredObjectType_Names

void GeoLocatedStoredObjectType::deserialize(const boost::property_tree::ptree& propTree, uci::type::GeoLocatedStoredObjectType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = GeoLocatedStoredObjectType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + GeoLocatedStoredObjectType_Names::Entity_Name) {
      EntityDataType::deserialize(valueType.second, accessor.chooseEntity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedStoredObjectType_Names::System_Name) {
      SystemDataType::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedStoredObjectType_Names::OpPoint_Name) {
      EmergencyReferenceOpPointType::deserialize(valueType.second, accessor.chooseOpPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedStoredObjectType_Names::OpLine_Name) {
      OpLineMDT::deserialize(valueType.second, accessor.chooseOpLine(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedStoredObjectType_Names::OpZone_Name) {
      OpZoneMDT::deserialize(valueType.second, accessor.chooseOpZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + GeoLocatedStoredObjectType_Names::OpVolume_Name) {
      OpVolumeMDT::deserialize(valueType.second, accessor.chooseOpVolume(), nodeName, nsPrefix);
    }
  }
}

std::string GeoLocatedStoredObjectType::serialize(const uci::type::GeoLocatedStoredObjectType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? GeoLocatedStoredObjectType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, GeoLocatedStoredObjectType_Names::Extern_Type_Name);
  }
  if (accessor.isEntity()) {
    EntityDataType::serialize(accessor.getEntity(), node, GeoLocatedStoredObjectType_Names::Entity_Name);
  } else if (accessor.isSystem()) {
    SystemDataType::serialize(accessor.getSystem(), node, GeoLocatedStoredObjectType_Names::System_Name);
  } else if (accessor.isOpPoint()) {
    EmergencyReferenceOpPointType::serialize(accessor.getOpPoint(), node, GeoLocatedStoredObjectType_Names::OpPoint_Name);
  } else if (accessor.isOpLine()) {
    OpLineMDT::serialize(accessor.getOpLine(), node, GeoLocatedStoredObjectType_Names::OpLine_Name);
  } else if (accessor.isOpZone()) {
    OpZoneMDT::serialize(accessor.getOpZone(), node, GeoLocatedStoredObjectType_Names::OpZone_Name);
  } else if (accessor.isOpVolume()) {
    OpVolumeMDT::serialize(accessor.getOpVolume(), node, GeoLocatedStoredObjectType_Names::OpVolume_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::GeoLocatedStoredObjectType>().release());
}

uci::type::GeoLocatedStoredObjectType& GeoLocatedStoredObjectType::create(const uci::type::GeoLocatedStoredObjectType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::GeoLocatedStoredObjectType> newAccessor{boost::make_unique<asb_uci::type::GeoLocatedStoredObjectType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void GeoLocatedStoredObjectType::destroy(uci::type::GeoLocatedStoredObjectType& accessor) {
  delete dynamic_cast<asb_uci::type::GeoLocatedStoredObjectType*>(&accessor);
}

} // namespace type

} // namespace uci

