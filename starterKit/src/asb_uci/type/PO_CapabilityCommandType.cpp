/** @file PO_CapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_CapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/CapabilityCommandBaseType.h"
#include "../../../include/asb_uci/type/CollectionPolicyEnum.h"
#include "../../../include/asb_uci/type/PO_CollectionConstraintsSettingsType.h"
#include "../../../include/asb_uci/type/PO_ComponentSettingsType.h"
#include "../../../include/asb_uci/type/PO_ProductOutputCommandImageryType.h"
#include "../../../include/asb_uci/type/PO_SubCapabilitySettingsType.h"
#include "../../../include/asb_uci/type/PO_TargetType.h"
#include "../../../include/asb_uci/type/PO_TrackDetailsType.h"
#include "../../../include/asb_uci/type/PairIdentifierEnum.h"
#include "../../../include/asb_uci/type/RepetitionType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CollectionPolicyEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CapabilityCommandType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_CollectionConstraintsSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ProductOutputCommandImageryType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_SubCapabilitySettingsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_TrackDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PairIdentifierEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RepetitionType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_CapabilityCommandType::PO_CapabilityCommandType()
  : subCapability_Accessor{boost::make_unique<SubCapability>(0, SIZE_MAX)},
    componentSettings_Accessor{boost::make_unique<ComponentSettings>(0, SIZE_MAX)},
    productOutput_Accessor{boost::make_unique<ProductOutput>(0, SIZE_MAX)} {
}

PO_CapabilityCommandType::~PO_CapabilityCommandType() = default;

void PO_CapabilityCommandType::copy(const uci::type::PO_CapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void PO_CapabilityCommandType::copyImpl(const uci::type::PO_CapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const PO_CapabilityCommandType&>(accessor);
    if (accessorImpl.pointing_Accessor) {
      setPointing(*(accessorImpl.pointing_Accessor));
    } else {
      pointing_Accessor.reset();
    }
    setSubCapability(*(accessorImpl.subCapability_Accessor));
    setComponentSettings(*(accessorImpl.componentSettings_Accessor));
    if (accessorImpl.collectionConstraints_Accessor) {
      setCollectionConstraints(*(accessorImpl.collectionConstraints_Accessor));
    } else {
      collectionConstraints_Accessor.reset();
    }
    if (accessorImpl.trackDetails_Accessor) {
      setTrackDetails(*(accessorImpl.trackDetails_Accessor));
    } else {
      trackDetails_Accessor.reset();
    }
    if (accessorImpl.collectionPolicy_Accessor) {
      setCollectionPolicy(*(accessorImpl.collectionPolicy_Accessor));
    } else {
      collectionPolicy_Accessor.reset();
    }
    if (accessorImpl.pairIdentifier_Accessor) {
      setPairIdentifier(*(accessorImpl.pairIdentifier_Accessor));
    } else {
      pairIdentifier_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
    setProductOutput(*(accessorImpl.productOutput_Accessor));
  }
}

void PO_CapabilityCommandType::reset() noexcept {
  CapabilityCommandBaseType::reset();
  pointing_Accessor.reset();
  subCapability_Accessor->reset();
  componentSettings_Accessor->reset();
  collectionConstraints_Accessor.reset();
  trackDetails_Accessor.reset();
  collectionPolicy_Accessor.reset();
  pairIdentifier_Accessor.reset();
  repetition_Accessor.reset();
  productOutput_Accessor->reset();
}

uci::type::PO_TargetType& PO_CapabilityCommandType::getPointing_() const {
  if (pointing_Accessor) {
    return *pointing_Accessor;
  }
  throw uci::base::UCIException("Error in getPointing(): An attempt was made to get an optional field that was not enabled, call hasPointing() to determine if it is safe to call getPointing()");
}

const uci::type::PO_TargetType& PO_CapabilityCommandType::getPointing() const {
  return getPointing_();
}

uci::type::PO_TargetType& PO_CapabilityCommandType::getPointing() {
  return getPointing_();
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setPointing(const uci::type::PO_TargetType& accessor) {
  enablePointing();
  if (&accessor != pointing_Accessor.get()) {
    pointing_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityCommandType::hasPointing() const noexcept {
  return static_cast<bool>(pointing_Accessor);
}

uci::type::PO_TargetType& PO_CapabilityCommandType::enablePointing(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TargetType : type};
  if ((!pointing_Accessor) || (pointing_Accessor->getAccessorType() != requestedType)) {
    pointing_Accessor = PO_TargetType::create(requestedType);
    if (!pointing_Accessor) {
      throw uci::base::UCIException("Error in enablePointing(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pointing_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::clearPointing() noexcept {
  pointing_Accessor.reset();
  return *this;
}

const uci::type::PO_CapabilityCommandType::SubCapability& PO_CapabilityCommandType::getSubCapability() const {
  return *subCapability_Accessor;
}

uci::type::PO_CapabilityCommandType::SubCapability& PO_CapabilityCommandType::getSubCapability() {
  return *subCapability_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setSubCapability(const uci::type::PO_CapabilityCommandType::SubCapability& accessor) {
  if (&accessor != subCapability_Accessor.get()) {
    subCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_CapabilityCommandType::ComponentSettings& PO_CapabilityCommandType::getComponentSettings() const {
  return *componentSettings_Accessor;
}

uci::type::PO_CapabilityCommandType::ComponentSettings& PO_CapabilityCommandType::getComponentSettings() {
  return *componentSettings_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setComponentSettings(const uci::type::PO_CapabilityCommandType::ComponentSettings& accessor) {
  if (&accessor != componentSettings_Accessor.get()) {
    componentSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CapabilityCommandType::getCollectionConstraints_() const {
  if (collectionConstraints_Accessor) {
    return *collectionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionConstraints(): An attempt was made to get an optional field that was not enabled, call hasCollectionConstraints() to determine if it is safe to call getCollectionConstraints()");
}

const uci::type::PO_CollectionConstraintsSettingsType& PO_CapabilityCommandType::getCollectionConstraints() const {
  return getCollectionConstraints_();
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CapabilityCommandType::getCollectionConstraints() {
  return getCollectionConstraints_();
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setCollectionConstraints(const uci::type::PO_CollectionConstraintsSettingsType& accessor) {
  enableCollectionConstraints();
  if (&accessor != collectionConstraints_Accessor.get()) {
    collectionConstraints_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityCommandType::hasCollectionConstraints() const noexcept {
  return static_cast<bool>(collectionConstraints_Accessor);
}

uci::type::PO_CollectionConstraintsSettingsType& PO_CapabilityCommandType::enableCollectionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CollectionConstraintsSettingsType : type};
  if ((!collectionConstraints_Accessor) || (collectionConstraints_Accessor->getAccessorType() != requestedType)) {
    collectionConstraints_Accessor = PO_CollectionConstraintsSettingsType::create(requestedType);
    if (!collectionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionConstraints_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::clearCollectionConstraints() noexcept {
  collectionConstraints_Accessor.reset();
  return *this;
}

uci::type::PO_TrackDetailsType& PO_CapabilityCommandType::getTrackDetails_() const {
  if (trackDetails_Accessor) {
    return *trackDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getTrackDetails(): An attempt was made to get an optional field that was not enabled, call hasTrackDetails() to determine if it is safe to call getTrackDetails()");
}

const uci::type::PO_TrackDetailsType& PO_CapabilityCommandType::getTrackDetails() const {
  return getTrackDetails_();
}

uci::type::PO_TrackDetailsType& PO_CapabilityCommandType::getTrackDetails() {
  return getTrackDetails_();
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setTrackDetails(const uci::type::PO_TrackDetailsType& accessor) {
  enableTrackDetails();
  if (&accessor != trackDetails_Accessor.get()) {
    trackDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityCommandType::hasTrackDetails() const noexcept {
  return static_cast<bool>(trackDetails_Accessor);
}

uci::type::PO_TrackDetailsType& PO_CapabilityCommandType::enableTrackDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_TrackDetailsType : type};
  if ((!trackDetails_Accessor) || (trackDetails_Accessor->getAccessorType() != requestedType)) {
    trackDetails_Accessor = PO_TrackDetailsType::create(requestedType);
    if (!trackDetails_Accessor) {
      throw uci::base::UCIException("Error in enableTrackDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *trackDetails_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::clearTrackDetails() noexcept {
  trackDetails_Accessor.reset();
  return *this;
}

uci::type::CollectionPolicyEnum& PO_CapabilityCommandType::getCollectionPolicy_() const {
  if (collectionPolicy_Accessor) {
    return *collectionPolicy_Accessor;
  }
  throw uci::base::UCIException("Error in getCollectionPolicy(): An attempt was made to get an optional field that was not enabled, call hasCollectionPolicy() to determine if it is safe to call getCollectionPolicy()");
}

const uci::type::CollectionPolicyEnum& PO_CapabilityCommandType::getCollectionPolicy() const {
  return getCollectionPolicy_();
}

uci::type::CollectionPolicyEnum& PO_CapabilityCommandType::getCollectionPolicy() {
  return getCollectionPolicy_();
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setCollectionPolicy(const uci::type::CollectionPolicyEnum& accessor) {
  enableCollectionPolicy();
  if (&accessor != collectionPolicy_Accessor.get()) {
    collectionPolicy_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setCollectionPolicy(const uci::type::CollectionPolicyEnum::EnumerationItem value) {
  enableCollectionPolicy().setValue(value);
  return *this;
}

bool PO_CapabilityCommandType::hasCollectionPolicy() const noexcept {
  return static_cast<bool>(collectionPolicy_Accessor);
}

uci::type::CollectionPolicyEnum& PO_CapabilityCommandType::enableCollectionPolicy(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::collectionPolicyEnum : type};
  if ((!collectionPolicy_Accessor) || (collectionPolicy_Accessor->getAccessorType() != requestedType)) {
    collectionPolicy_Accessor = CollectionPolicyEnum::create(requestedType);
    if (!collectionPolicy_Accessor) {
      throw uci::base::UCIException("Error in enableCollectionPolicy(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *collectionPolicy_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::clearCollectionPolicy() noexcept {
  collectionPolicy_Accessor.reset();
  return *this;
}

uci::type::PairIdentifierEnum& PO_CapabilityCommandType::getPairIdentifier_() const {
  if (pairIdentifier_Accessor) {
    return *pairIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getPairIdentifier(): An attempt was made to get an optional field that was not enabled, call hasPairIdentifier() to determine if it is safe to call getPairIdentifier()");
}

const uci::type::PairIdentifierEnum& PO_CapabilityCommandType::getPairIdentifier() const {
  return getPairIdentifier_();
}

uci::type::PairIdentifierEnum& PO_CapabilityCommandType::getPairIdentifier() {
  return getPairIdentifier_();
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setPairIdentifier(const uci::type::PairIdentifierEnum& accessor) {
  enablePairIdentifier();
  if (&accessor != pairIdentifier_Accessor.get()) {
    pairIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setPairIdentifier(const uci::type::PairIdentifierEnum::EnumerationItem value) {
  enablePairIdentifier().setValue(value);
  return *this;
}

bool PO_CapabilityCommandType::hasPairIdentifier() const noexcept {
  return static_cast<bool>(pairIdentifier_Accessor);
}

uci::type::PairIdentifierEnum& PO_CapabilityCommandType::enablePairIdentifier(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pairIdentifierEnum : type};
  if ((!pairIdentifier_Accessor) || (pairIdentifier_Accessor->getAccessorType() != requestedType)) {
    pairIdentifier_Accessor = PairIdentifierEnum::create(requestedType);
    if (!pairIdentifier_Accessor) {
      throw uci::base::UCIException("Error in enablePairIdentifier(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *pairIdentifier_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::clearPairIdentifier() noexcept {
  pairIdentifier_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& PO_CapabilityCommandType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& PO_CapabilityCommandType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& PO_CapabilityCommandType::getRepetition() {
  return getRepetition_();
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_CapabilityCommandType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& PO_CapabilityCommandType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

const uci::type::PO_CapabilityCommandType::ProductOutput& PO_CapabilityCommandType::getProductOutput() const {
  return *productOutput_Accessor;
}

uci::type::PO_CapabilityCommandType::ProductOutput& PO_CapabilityCommandType::getProductOutput() {
  return *productOutput_Accessor;
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::setProductOutput(const uci::type::PO_CapabilityCommandType::ProductOutput& accessor) {
  if (&accessor != productOutput_Accessor.get()) {
    productOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<PO_CapabilityCommandType> PO_CapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_CapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::pO_CapabilityCommandType) ? boost::make_unique<PO_CapabilityCommandType>() : nullptr;
}

/**  */
namespace PO_CapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"PO_CapabilityCommandType"};
constexpr const char* Pointing_Name{"Pointing"};
constexpr const char* SubCapability_Name{"SubCapability"};
constexpr const char* ComponentSettings_Name{"ComponentSettings"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* TrackDetails_Name{"TrackDetails"};
constexpr const char* CollectionPolicy_Name{"CollectionPolicy"};
constexpr const char* PairIdentifier_Name{"PairIdentifier"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace PO_CapabilityCommandType_Names

void PO_CapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::Pointing_Name) {
      PO_TargetType::deserialize(valueType.second, accessor.enablePointing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::SubCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityCommandType::SubCapability& boundedList = accessor.getSubCapability();
        const uci::type::PO_CapabilityCommandType::SubCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::ComponentSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityCommandType::ComponentSettings& boundedList = accessor.getComponentSettings();
        const uci::type::PO_CapabilityCommandType::ComponentSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ComponentSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::CollectionConstraints_Name) {
      PO_CollectionConstraintsSettingsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::TrackDetails_Name) {
      PO_TrackDetailsType::deserialize(valueType.second, accessor.enableTrackDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::CollectionPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCollectionPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::PairIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePairIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::PO_CapabilityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_ProductOutputCommandImageryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string PO_CapabilityCommandType::serialize(const uci::type::PO_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_CapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CapabilityCommandType_Names::Extern_Type_Name);
  }
  CapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPointing()) {
    PO_TargetType::serialize(accessor.getPointing(), node, PO_CapabilityCommandType_Names::Pointing_Name);
  }
  {
    const uci::type::PO_CapabilityCommandType::SubCapability& boundedList = accessor.getSubCapability();
    for (uci::type::PO_CapabilityCommandType::SubCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_CapabilityCommandType_Names::SubCapability_Name);
    }
  }
  {
    const uci::type::PO_CapabilityCommandType::ComponentSettings& boundedList = accessor.getComponentSettings();
    for (uci::type::PO_CapabilityCommandType::ComponentSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ComponentSettingsType::serialize(boundedList.at(i), node, PO_CapabilityCommandType_Names::ComponentSettings_Name);
    }
  }
  if (accessor.hasCollectionConstraints()) {
    PO_CollectionConstraintsSettingsType::serialize(accessor.getCollectionConstraints(), node, PO_CapabilityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasTrackDetails()) {
    PO_TrackDetailsType::serialize(accessor.getTrackDetails(), node, PO_CapabilityCommandType_Names::TrackDetails_Name);
  }
  if (accessor.hasCollectionPolicy()) {
    CollectionPolicyEnum::serialize(accessor.getCollectionPolicy(), node, PO_CapabilityCommandType_Names::CollectionPolicy_Name, false);
  }
  if (accessor.hasPairIdentifier()) {
    PairIdentifierEnum::serialize(accessor.getPairIdentifier(), node, PO_CapabilityCommandType_Names::PairIdentifier_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, PO_CapabilityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::PO_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::PO_CapabilityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_ProductOutputCommandImageryType::serialize(boundedList.at(i), node, PO_CapabilityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_CapabilityCommandType>().release());
}

uci::type::PO_CapabilityCommandType& PO_CapabilityCommandType::create(const uci::type::PO_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_CapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::PO_CapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_CapabilityCommandType::destroy(uci::type::PO_CapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_CapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

