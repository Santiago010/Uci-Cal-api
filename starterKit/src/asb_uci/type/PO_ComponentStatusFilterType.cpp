/** @file PO_ComponentStatusFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentStatusFilterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsStatusType.h"
#include "../../../include/asb_uci/type/PO_ComponentStatusBandpassFrequencyType.h"
#include "../../../include/asb_uci/type/PO_FPA_ID_Type.h"
#include "../../../include/asb_uci/type/PO_FilterID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsStatusType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusBandpassFrequencyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentStatusFilterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FPA_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_FilterID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusFilterType::PO_ComponentStatusFilterType()
  : filterID_Accessor{boost::make_unique<PO_FilterID_Type>()},
    fPA_ID_Accessor{boost::make_unique<FPA_ID>(0, SIZE_MAX)},
    filterControlsStatus_Accessor{boost::make_unique<ComponentControlsStatusType>()} {
}

PO_ComponentStatusFilterType::~PO_ComponentStatusFilterType() = default;

void PO_ComponentStatusFilterType::copy(const uci::type::PO_ComponentStatusFilterType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusFilterType::copyImpl(const uci::type::PO_ComponentStatusFilterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusFilterType&>(accessor);
    setFilterID(*(accessorImpl.filterID_Accessor));
    setFPA_ID(*(accessorImpl.fPA_ID_Accessor));
    setFilterControlsStatus(*(accessorImpl.filterControlsStatus_Accessor));
    if (accessorImpl.bandpassFrequency_Accessor) {
      setBandpassFrequency(*(accessorImpl.bandpassFrequency_Accessor));
    } else {
      bandpassFrequency_Accessor.reset();
    }
  }
}

void PO_ComponentStatusFilterType::reset() noexcept {
  filterID_Accessor->reset();
  fPA_ID_Accessor->reset();
  filterControlsStatus_Accessor->reset();
  bandpassFrequency_Accessor.reset();
}

const uci::type::PO_FilterID_Type& PO_ComponentStatusFilterType::getFilterID() const {
  return *filterID_Accessor;
}

uci::type::PO_FilterID_Type& PO_ComponentStatusFilterType::getFilterID() {
  return *filterID_Accessor;
}

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::setFilterID(const uci::type::PO_FilterID_Type& accessor) {
  if (&accessor != filterID_Accessor.get()) {
    filterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::PO_ComponentStatusFilterType::FPA_ID& PO_ComponentStatusFilterType::getFPA_ID() const {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentStatusFilterType::FPA_ID& PO_ComponentStatusFilterType::getFPA_ID() {
  return *fPA_ID_Accessor;
}

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::setFPA_ID(const uci::type::PO_ComponentStatusFilterType::FPA_ID& accessor) {
  if (&accessor != fPA_ID_Accessor.get()) {
    fPA_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ComponentControlsStatusType& PO_ComponentStatusFilterType::getFilterControlsStatus() const {
  return *filterControlsStatus_Accessor;
}

uci::type::ComponentControlsStatusType& PO_ComponentStatusFilterType::getFilterControlsStatus() {
  return *filterControlsStatus_Accessor;
}

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::setFilterControlsStatus(const uci::type::ComponentControlsStatusType& accessor) {
  if (&accessor != filterControlsStatus_Accessor.get()) {
    filterControlsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PO_ComponentStatusBandpassFrequencyType& PO_ComponentStatusFilterType::getBandpassFrequency_() const {
  if (bandpassFrequency_Accessor) {
    return *bandpassFrequency_Accessor;
  }
  throw uci::base::UCIException("Error in getBandpassFrequency(): An attempt was made to get an optional field that was not enabled, call hasBandpassFrequency() to determine if it is safe to call getBandpassFrequency()");
}

const uci::type::PO_ComponentStatusBandpassFrequencyType& PO_ComponentStatusFilterType::getBandpassFrequency() const {
  return getBandpassFrequency_();
}

uci::type::PO_ComponentStatusBandpassFrequencyType& PO_ComponentStatusFilterType::getBandpassFrequency() {
  return getBandpassFrequency_();
}

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::setBandpassFrequency(const uci::type::PO_ComponentStatusBandpassFrequencyType& accessor) {
  enableBandpassFrequency();
  if (&accessor != bandpassFrequency_Accessor.get()) {
    bandpassFrequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFilterType::hasBandpassFrequency() const noexcept {
  return static_cast<bool>(bandpassFrequency_Accessor);
}

uci::type::PO_ComponentStatusBandpassFrequencyType& PO_ComponentStatusFilterType::enableBandpassFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusBandpassFrequencyType : type};
  if ((!bandpassFrequency_Accessor) || (bandpassFrequency_Accessor->getAccessorType() != requestedType)) {
    bandpassFrequency_Accessor = PO_ComponentStatusBandpassFrequencyType::create(requestedType);
    if (!bandpassFrequency_Accessor) {
      throw uci::base::UCIException("Error in enableBandpassFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *bandpassFrequency_Accessor;
}

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::clearBandpassFrequency() noexcept {
  bandpassFrequency_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentStatusFilterType> PO_ComponentStatusFilterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFilterType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusFilterType) ? boost::make_unique<PO_ComponentStatusFilterType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusFilterType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusFilterType"};
constexpr const char* FilterID_Name{"FilterID"};
constexpr const char* FPA_ID_Name{"FPA_ID"};
constexpr const char* FilterControlsStatus_Name{"FilterControlsStatus"};
constexpr const char* BandpassFrequency_Name{"BandpassFrequency"};

} // namespace PO_ComponentStatusFilterType_Names

void PO_ComponentStatusFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFilterType_Names::FilterID_Name) {
      PO_FilterID_Type::deserialize(valueType.second, accessor.getFilterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFilterType_Names::FPA_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusFilterType::FPA_ID& boundedList = accessor.getFPA_ID();
        const uci::type::PO_ComponentStatusFilterType::FPA_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::PO_FPA_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFilterType_Names::FilterControlsStatus_Name) {
      ComponentControlsStatusType::deserialize(valueType.second, accessor.getFilterControlsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFilterType_Names::BandpassFrequency_Name) {
      PO_ComponentStatusBandpassFrequencyType::deserialize(valueType.second, accessor.enableBandpassFrequency(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentStatusFilterType::serialize(const uci::type::PO_ComponentStatusFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusFilterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusFilterType_Names::Extern_Type_Name);
  }
  PO_FilterID_Type::serialize(accessor.getFilterID(), node, PO_ComponentStatusFilterType_Names::FilterID_Name);
  {
    const uci::type::PO_ComponentStatusFilterType::FPA_ID& boundedList = accessor.getFPA_ID();
    for (uci::type::PO_ComponentStatusFilterType::FPA_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::PO_FPA_ID_Type::serialize(boundedList.at(i), node, PO_ComponentStatusFilterType_Names::FPA_ID_Name);
    }
  }
  ComponentControlsStatusType::serialize(accessor.getFilterControlsStatus(), node, PO_ComponentStatusFilterType_Names::FilterControlsStatus_Name);
  if (accessor.hasBandpassFrequency()) {
    PO_ComponentStatusBandpassFrequencyType::serialize(accessor.getBandpassFrequency(), node, PO_ComponentStatusFilterType_Names::BandpassFrequency_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusFilterType>().release());
}

uci::type::PO_ComponentStatusFilterType& PO_ComponentStatusFilterType::create(const uci::type::PO_ComponentStatusFilterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusFilterType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusFilterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusFilterType::destroy(uci::type::PO_ComponentStatusFilterType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusFilterType*>(&accessor);
}

} // namespace type

} // namespace uci

