/** @file ActivityAgainstType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ActivityAgainstType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActivityActorID_ChoiceType.h"
#include "../../../include/asb_uci/type/EnvironmentEnum.h"
#include "../../../include/asb_uci/type/ForeignKeyType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityActorID_ChoiceType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityAgainstType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnvironmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ForeignKeyType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ActivityAgainstType::ActivityAgainstType()
  : actor_Accessor{boost::make_unique<ActivityActorID_ChoiceType>()},
    activityCategory_Accessor{boost::make_unique<EnvironmentEnum>()} {
}

ActivityAgainstType::~ActivityAgainstType() = default;

void ActivityAgainstType::copy(const uci::type::ActivityAgainstType& accessor) {
  copyImpl(accessor, false);
}

void ActivityAgainstType::copyImpl(const uci::type::ActivityAgainstType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ActivityAgainstType&>(accessor);
    setActor(*(accessorImpl.actor_Accessor));
    setActivity(accessorImpl.activity_Accessor);
    setActivityCategory(*(accessorImpl.activityCategory_Accessor));
    if (accessorImpl.customActivity_Accessor) {
      setCustomActivity(*(accessorImpl.customActivity_Accessor));
    } else {
      customActivity_Accessor.reset();
    }
  }
}

void ActivityAgainstType::reset() noexcept {
  actor_Accessor->reset();
  activity_Accessor = 0;
  activityCategory_Accessor->reset();
  customActivity_Accessor.reset();
}

const uci::type::ActivityActorID_ChoiceType& ActivityAgainstType::getActor() const {
  return *actor_Accessor;
}

uci::type::ActivityActorID_ChoiceType& ActivityAgainstType::getActor() {
  return *actor_Accessor;
}

uci::type::ActivityAgainstType& ActivityAgainstType::setActor(const uci::type::ActivityActorID_ChoiceType& accessor) {
  if (&accessor != actor_Accessor.get()) {
    actor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt ActivityAgainstType::getActivity() const {
  return activity_Accessor;
}

uci::type::ActivityAgainstType& ActivityAgainstType::setActivity(xs::UnsignedInt value) {
  activity_Accessor = value;
  return *this;
}


const uci::type::EnvironmentEnum& ActivityAgainstType::getActivityCategory() const {
  return *activityCategory_Accessor;
}

uci::type::EnvironmentEnum& ActivityAgainstType::getActivityCategory() {
  return *activityCategory_Accessor;
}

uci::type::ActivityAgainstType& ActivityAgainstType::setActivityCategory(const uci::type::EnvironmentEnum& accessor) {
  if (&accessor != activityCategory_Accessor.get()) {
    activityCategory_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ActivityAgainstType& ActivityAgainstType::setActivityCategory(uci::type::EnvironmentEnum::EnumerationItem value) {
  activityCategory_Accessor->setValue(value);
  return *this;
}


uci::type::ForeignKeyType& ActivityAgainstType::getCustomActivity_() const {
  if (customActivity_Accessor) {
    return *customActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getCustomActivity(): An attempt was made to get an optional field that was not enabled, call hasCustomActivity() to determine if it is safe to call getCustomActivity()");
}

const uci::type::ForeignKeyType& ActivityAgainstType::getCustomActivity() const {
  return getCustomActivity_();
}

uci::type::ForeignKeyType& ActivityAgainstType::getCustomActivity() {
  return getCustomActivity_();
}

uci::type::ActivityAgainstType& ActivityAgainstType::setCustomActivity(const uci::type::ForeignKeyType& accessor) {
  enableCustomActivity(accessor.getAccessorType());
  if (&accessor != customActivity_Accessor.get()) {
    customActivity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ActivityAgainstType::hasCustomActivity() const noexcept {
  return static_cast<bool>(customActivity_Accessor);
}

uci::type::ForeignKeyType& ActivityAgainstType::enableCustomActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!customActivity_Accessor) || (customActivity_Accessor->getAccessorType() != requestedType)) {
    customActivity_Accessor = ForeignKeyType::create(requestedType);
    if (!customActivity_Accessor) {
      throw uci::base::UCIException("Error in enableCustomActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *customActivity_Accessor;
}

uci::type::ActivityAgainstType& ActivityAgainstType::clearCustomActivity() noexcept {
  customActivity_Accessor.reset();
  return *this;
}

std::unique_ptr<ActivityAgainstType> ActivityAgainstType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityAgainstType : type};
  return (requestedType == uci::type::accessorType::activityAgainstType) ? boost::make_unique<ActivityAgainstType>() : nullptr;
}

/**  */
namespace ActivityAgainstType_Names {

constexpr const char* Extern_Type_Name{"ActivityAgainstType"};
constexpr const char* Actor_Name{"Actor"};
constexpr const char* Activity_Name{"Activity"};
constexpr const char* ActivityCategory_Name{"ActivityCategory"};
constexpr const char* CustomActivity_Name{"CustomActivity"};

} // namespace ActivityAgainstType_Names

void ActivityAgainstType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivityAgainstType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivityAgainstType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ActivityAgainstType_Names::Actor_Name) {
      ActivityActorID_ChoiceType::deserialize(valueType.second, accessor.getActor(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivityAgainstType_Names::Activity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActivity(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ActivityAgainstType_Names::ActivityCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getActivityCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ActivityAgainstType_Names::CustomActivity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCustomActivity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string ActivityAgainstType::serialize(const uci::type::ActivityAgainstType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ActivityAgainstType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ActivityAgainstType_Names::Extern_Type_Name);
  }
  ActivityActorID_ChoiceType::serialize(accessor.getActor(), node, ActivityAgainstType_Names::Actor_Name);
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getActivity(), node, ActivityAgainstType_Names::Activity_Name);
  EnvironmentEnum::serialize(accessor.getActivityCategory(), node, ActivityAgainstType_Names::ActivityCategory_Name, false);
  if (accessor.hasCustomActivity()) {
    ForeignKeyType::serialize(accessor.getCustomActivity(), node, ActivityAgainstType_Names::CustomActivity_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ActivityAgainstType& ActivityAgainstType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ActivityAgainstType>().release());
}

uci::type::ActivityAgainstType& ActivityAgainstType::create(const uci::type::ActivityAgainstType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ActivityAgainstType> newAccessor{boost::make_unique<asb_uci::type::ActivityAgainstType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ActivityAgainstType::destroy(uci::type::ActivityAgainstType& accessor) {
  delete dynamic_cast<asb_uci::type::ActivityAgainstType*>(&accessor);
}

} // namespace type

} // namespace uci

