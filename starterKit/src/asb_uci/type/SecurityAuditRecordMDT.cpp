/** @file SecurityAuditRecordMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SecurityAuditRecordMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EventSeverityEnum.h"
#include "../../../include/asb_uci/type/SecurityAuditRecordID_Type.h"
#include "../../../include/asb_uci/type/SecurityEventOutcomeEnum.h"
#include "../../../include/asb_uci/type/SecurityEventType.h"
#include "../../../include/asb_uci/type/ServiceID_Type.h"
#include "../../../include/asb_uci/type/SubsystemID_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EventSeverityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityAuditRecordID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityAuditRecordMDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityEventOutcomeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SecurityEventType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ServiceID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SubsystemID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SecurityAuditRecordMDT::SecurityAuditRecordMDT()
  : securityAuditRecordID_Accessor{boost::make_unique<SecurityAuditRecordID_Type>()},
    serviceID_Accessor{boost::make_unique<ServiceID_Type>()},
    eventType_Accessor{boost::make_unique<SecurityEventType>()},
    eventOutcome_Accessor{boost::make_unique<SecurityEventOutcomeEnum>()},
    eventSeverity_Accessor{boost::make_unique<EventSeverityEnum>()} {
}

SecurityAuditRecordMDT::~SecurityAuditRecordMDT() = default;

void SecurityAuditRecordMDT::copy(const uci::type::SecurityAuditRecordMDT& accessor) {
  copyImpl(accessor, false);
}

void SecurityAuditRecordMDT::copyImpl(const uci::type::SecurityAuditRecordMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SecurityAuditRecordMDT&>(accessor);
    setSecurityAuditRecordID(*(accessorImpl.securityAuditRecordID_Accessor));
    setEventTimestamp(accessorImpl.eventTimestamp_Accessor);
    setServiceID(*(accessorImpl.serviceID_Accessor));
    if (accessorImpl.subsystemID_Accessor) {
      setSubsystemID(*(accessorImpl.subsystemID_Accessor));
    } else {
      subsystemID_Accessor.reset();
    }
    setEventType(*(accessorImpl.eventType_Accessor));
    setEventOutcome(*(accessorImpl.eventOutcome_Accessor));
    setEventSeverity(*(accessorImpl.eventSeverity_Accessor));
  }
}

void SecurityAuditRecordMDT::reset() noexcept {
  securityAuditRecordID_Accessor->reset();
  eventTimestamp_Accessor = 0;
  serviceID_Accessor->reset();
  subsystemID_Accessor.reset();
  eventType_Accessor->reset();
  eventOutcome_Accessor->reset();
  eventSeverity_Accessor->reset();
}

const uci::type::SecurityAuditRecordID_Type& SecurityAuditRecordMDT::getSecurityAuditRecordID() const {
  return *securityAuditRecordID_Accessor;
}

uci::type::SecurityAuditRecordID_Type& SecurityAuditRecordMDT::getSecurityAuditRecordID() {
  return *securityAuditRecordID_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setSecurityAuditRecordID(const uci::type::SecurityAuditRecordID_Type& accessor) {
  if (&accessor != securityAuditRecordID_Accessor.get()) {
    securityAuditRecordID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue SecurityAuditRecordMDT::getEventTimestamp() const {
  return eventTimestamp_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setEventTimestamp(uci::type::DateTimeTypeValue value) {
  eventTimestamp_Accessor = value;
  return *this;
}


const uci::type::ServiceID_Type& SecurityAuditRecordMDT::getServiceID() const {
  return *serviceID_Accessor;
}

uci::type::ServiceID_Type& SecurityAuditRecordMDT::getServiceID() {
  return *serviceID_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setServiceID(const uci::type::ServiceID_Type& accessor) {
  if (&accessor != serviceID_Accessor.get()) {
    serviceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemID_Type& SecurityAuditRecordMDT::getSubsystemID_() const {
  if (subsystemID_Accessor) {
    return *subsystemID_Accessor;
  }
  throw uci::base::UCIException("Error in getSubsystemID(): An attempt was made to get an optional field that was not enabled, call hasSubsystemID() to determine if it is safe to call getSubsystemID()");
}

const uci::type::SubsystemID_Type& SecurityAuditRecordMDT::getSubsystemID() const {
  return getSubsystemID_();
}

uci::type::SubsystemID_Type& SecurityAuditRecordMDT::getSubsystemID() {
  return getSubsystemID_();
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setSubsystemID(const uci::type::SubsystemID_Type& accessor) {
  enableSubsystemID();
  if (&accessor != subsystemID_Accessor.get()) {
    subsystemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SecurityAuditRecordMDT::hasSubsystemID() const noexcept {
  return static_cast<bool>(subsystemID_Accessor);
}

uci::type::SubsystemID_Type& SecurityAuditRecordMDT::enableSubsystemID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemID_Type : type};
  if ((!subsystemID_Accessor) || (subsystemID_Accessor->getAccessorType() != requestedType)) {
    subsystemID_Accessor = SubsystemID_Type::create(requestedType);
    if (!subsystemID_Accessor) {
      throw uci::base::UCIException("Error in enableSubsystemID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subsystemID_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::clearSubsystemID() noexcept {
  subsystemID_Accessor.reset();
  return *this;
}

const uci::type::SecurityEventType& SecurityAuditRecordMDT::getEventType() const {
  return *eventType_Accessor;
}

uci::type::SecurityEventType& SecurityAuditRecordMDT::getEventType() {
  return *eventType_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setEventType(const uci::type::SecurityEventType& accessor) {
  if (&accessor != eventType_Accessor.get()) {
    eventType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SecurityEventOutcomeEnum& SecurityAuditRecordMDT::getEventOutcome() const {
  return *eventOutcome_Accessor;
}

uci::type::SecurityEventOutcomeEnum& SecurityAuditRecordMDT::getEventOutcome() {
  return *eventOutcome_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setEventOutcome(const uci::type::SecurityEventOutcomeEnum& accessor) {
  if (&accessor != eventOutcome_Accessor.get()) {
    eventOutcome_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setEventOutcome(uci::type::SecurityEventOutcomeEnum::EnumerationItem value) {
  eventOutcome_Accessor->setValue(value);
  return *this;
}


const uci::type::EventSeverityEnum& SecurityAuditRecordMDT::getEventSeverity() const {
  return *eventSeverity_Accessor;
}

uci::type::EventSeverityEnum& SecurityAuditRecordMDT::getEventSeverity() {
  return *eventSeverity_Accessor;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setEventSeverity(const uci::type::EventSeverityEnum& accessor) {
  if (&accessor != eventSeverity_Accessor.get()) {
    eventSeverity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::setEventSeverity(uci::type::EventSeverityEnum::EnumerationItem value) {
  eventSeverity_Accessor->setValue(value);
  return *this;
}


std::unique_ptr<SecurityAuditRecordMDT> SecurityAuditRecordMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::securityAuditRecordMDT : type};
  return (requestedType == uci::type::accessorType::securityAuditRecordMDT) ? boost::make_unique<SecurityAuditRecordMDT>() : nullptr;
}

/**  */
namespace SecurityAuditRecordMDT_Names {

constexpr const char* Extern_Type_Name{"SecurityAuditRecordMDT"};
constexpr const char* SecurityAuditRecordID_Name{"SecurityAuditRecordID"};
constexpr const char* EventTimestamp_Name{"EventTimestamp"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* EventType_Name{"EventType"};
constexpr const char* EventOutcome_Name{"EventOutcome"};
constexpr const char* EventSeverity_Name{"EventSeverity"};

} // namespace SecurityAuditRecordMDT_Names

void SecurityAuditRecordMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SecurityAuditRecordMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SecurityAuditRecordMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::SecurityAuditRecordID_Name) {
      SecurityAuditRecordID_Type::deserialize(valueType.second, accessor.getSecurityAuditRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventTimestamp(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventType_Name) {
      SecurityEventType::deserialize(valueType.second, accessor.getEventType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventOutcome_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEventOutcome().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventSeverity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEventSeverity().setValueFromName(*value);
      }
    }
  }
}

std::string SecurityAuditRecordMDT::serialize(const uci::type::SecurityAuditRecordMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SecurityAuditRecordMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SecurityAuditRecordMDT_Names::Extern_Type_Name);
  }
  SecurityAuditRecordID_Type::serialize(accessor.getSecurityAuditRecordID(), node, SecurityAuditRecordMDT_Names::SecurityAuditRecordID_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEventTimestamp(), node, SecurityAuditRecordMDT_Names::EventTimestamp_Name);
  ServiceID_Type::serialize(accessor.getServiceID(), node, SecurityAuditRecordMDT_Names::ServiceID_Name);
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SecurityAuditRecordMDT_Names::SubsystemID_Name);
  }
  SecurityEventType::serialize(accessor.getEventType(), node, SecurityAuditRecordMDT_Names::EventType_Name);
  SecurityEventOutcomeEnum::serialize(accessor.getEventOutcome(), node, SecurityAuditRecordMDT_Names::EventOutcome_Name, false);
  EventSeverityEnum::serialize(accessor.getEventSeverity(), node, SecurityAuditRecordMDT_Names::EventSeverity_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SecurityAuditRecordMDT>().release());
}

uci::type::SecurityAuditRecordMDT& SecurityAuditRecordMDT::create(const uci::type::SecurityAuditRecordMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SecurityAuditRecordMDT> newAccessor{boost::make_unique<asb_uci::type::SecurityAuditRecordMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SecurityAuditRecordMDT::destroy(uci::type::SecurityAuditRecordMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SecurityAuditRecordMDT*>(&accessor);
}

} // namespace type

} // namespace uci

