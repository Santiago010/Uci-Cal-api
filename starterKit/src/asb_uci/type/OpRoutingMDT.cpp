/** @file OpRoutingMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OpRoutingMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MissionTraceabilityType.h"
#include "asb_uci/type/OpDescriptionType.h"
#include "asb_uci/type/OpRoutingID_Type.h"
#include "asb_uci/type/ScheduleType.h"
#include "asb_uci/type/SeparationParametersType.h"
#include "asb_uci/type/SpecificBlueSeparationType.h"
#include "asb_uci/type/SpecificRedSeparationType.h"
#include "asb_uci/type/SystemID_Type.h"
#include "asb_uci/type/ZoneType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/MissionTraceabilityType.h"
#include "uci/type/OpDescriptionType.h"
#include "uci/type/OpRoutingID_Type.h"
#include "uci/type/OpRoutingMDT.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/SeparationParametersType.h"
#include "uci/type/SpecificBlueSeparationType.h"
#include "uci/type/SpecificRedSeparationType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/ZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OpRoutingMDT::OpRoutingMDT()
  : opRoutingID_Accessor{boost::make_unique<OpRoutingID_Type>()},
    specificBlueSeparation_Accessor{boost::make_unique<SpecificBlueSeparation>(0, SIZE_MAX)},
    specificRedSeparation_Accessor{boost::make_unique<SpecificRedSeparation>(0, SIZE_MAX)},
    systemID_Accessor{boost::make_unique<SystemID>(0, SIZE_MAX)} {
}

OpRoutingMDT::~OpRoutingMDT() = default;

void OpRoutingMDT::copy(const uci::type::OpRoutingMDT& accessor) {
  copyImpl(accessor, false);
}

void OpRoutingMDT::copyImpl(const uci::type::OpRoutingMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OpRoutingMDT&>(accessor);
    setOpRoutingID(*(accessorImpl.opRoutingID_Accessor));
    if (accessorImpl.defaultBlueSeparation_Accessor) {
      setDefaultBlueSeparation(*(accessorImpl.defaultBlueSeparation_Accessor));
    } else {
      defaultBlueSeparation_Accessor.reset();
    }
    if (accessorImpl.defaultRedSeparation_Accessor) {
      setDefaultRedSeparation(*(accessorImpl.defaultRedSeparation_Accessor));
    } else {
      defaultRedSeparation_Accessor.reset();
    }
    setSpecificBlueSeparation(*(accessorImpl.specificBlueSeparation_Accessor));
    setSpecificRedSeparation(*(accessorImpl.specificRedSeparation_Accessor));
    if (accessorImpl.opDescription_Accessor) {
      setOpDescription(*(accessorImpl.opDescription_Accessor));
    } else {
      opDescription_Accessor.reset();
    }
    setSystemID(*(accessorImpl.systemID_Accessor));
    if (accessorImpl.applicableZone_Accessor) {
      setApplicableZone(*(accessorImpl.applicableZone_Accessor));
    } else {
      applicableZone_Accessor.reset();
    }
    if (accessorImpl.schedule_Accessor) {
      setSchedule(*(accessorImpl.schedule_Accessor));
    } else {
      schedule_Accessor.reset();
    }
    if (accessorImpl.missionTraceability_Accessor) {
      setMissionTraceability(*(accessorImpl.missionTraceability_Accessor));
    } else {
      missionTraceability_Accessor.reset();
    }
  }
}

void OpRoutingMDT::reset() noexcept {
  opRoutingID_Accessor->reset();
  defaultBlueSeparation_Accessor.reset();
  defaultRedSeparation_Accessor.reset();
  specificBlueSeparation_Accessor->reset();
  specificRedSeparation_Accessor->reset();
  opDescription_Accessor.reset();
  systemID_Accessor->reset();
  applicableZone_Accessor.reset();
  schedule_Accessor.reset();
  missionTraceability_Accessor.reset();
}

const uci::type::OpRoutingID_Type& OpRoutingMDT::getOpRoutingID() const {
  return *opRoutingID_Accessor;
}

uci::type::OpRoutingID_Type& OpRoutingMDT::getOpRoutingID() {
  return *opRoutingID_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::setOpRoutingID(const uci::type::OpRoutingID_Type& accessor) {
  if (&accessor != opRoutingID_Accessor.get()) {
    opRoutingID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SeparationParametersType& OpRoutingMDT::getDefaultBlueSeparation_() const {
  if (defaultBlueSeparation_Accessor) {
    return *defaultBlueSeparation_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultBlueSeparation(): An attempt was made to get an optional field that was not enabled, call hasDefaultBlueSeparation() to determine if it is safe to call getDefaultBlueSeparation()");
}

const uci::type::SeparationParametersType& OpRoutingMDT::getDefaultBlueSeparation() const {
  return getDefaultBlueSeparation_();
}

uci::type::SeparationParametersType& OpRoutingMDT::getDefaultBlueSeparation() {
  return getDefaultBlueSeparation_();
}

uci::type::OpRoutingMDT& OpRoutingMDT::setDefaultBlueSeparation(const uci::type::SeparationParametersType& accessor) {
  enableDefaultBlueSeparation(accessor.getAccessorType());
  if (&accessor != defaultBlueSeparation_Accessor.get()) {
    defaultBlueSeparation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OpRoutingMDT::hasDefaultBlueSeparation() const noexcept {
  return static_cast<bool>(defaultBlueSeparation_Accessor);
}

uci::type::SeparationParametersType& OpRoutingMDT::enableDefaultBlueSeparation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::separationParametersType : type};
  if ((!defaultBlueSeparation_Accessor) || (defaultBlueSeparation_Accessor->getAccessorType() != requestedType)) {
    defaultBlueSeparation_Accessor = SeparationParametersType::create(requestedType);
    if (!defaultBlueSeparation_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultBlueSeparation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultBlueSeparation_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::clearDefaultBlueSeparation() noexcept {
  defaultBlueSeparation_Accessor.reset();
  return *this;
}

uci::type::SeparationParametersType& OpRoutingMDT::getDefaultRedSeparation_() const {
  if (defaultRedSeparation_Accessor) {
    return *defaultRedSeparation_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultRedSeparation(): An attempt was made to get an optional field that was not enabled, call hasDefaultRedSeparation() to determine if it is safe to call getDefaultRedSeparation()");
}

const uci::type::SeparationParametersType& OpRoutingMDT::getDefaultRedSeparation() const {
  return getDefaultRedSeparation_();
}

uci::type::SeparationParametersType& OpRoutingMDT::getDefaultRedSeparation() {
  return getDefaultRedSeparation_();
}

uci::type::OpRoutingMDT& OpRoutingMDT::setDefaultRedSeparation(const uci::type::SeparationParametersType& accessor) {
  enableDefaultRedSeparation(accessor.getAccessorType());
  if (&accessor != defaultRedSeparation_Accessor.get()) {
    defaultRedSeparation_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OpRoutingMDT::hasDefaultRedSeparation() const noexcept {
  return static_cast<bool>(defaultRedSeparation_Accessor);
}

uci::type::SeparationParametersType& OpRoutingMDT::enableDefaultRedSeparation(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::separationParametersType : type};
  if ((!defaultRedSeparation_Accessor) || (defaultRedSeparation_Accessor->getAccessorType() != requestedType)) {
    defaultRedSeparation_Accessor = SeparationParametersType::create(requestedType);
    if (!defaultRedSeparation_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultRedSeparation(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultRedSeparation_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::clearDefaultRedSeparation() noexcept {
  defaultRedSeparation_Accessor.reset();
  return *this;
}

const uci::type::OpRoutingMDT::SpecificBlueSeparation& OpRoutingMDT::getSpecificBlueSeparation() const {
  return *specificBlueSeparation_Accessor;
}

uci::type::OpRoutingMDT::SpecificBlueSeparation& OpRoutingMDT::getSpecificBlueSeparation() {
  return *specificBlueSeparation_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::setSpecificBlueSeparation(const uci::type::OpRoutingMDT::SpecificBlueSeparation& accessor) {
  if (&accessor != specificBlueSeparation_Accessor.get()) {
    specificBlueSeparation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::OpRoutingMDT::SpecificRedSeparation& OpRoutingMDT::getSpecificRedSeparation() const {
  return *specificRedSeparation_Accessor;
}

uci::type::OpRoutingMDT::SpecificRedSeparation& OpRoutingMDT::getSpecificRedSeparation() {
  return *specificRedSeparation_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::setSpecificRedSeparation(const uci::type::OpRoutingMDT::SpecificRedSeparation& accessor) {
  if (&accessor != specificRedSeparation_Accessor.get()) {
    specificRedSeparation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OpDescriptionType& OpRoutingMDT::getOpDescription_() const {
  if (opDescription_Accessor) {
    return *opDescription_Accessor;
  }
  throw uci::base::UCIException("Error in getOpDescription(): An attempt was made to get an optional field that was not enabled, call hasOpDescription() to determine if it is safe to call getOpDescription()");
}

const uci::type::OpDescriptionType& OpRoutingMDT::getOpDescription() const {
  return getOpDescription_();
}

uci::type::OpDescriptionType& OpRoutingMDT::getOpDescription() {
  return getOpDescription_();
}

uci::type::OpRoutingMDT& OpRoutingMDT::setOpDescription(const uci::type::OpDescriptionType& accessor) {
  enableOpDescription();
  if (&accessor != opDescription_Accessor.get()) {
    opDescription_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpRoutingMDT::hasOpDescription() const noexcept {
  return static_cast<bool>(opDescription_Accessor);
}

uci::type::OpDescriptionType& OpRoutingMDT::enableOpDescription(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opDescriptionType : type};
  if ((!opDescription_Accessor) || (opDescription_Accessor->getAccessorType() != requestedType)) {
    opDescription_Accessor = OpDescriptionType::create(requestedType);
    if (!opDescription_Accessor) {
      throw uci::base::UCIException("Error in enableOpDescription(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *opDescription_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::clearOpDescription() noexcept {
  opDescription_Accessor.reset();
  return *this;
}

const uci::type::OpRoutingMDT::SystemID& OpRoutingMDT::getSystemID() const {
  return *systemID_Accessor;
}

uci::type::OpRoutingMDT::SystemID& OpRoutingMDT::getSystemID() {
  return *systemID_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::setSystemID(const uci::type::OpRoutingMDT::SystemID& accessor) {
  if (&accessor != systemID_Accessor.get()) {
    systemID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ZoneType& OpRoutingMDT::getApplicableZone_() const {
  if (applicableZone_Accessor) {
    return *applicableZone_Accessor;
  }
  throw uci::base::UCIException("Error in getApplicableZone(): An attempt was made to get an optional field that was not enabled, call hasApplicableZone() to determine if it is safe to call getApplicableZone()");
}

const uci::type::ZoneType& OpRoutingMDT::getApplicableZone() const {
  return getApplicableZone_();
}

uci::type::ZoneType& OpRoutingMDT::getApplicableZone() {
  return getApplicableZone_();
}

uci::type::OpRoutingMDT& OpRoutingMDT::setApplicableZone(const uci::type::ZoneType& accessor) {
  enableApplicableZone(accessor.getAccessorType());
  if (&accessor != applicableZone_Accessor.get()) {
    applicableZone_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool OpRoutingMDT::hasApplicableZone() const noexcept {
  return static_cast<bool>(applicableZone_Accessor);
}

uci::type::ZoneType& OpRoutingMDT::enableApplicableZone(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::zoneType : type};
  if ((!applicableZone_Accessor) || (applicableZone_Accessor->getAccessorType() != requestedType)) {
    applicableZone_Accessor = ZoneType::create(requestedType);
    if (!applicableZone_Accessor) {
      throw uci::base::UCIException("Error in enableApplicableZone(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *applicableZone_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::clearApplicableZone() noexcept {
  applicableZone_Accessor.reset();
  return *this;
}

uci::type::ScheduleType& OpRoutingMDT::getSchedule_() const {
  if (schedule_Accessor) {
    return *schedule_Accessor;
  }
  throw uci::base::UCIException("Error in getSchedule(): An attempt was made to get an optional field that was not enabled, call hasSchedule() to determine if it is safe to call getSchedule()");
}

const uci::type::ScheduleType& OpRoutingMDT::getSchedule() const {
  return getSchedule_();
}

uci::type::ScheduleType& OpRoutingMDT::getSchedule() {
  return getSchedule_();
}

uci::type::OpRoutingMDT& OpRoutingMDT::setSchedule(const uci::type::ScheduleType& accessor) {
  enableSchedule();
  if (&accessor != schedule_Accessor.get()) {
    schedule_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpRoutingMDT::hasSchedule() const noexcept {
  return static_cast<bool>(schedule_Accessor);
}

uci::type::ScheduleType& OpRoutingMDT::enableSchedule(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::scheduleType : type};
  if ((!schedule_Accessor) || (schedule_Accessor->getAccessorType() != requestedType)) {
    schedule_Accessor = ScheduleType::create(requestedType);
    if (!schedule_Accessor) {
      throw uci::base::UCIException("Error in enableSchedule(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *schedule_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::clearSchedule() noexcept {
  schedule_Accessor.reset();
  return *this;
}

uci::type::MissionTraceabilityType& OpRoutingMDT::getMissionTraceability_() const {
  if (missionTraceability_Accessor) {
    return *missionTraceability_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionTraceability(): An attempt was made to get an optional field that was not enabled, call hasMissionTraceability() to determine if it is safe to call getMissionTraceability()");
}

const uci::type::MissionTraceabilityType& OpRoutingMDT::getMissionTraceability() const {
  return getMissionTraceability_();
}

uci::type::MissionTraceabilityType& OpRoutingMDT::getMissionTraceability() {
  return getMissionTraceability_();
}

uci::type::OpRoutingMDT& OpRoutingMDT::setMissionTraceability(const uci::type::MissionTraceabilityType& accessor) {
  enableMissionTraceability();
  if (&accessor != missionTraceability_Accessor.get()) {
    missionTraceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OpRoutingMDT::hasMissionTraceability() const noexcept {
  return static_cast<bool>(missionTraceability_Accessor);
}

uci::type::MissionTraceabilityType& OpRoutingMDT::enableMissionTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionTraceabilityType : type};
  if ((!missionTraceability_Accessor) || (missionTraceability_Accessor->getAccessorType() != requestedType)) {
    missionTraceability_Accessor = MissionTraceabilityType::create(requestedType);
    if (!missionTraceability_Accessor) {
      throw uci::base::UCIException("Error in enableMissionTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionTraceability_Accessor;
}

uci::type::OpRoutingMDT& OpRoutingMDT::clearMissionTraceability() noexcept {
  missionTraceability_Accessor.reset();
  return *this;
}

std::unique_ptr<OpRoutingMDT> OpRoutingMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opRoutingMDT : type};
  return (requestedType == uci::type::accessorType::opRoutingMDT) ? boost::make_unique<OpRoutingMDT>() : nullptr;
}

/**  */
namespace OpRoutingMDT_Names {

constexpr const char* Extern_Type_Name{"OpRoutingMDT"};
constexpr const char* OpRoutingID_Name{"OpRoutingID"};
constexpr const char* DefaultBlueSeparation_Name{"DefaultBlueSeparation"};
constexpr const char* DefaultRedSeparation_Name{"DefaultRedSeparation"};
constexpr const char* SpecificBlueSeparation_Name{"SpecificBlueSeparation"};
constexpr const char* SpecificRedSeparation_Name{"SpecificRedSeparation"};
constexpr const char* OpDescription_Name{"OpDescription"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ApplicableZone_Name{"ApplicableZone"};
constexpr const char* Schedule_Name{"Schedule"};
constexpr const char* MissionTraceability_Name{"MissionTraceability"};

} // namespace OpRoutingMDT_Names

void OpRoutingMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpRoutingMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpRoutingMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::OpRoutingID_Name) {
      OpRoutingID_Type::deserialize(valueType.second, accessor.getOpRoutingID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::DefaultBlueSeparation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDefaultBlueSeparation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::DefaultRedSeparation_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDefaultRedSeparation(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::SpecificBlueSeparation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpRoutingMDT::SpecificBlueSeparation& boundedList = accessor.getSpecificBlueSeparation();
        const uci::type::OpRoutingMDT::SpecificBlueSeparation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpecificBlueSeparationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::SpecificRedSeparation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpRoutingMDT::SpecificRedSeparation& boundedList = accessor.getSpecificRedSeparation();
        const uci::type::OpRoutingMDT::SpecificRedSeparation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SpecificRedSeparationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::OpDescription_Name) {
      OpDescriptionType::deserialize(valueType.second, accessor.enableOpDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::SystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpRoutingMDT::SystemID& boundedList = accessor.getSystemID();
        const uci::type::OpRoutingMDT::SystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::ApplicableZone_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApplicableZone(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::MissionTraceability_Name) {
      MissionTraceabilityType::deserialize(valueType.second, accessor.enableMissionTraceability(), nodeName, nsPrefix);
    }
  }
}

std::string OpRoutingMDT::serialize(const uci::type::OpRoutingMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OpRoutingMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OpRoutingMDT_Names::Extern_Type_Name);
  }
  OpRoutingID_Type::serialize(accessor.getOpRoutingID(), node, OpRoutingMDT_Names::OpRoutingID_Name);
  if (accessor.hasDefaultBlueSeparation()) {
    SeparationParametersType::serialize(accessor.getDefaultBlueSeparation(), node, OpRoutingMDT_Names::DefaultBlueSeparation_Name);
  }
  if (accessor.hasDefaultRedSeparation()) {
    SeparationParametersType::serialize(accessor.getDefaultRedSeparation(), node, OpRoutingMDT_Names::DefaultRedSeparation_Name);
  }
  {
    const uci::type::OpRoutingMDT::SpecificBlueSeparation& boundedList = accessor.getSpecificBlueSeparation();
    for (uci::type::OpRoutingMDT::SpecificBlueSeparation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SpecificBlueSeparationType::serialize(boundedList.at(i), node, OpRoutingMDT_Names::SpecificBlueSeparation_Name);
    }
  }
  {
    const uci::type::OpRoutingMDT::SpecificRedSeparation& boundedList = accessor.getSpecificRedSeparation();
    for (uci::type::OpRoutingMDT::SpecificRedSeparation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SpecificRedSeparationType::serialize(boundedList.at(i), node, OpRoutingMDT_Names::SpecificRedSeparation_Name);
    }
  }
  if (accessor.hasOpDescription()) {
    OpDescriptionType::serialize(accessor.getOpDescription(), node, OpRoutingMDT_Names::OpDescription_Name);
  }
  {
    const uci::type::OpRoutingMDT::SystemID& boundedList = accessor.getSystemID();
    for (uci::type::OpRoutingMDT::SystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::SystemID_Type::serialize(boundedList.at(i), node, OpRoutingMDT_Names::SystemID_Name);
    }
  }
  if (accessor.hasApplicableZone()) {
    ZoneType::serialize(accessor.getApplicableZone(), node, OpRoutingMDT_Names::ApplicableZone_Name);
  }
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, OpRoutingMDT_Names::Schedule_Name);
  }
  if (accessor.hasMissionTraceability()) {
    MissionTraceabilityType::serialize(accessor.getMissionTraceability(), node, OpRoutingMDT_Names::MissionTraceability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OpRoutingMDT& OpRoutingMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OpRoutingMDT>().release());
}

uci::type::OpRoutingMDT& OpRoutingMDT::create(const uci::type::OpRoutingMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OpRoutingMDT> newAccessor{boost::make_unique<asb_uci::type::OpRoutingMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OpRoutingMDT::destroy(uci::type::OpRoutingMDT& accessor) {
  delete dynamic_cast<asb_uci::type::OpRoutingMDT*>(&accessor);
}

} // namespace type

} // namespace uci

