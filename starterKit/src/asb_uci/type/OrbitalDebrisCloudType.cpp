/** @file OrbitalDebrisCloudType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitalDebrisCloudType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DebrisCloudBoundaryType.h"
#include "asb_uci/type/OrbitalDebrisCloudID_Type.h"
#include "asb_uci/type/OrbitalDebrisType.h"
#include "asb_uci/type/SatelliteIdentityChoiceType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DebrisCloudBoundaryType.h"
#include "uci/type/OrbitalDebrisCloudID_Type.h"
#include "uci/type/OrbitalDebrisCloudType.h"
#include "uci/type/OrbitalDebrisType.h"
#include "uci/type/SatelliteIdentityChoiceType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitalDebrisCloudType::OrbitalDebrisCloudType()
  : orbitalDebrisCloudID_Accessor{boost::make_unique<OrbitalDebrisCloudID_Type>()},
    identity_Accessor{boost::make_unique<SatelliteIdentityChoiceType>()},
    debris_Accessor{boost::make_unique<Debris>(0, SIZE_MAX)} {
}

OrbitalDebrisCloudType::~OrbitalDebrisCloudType() = default;

void OrbitalDebrisCloudType::copy(const uci::type::OrbitalDebrisCloudType& accessor) {
  copyImpl(accessor, false);
}

void OrbitalDebrisCloudType::copyImpl(const uci::type::OrbitalDebrisCloudType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitalDebrisCloudType&>(accessor);
    setOrbitalDebrisCloudID(*(accessorImpl.orbitalDebrisCloudID_Accessor));
    setIdentity(*(accessorImpl.identity_Accessor));
    setEventTime(accessorImpl.eventTime_Accessor);
    setDebris(*(accessorImpl.debris_Accessor));
    if (accessorImpl.debrisCloudBoundary_Accessor) {
      setDebrisCloudBoundary(*(accessorImpl.debrisCloudBoundary_Accessor));
    } else {
      debrisCloudBoundary_Accessor.reset();
    }
  }
}

void OrbitalDebrisCloudType::reset() noexcept {
  orbitalDebrisCloudID_Accessor->reset();
  identity_Accessor->reset();
  eventTime_Accessor = 0;
  debris_Accessor->reset();
  debrisCloudBoundary_Accessor.reset();
}

const uci::type::OrbitalDebrisCloudID_Type& OrbitalDebrisCloudType::getOrbitalDebrisCloudID() const {
  return *orbitalDebrisCloudID_Accessor;
}

uci::type::OrbitalDebrisCloudID_Type& OrbitalDebrisCloudType::getOrbitalDebrisCloudID() {
  return *orbitalDebrisCloudID_Accessor;
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::setOrbitalDebrisCloudID(const uci::type::OrbitalDebrisCloudID_Type& accessor) {
  if (&accessor != orbitalDebrisCloudID_Accessor.get()) {
    orbitalDebrisCloudID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::SatelliteIdentityChoiceType& OrbitalDebrisCloudType::getIdentity() const {
  return *identity_Accessor;
}

uci::type::SatelliteIdentityChoiceType& OrbitalDebrisCloudType::getIdentity() {
  return *identity_Accessor;
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::setIdentity(const uci::type::SatelliteIdentityChoiceType& accessor) {
  if (&accessor != identity_Accessor.get()) {
    identity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeTypeValue OrbitalDebrisCloudType::getEventTime() const {
  return eventTime_Accessor;
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::setEventTime(uci::type::DateTimeTypeValue value) {
  eventTime_Accessor = value;
  return *this;
}


const uci::type::OrbitalDebrisCloudType::Debris& OrbitalDebrisCloudType::getDebris() const {
  return *debris_Accessor;
}

uci::type::OrbitalDebrisCloudType::Debris& OrbitalDebrisCloudType::getDebris() {
  return *debris_Accessor;
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::setDebris(const uci::type::OrbitalDebrisCloudType::Debris& accessor) {
  if (&accessor != debris_Accessor.get()) {
    debris_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DebrisCloudBoundaryType& OrbitalDebrisCloudType::getDebrisCloudBoundary_() const {
  if (debrisCloudBoundary_Accessor) {
    return *debrisCloudBoundary_Accessor;
  }
  throw uci::base::UCIException("Error in getDebrisCloudBoundary(): An attempt was made to get an optional field that was not enabled, call hasDebrisCloudBoundary() to determine if it is safe to call getDebrisCloudBoundary()");
}

const uci::type::DebrisCloudBoundaryType& OrbitalDebrisCloudType::getDebrisCloudBoundary() const {
  return getDebrisCloudBoundary_();
}

uci::type::DebrisCloudBoundaryType& OrbitalDebrisCloudType::getDebrisCloudBoundary() {
  return getDebrisCloudBoundary_();
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::setDebrisCloudBoundary(const uci::type::DebrisCloudBoundaryType& accessor) {
  enableDebrisCloudBoundary();
  if (&accessor != debrisCloudBoundary_Accessor.get()) {
    debrisCloudBoundary_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitalDebrisCloudType::hasDebrisCloudBoundary() const noexcept {
  return static_cast<bool>(debrisCloudBoundary_Accessor);
}

uci::type::DebrisCloudBoundaryType& OrbitalDebrisCloudType::enableDebrisCloudBoundary(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::debrisCloudBoundaryType : type};
  if ((!debrisCloudBoundary_Accessor) || (debrisCloudBoundary_Accessor->getAccessorType() != requestedType)) {
    debrisCloudBoundary_Accessor = DebrisCloudBoundaryType::create(requestedType);
    if (!debrisCloudBoundary_Accessor) {
      throw uci::base::UCIException("Error in enableDebrisCloudBoundary(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *debrisCloudBoundary_Accessor;
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::clearDebrisCloudBoundary() noexcept {
  debrisCloudBoundary_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitalDebrisCloudType> OrbitalDebrisCloudType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalDebrisCloudType : type};
  return (requestedType == uci::type::accessorType::orbitalDebrisCloudType) ? boost::make_unique<OrbitalDebrisCloudType>() : nullptr;
}

/**  */
namespace OrbitalDebrisCloudType_Names {

constexpr const char* Extern_Type_Name{"OrbitalDebrisCloudType"};
constexpr const char* OrbitalDebrisCloudID_Name{"OrbitalDebrisCloudID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* EventTime_Name{"EventTime"};
constexpr const char* Debris_Name{"Debris"};
constexpr const char* DebrisCloudBoundary_Name{"DebrisCloudBoundary"};

} // namespace OrbitalDebrisCloudType_Names

void OrbitalDebrisCloudType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitalDebrisCloudType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitalDebrisCloudType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitalDebrisCloudType_Names::OrbitalDebrisCloudID_Name) {
      OrbitalDebrisCloudID_Type::deserialize(valueType.second, accessor.getOrbitalDebrisCloudID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisCloudType_Names::Identity_Name) {
      SatelliteIdentityChoiceType::deserialize(valueType.second, accessor.getIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitalDebrisCloudType_Names::EventTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventTime(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitalDebrisCloudType_Names::Debris_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitalDebrisCloudType::Debris& boundedList = accessor.getDebris();
        const uci::type::OrbitalDebrisCloudType::Debris::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::OrbitalDebrisType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitalDebrisCloudType_Names::DebrisCloudBoundary_Name) {
      DebrisCloudBoundaryType::deserialize(valueType.second, accessor.enableDebrisCloudBoundary(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitalDebrisCloudType::serialize(const uci::type::OrbitalDebrisCloudType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitalDebrisCloudType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitalDebrisCloudType_Names::Extern_Type_Name);
  }
  OrbitalDebrisCloudID_Type::serialize(accessor.getOrbitalDebrisCloudID(), node, OrbitalDebrisCloudType_Names::OrbitalDebrisCloudID_Name);
  SatelliteIdentityChoiceType::serialize(accessor.getIdentity(), node, OrbitalDebrisCloudType_Names::Identity_Name);
  asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEventTime(), node, OrbitalDebrisCloudType_Names::EventTime_Name);
  {
    const uci::type::OrbitalDebrisCloudType::Debris& boundedList = accessor.getDebris();
    for (uci::type::OrbitalDebrisCloudType::Debris::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::OrbitalDebrisType::serialize(boundedList.at(i), node, OrbitalDebrisCloudType_Names::Debris_Name);
    }
  }
  if (accessor.hasDebrisCloudBoundary()) {
    DebrisCloudBoundaryType::serialize(accessor.getDebrisCloudBoundary(), node, OrbitalDebrisCloudType_Names::DebrisCloudBoundary_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitalDebrisCloudType>().release());
}

uci::type::OrbitalDebrisCloudType& OrbitalDebrisCloudType::create(const uci::type::OrbitalDebrisCloudType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitalDebrisCloudType> newAccessor{boost::make_unique<asb_uci::type::OrbitalDebrisCloudType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitalDebrisCloudType::destroy(uci::type::OrbitalDebrisCloudType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitalDebrisCloudType*>(&accessor);
}

} // namespace type

} // namespace uci

