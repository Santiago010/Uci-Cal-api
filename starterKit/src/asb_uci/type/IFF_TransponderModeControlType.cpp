/** @file IFF_TransponderModeControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/IFF_TransponderModeControlType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/IFF_TransponderModesSelectionType.h"
#include "../../../include/asb_uci/util/DerivedTypesCopier.h"
#include "../../../include/asb_uci/util/DerivedTypesCreator.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/DerivedTypesSerializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_TransponderModeControlType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/IFF_TransponderModesSelectionType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

IFF_TransponderModeControlType::IFF_TransponderModeControlType() = default;

IFF_TransponderModeControlType::~IFF_TransponderModeControlType() = default;

void IFF_TransponderModeControlType::copy(const uci::type::IFF_TransponderModeControlType& accessor) {
  copyImpl(accessor, false);
}

void IFF_TransponderModeControlType::copyImpl(const uci::type::IFF_TransponderModeControlType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::iFF_TransponderModeControlType)) {
      const auto& accessorImpl = dynamic_cast<const IFF_TransponderModeControlType&>(accessor);
      if (accessorImpl.transponderModesSelection_Accessor) {
        setTransponderModesSelection(*(accessorImpl.transponderModesSelection_Accessor));
      } else {
        transponderModesSelection_Accessor.reset();
      }
      setInitiateIdentificationOfPosition(accessorImpl.initiateIdentificationOfPosition_Accessor);
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void IFF_TransponderModeControlType::reset() noexcept {
  transponderModesSelection_Accessor.reset();
  initiateIdentificationOfPosition_Accessor = false;
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModeControlType::getTransponderModesSelection_() const {
  if (transponderModesSelection_Accessor) {
    return *transponderModesSelection_Accessor;
  }
  throw uci::base::UCIException("Error in getTransponderModesSelection(): An attempt was made to get an optional field that was not enabled, call hasTransponderModesSelection() to determine if it is safe to call getTransponderModesSelection()");
}

const uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModeControlType::getTransponderModesSelection() const {
  return getTransponderModesSelection_();
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModeControlType::getTransponderModesSelection() {
  return getTransponderModesSelection_();
}

uci::type::IFF_TransponderModeControlType& IFF_TransponderModeControlType::setTransponderModesSelection(const uci::type::IFF_TransponderModesSelectionType& accessor) {
  enableTransponderModesSelection();
  if (&accessor != transponderModesSelection_Accessor.get()) {
    transponderModesSelection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool IFF_TransponderModeControlType::hasTransponderModesSelection() const noexcept {
  return static_cast<bool>(transponderModesSelection_Accessor);
}

uci::type::IFF_TransponderModesSelectionType& IFF_TransponderModeControlType::enableTransponderModesSelection(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_TransponderModesSelectionType : type};
  if ((!transponderModesSelection_Accessor) || (transponderModesSelection_Accessor->getAccessorType() != requestedType)) {
    transponderModesSelection_Accessor = IFF_TransponderModesSelectionType::create(requestedType);
    if (!transponderModesSelection_Accessor) {
      throw uci::base::UCIException("Error in enableTransponderModesSelection(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *transponderModesSelection_Accessor;
}

uci::type::IFF_TransponderModeControlType& IFF_TransponderModeControlType::clearTransponderModesSelection() noexcept {
  transponderModesSelection_Accessor.reset();
  return *this;
}

xs::Boolean IFF_TransponderModeControlType::getInitiateIdentificationOfPosition() const {
  return initiateIdentificationOfPosition_Accessor;
}

uci::type::IFF_TransponderModeControlType& IFF_TransponderModeControlType::setInitiateIdentificationOfPosition(xs::Boolean value) {
  initiateIdentificationOfPosition_Accessor = value;
  return *this;
}


std::unique_ptr<IFF_TransponderModeControlType> IFF_TransponderModeControlType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::iFF_TransponderModeControlType : type};
  return std::unique_ptr<IFF_TransponderModeControlType>(dynamic_cast<IFF_TransponderModeControlType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace IFF_TransponderModeControlType_Names {

constexpr const char* Extern_Type_Name{"IFF_TransponderModeControlType"};
constexpr const char* TransponderModesSelection_Name{"TransponderModesSelection"};
constexpr const char* InitiateIdentificationOfPosition_Name{"InitiateIdentificationOfPosition"};

} // namespace IFF_TransponderModeControlType_Names

void IFF_TransponderModeControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IFF_TransponderModeControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IFF_TransponderModeControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + IFF_TransponderModeControlType_Names::TransponderModesSelection_Name) {
      IFF_TransponderModesSelectionType::deserialize(valueType.second, accessor.enableTransponderModesSelection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IFF_TransponderModeControlType_Names::InitiateIdentificationOfPosition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitiateIdentificationOfPosition(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
}

std::string IFF_TransponderModeControlType::serialize(const uci::type::IFF_TransponderModeControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? IFF_TransponderModeControlType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::iFF_TransponderModeControlType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, IFF_TransponderModeControlType_Names::Extern_Type_Name);
    }
    if (accessor.hasTransponderModesSelection()) {
      IFF_TransponderModesSelectionType::serialize(accessor.getTransponderModesSelection(), node, IFF_TransponderModeControlType_Names::TransponderModesSelection_Name);
    }
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getInitiateIdentificationOfPosition(), node, IFF_TransponderModeControlType_Names::InitiateIdentificationOfPosition_Name);
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::IFF_TransponderModeControlType& IFF_TransponderModeControlType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::IFF_TransponderModeControlType>().release());
}

uci::type::IFF_TransponderModeControlType& IFF_TransponderModeControlType::create(const uci::type::IFF_TransponderModeControlType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::IFF_TransponderModeControlType> newAccessor{boost::make_unique<asb_uci::type::IFF_TransponderModeControlType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void IFF_TransponderModeControlType::destroy(uci::type::IFF_TransponderModeControlType& accessor) {
  delete dynamic_cast<asb_uci::type::IFF_TransponderModeControlType*>(&accessor);
}

} // namespace type

} // namespace uci

