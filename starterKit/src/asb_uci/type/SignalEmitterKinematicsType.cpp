/** @file SignalEmitterKinematicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SignalEmitterKinematicsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/MeasurementStatusEnum.h"
#include "asb_uci/type/PositionAndVelocityCovarianceType.h"
#include "asb_uci/type/SignalEmitterKinematicsPositionType.h"
#include "asb_uci/type/Velocity2D_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DoubleNonNegativeType.h"
#include "uci/type/MeasurementStatusEnum.h"
#include "uci/type/PositionAndVelocityCovarianceType.h"
#include "uci/type/SignalEmitterKinematicsPositionType.h"
#include "uci/type/SignalEmitterKinematicsType.h"
#include "uci/type/Velocity2D_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SignalEmitterKinematicsType::SignalEmitterKinematicsType()
  : kinematicsStatus_Accessor{boost::make_unique<MeasurementStatusEnum>()},
    position_Accessor{boost::make_unique<SignalEmitterKinematicsPositionType>()} {
}

SignalEmitterKinematicsType::~SignalEmitterKinematicsType() = default;

void SignalEmitterKinematicsType::copy(const uci::type::SignalEmitterKinematicsType& accessor) {
  copyImpl(accessor, false);
}

void SignalEmitterKinematicsType::copyImpl(const uci::type::SignalEmitterKinematicsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SignalEmitterKinematicsType&>(accessor);
    setKinematicsStatus(*(accessorImpl.kinematicsStatus_Accessor));
    setPosition(*(accessorImpl.position_Accessor));
    if (accessorImpl.velocity_Accessor) {
      setVelocity(*(accessorImpl.velocity_Accessor));
    } else {
      velocity_Accessor.reset();
    }
    if (accessorImpl.positionAndVelocityCovariance_Accessor) {
      setPositionAndVelocityCovariance(*(accessorImpl.positionAndVelocityCovariance_Accessor));
    } else {
      positionAndVelocityCovariance_Accessor.reset();
    }
    if (accessorImpl.hasVelocityDeviation()) {
      setVelocityDeviation(accessorImpl.getVelocityDeviation());
    } else {
      clearVelocityDeviation();
    }
    if (accessorImpl.hasHeadingDeviation()) {
      setHeadingDeviation(accessorImpl.getHeadingDeviation());
    } else {
      clearHeadingDeviation();
    }
  }
}

void SignalEmitterKinematicsType::reset() noexcept {
  kinematicsStatus_Accessor->reset();
  position_Accessor->reset();
  velocity_Accessor.reset();
  positionAndVelocityCovariance_Accessor.reset();
  clearVelocityDeviation();
  clearHeadingDeviation();
}

const uci::type::MeasurementStatusEnum& SignalEmitterKinematicsType::getKinematicsStatus() const {
  return *kinematicsStatus_Accessor;
}

uci::type::MeasurementStatusEnum& SignalEmitterKinematicsType::getKinematicsStatus() {
  return *kinematicsStatus_Accessor;
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setKinematicsStatus(const uci::type::MeasurementStatusEnum& accessor) {
  if (&accessor != kinematicsStatus_Accessor.get()) {
    kinematicsStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setKinematicsStatus(uci::type::MeasurementStatusEnum::EnumerationItem value) {
  kinematicsStatus_Accessor->setValue(value);
  return *this;
}


const uci::type::SignalEmitterKinematicsPositionType& SignalEmitterKinematicsType::getPosition() const {
  return *position_Accessor;
}

uci::type::SignalEmitterKinematicsPositionType& SignalEmitterKinematicsType::getPosition() {
  return *position_Accessor;
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setPosition(const uci::type::SignalEmitterKinematicsPositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::Velocity2D_Type& SignalEmitterKinematicsType::getVelocity_() const {
  if (velocity_Accessor) {
    return *velocity_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocity(): An attempt was made to get an optional field that was not enabled, call hasVelocity() to determine if it is safe to call getVelocity()");
}

const uci::type::Velocity2D_Type& SignalEmitterKinematicsType::getVelocity() const {
  return getVelocity_();
}

uci::type::Velocity2D_Type& SignalEmitterKinematicsType::getVelocity() {
  return getVelocity_();
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setVelocity(const uci::type::Velocity2D_Type& accessor) {
  enableVelocity(accessor.getAccessorType());
  if (&accessor != velocity_Accessor.get()) {
    velocity_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SignalEmitterKinematicsType::hasVelocity() const noexcept {
  return static_cast<bool>(velocity_Accessor);
}

uci::type::Velocity2D_Type& SignalEmitterKinematicsType::enableVelocity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::velocity2D_Type : type};
  if ((!velocity_Accessor) || (velocity_Accessor->getAccessorType() != requestedType)) {
    velocity_Accessor = Velocity2D_Type::create(requestedType);
    if (!velocity_Accessor) {
      throw uci::base::UCIException("Error in enableVelocity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *velocity_Accessor;
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::clearVelocity() noexcept {
  velocity_Accessor.reset();
  return *this;
}

uci::type::PositionAndVelocityCovarianceType& SignalEmitterKinematicsType::getPositionAndVelocityCovariance_() const {
  if (positionAndVelocityCovariance_Accessor) {
    return *positionAndVelocityCovariance_Accessor;
  }
  throw uci::base::UCIException("Error in getPositionAndVelocityCovariance(): An attempt was made to get an optional field that was not enabled, call hasPositionAndVelocityCovariance() to determine if it is safe to call getPositionAndVelocityCovariance()");
}

const uci::type::PositionAndVelocityCovarianceType& SignalEmitterKinematicsType::getPositionAndVelocityCovariance() const {
  return getPositionAndVelocityCovariance_();
}

uci::type::PositionAndVelocityCovarianceType& SignalEmitterKinematicsType::getPositionAndVelocityCovariance() {
  return getPositionAndVelocityCovariance_();
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setPositionAndVelocityCovariance(const uci::type::PositionAndVelocityCovarianceType& accessor) {
  enablePositionAndVelocityCovariance(accessor.getAccessorType());
  if (&accessor != positionAndVelocityCovariance_Accessor.get()) {
    positionAndVelocityCovariance_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SignalEmitterKinematicsType::hasPositionAndVelocityCovariance() const noexcept {
  return static_cast<bool>(positionAndVelocityCovariance_Accessor);
}

uci::type::PositionAndVelocityCovarianceType& SignalEmitterKinematicsType::enablePositionAndVelocityCovariance(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::positionAndVelocityCovarianceType : type};
  if ((!positionAndVelocityCovariance_Accessor) || (positionAndVelocityCovariance_Accessor->getAccessorType() != requestedType)) {
    positionAndVelocityCovariance_Accessor = PositionAndVelocityCovarianceType::create(requestedType);
    if (!positionAndVelocityCovariance_Accessor) {
      throw uci::base::UCIException("Error in enablePositionAndVelocityCovariance(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *positionAndVelocityCovariance_Accessor;
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::clearPositionAndVelocityCovariance() noexcept {
  positionAndVelocityCovariance_Accessor.reset();
  return *this;
}

uci::type::DoubleNonNegativeTypeValue SignalEmitterKinematicsType::getVelocityDeviation() const {
  if (velocityDeviation_Accessor) {
    return *velocityDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getVelocityDeviation(): An attempt was made to get an optional field that was not enabled, call hasVelocityDeviation() to determine if it is safe to call getVelocityDeviation()");
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setVelocityDeviation(uci::type::DoubleNonNegativeTypeValue value) {
  velocityDeviation_Accessor = value;
  return *this;
}

bool SignalEmitterKinematicsType::hasVelocityDeviation() const noexcept {
  return velocityDeviation_Accessor.has_value();
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::clearVelocityDeviation() noexcept {
  velocityDeviation_Accessor.reset();
  return *this;
}

uci::type::DoubleNonNegativeTypeValue SignalEmitterKinematicsType::getHeadingDeviation() const {
  if (headingDeviation_Accessor) {
    return *headingDeviation_Accessor;
  }
  throw uci::base::UCIException("Error in getHeadingDeviation(): An attempt was made to get an optional field that was not enabled, call hasHeadingDeviation() to determine if it is safe to call getHeadingDeviation()");
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::setHeadingDeviation(uci::type::DoubleNonNegativeTypeValue value) {
  headingDeviation_Accessor = value;
  return *this;
}

bool SignalEmitterKinematicsType::hasHeadingDeviation() const noexcept {
  return headingDeviation_Accessor.has_value();
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::clearHeadingDeviation() noexcept {
  headingDeviation_Accessor.reset();
  return *this;
}

std::unique_ptr<SignalEmitterKinematicsType> SignalEmitterKinematicsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::signalEmitterKinematicsType : type};
  return (requestedType == uci::type::accessorType::signalEmitterKinematicsType) ? boost::make_unique<SignalEmitterKinematicsType>() : nullptr;
}

/**  */
namespace SignalEmitterKinematicsType_Names {

constexpr const char* Extern_Type_Name{"SignalEmitterKinematicsType"};
constexpr const char* KinematicsStatus_Name{"KinematicsStatus"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Velocity_Name{"Velocity"};
constexpr const char* PositionAndVelocityCovariance_Name{"PositionAndVelocityCovariance"};
constexpr const char* VelocityDeviation_Name{"VelocityDeviation"};
constexpr const char* HeadingDeviation_Name{"HeadingDeviation"};

} // namespace SignalEmitterKinematicsType_Names

void SignalEmitterKinematicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalEmitterKinematicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalEmitterKinematicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsType_Names::KinematicsStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getKinematicsStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsType_Names::Position_Name) {
      SignalEmitterKinematicsPositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsType_Names::Velocity_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableVelocity(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsType_Names::PositionAndVelocityCovariance_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePositionAndVelocityCovariance(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsType_Names::VelocityDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVelocityDeviation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalEmitterKinematicsType_Names::HeadingDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeadingDeviation(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SignalEmitterKinematicsType::serialize(const uci::type::SignalEmitterKinematicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SignalEmitterKinematicsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SignalEmitterKinematicsType_Names::Extern_Type_Name);
  }
  MeasurementStatusEnum::serialize(accessor.getKinematicsStatus(), node, SignalEmitterKinematicsType_Names::KinematicsStatus_Name, false);
  SignalEmitterKinematicsPositionType::serialize(accessor.getPosition(), node, SignalEmitterKinematicsType_Names::Position_Name);
  if (accessor.hasVelocity()) {
    Velocity2D_Type::serialize(accessor.getVelocity(), node, SignalEmitterKinematicsType_Names::Velocity_Name);
  }
  if (accessor.hasPositionAndVelocityCovariance()) {
    PositionAndVelocityCovarianceType::serialize(accessor.getPositionAndVelocityCovariance(), node, SignalEmitterKinematicsType_Names::PositionAndVelocityCovariance_Name);
  }
  if (accessor.hasVelocityDeviation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVelocityDeviation(), node, SignalEmitterKinematicsType_Names::VelocityDeviation_Name);
  }
  if (accessor.hasHeadingDeviation()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getHeadingDeviation(), node, SignalEmitterKinematicsType_Names::HeadingDeviation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SignalEmitterKinematicsType>().release());
}

uci::type::SignalEmitterKinematicsType& SignalEmitterKinematicsType::create(const uci::type::SignalEmitterKinematicsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SignalEmitterKinematicsType> newAccessor{boost::make_unique<asb_uci::type::SignalEmitterKinematicsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SignalEmitterKinematicsType::destroy(uci::type::SignalEmitterKinematicsType& accessor) {
  delete dynamic_cast<asb_uci::type::SignalEmitterKinematicsType*>(&accessor);
}

} // namespace type

} // namespace uci

