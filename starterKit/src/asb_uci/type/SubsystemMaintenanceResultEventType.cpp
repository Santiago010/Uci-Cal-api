/** @file SubsystemMaintenanceResultEventType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SubsystemMaintenanceResultEventType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/NameValuePairType.h"
#include "asb_uci/type/ProcessingStatusEnum.h"
#include "asb_uci/type/SubsystemMaintenanceResultStatusType.h"
#include "asb_uci/type/VisibleString256Type.h"
#include "asb_uci/type/VisibleString64Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/ProcessingStatusEnum.h"
#include "uci/type/SubsystemMaintenanceResultEventType.h"
#include "uci/type/SubsystemMaintenanceResultStatusType.h"
#include "uci/type/VisibleString256Type.h"
#include "uci/type/VisibleString64Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SubsystemMaintenanceResultEventType::SubsystemMaintenanceResultEventType()
  : eventInfo_Accessor{boost::make_unique<VisibleString64Type>()},
    eventResultStatus_Accessor{boost::make_unique<SubsystemMaintenanceResultStatusType>()},
    eventProcessingStatus_Accessor{boost::make_unique<ProcessingStatusEnum>()},
    eventExpectedValue_Accessor{boost::make_unique<NameValuePairType>()},
    eventActualValue_Accessor{boost::make_unique<NameValuePairType>()} {
}

SubsystemMaintenanceResultEventType::~SubsystemMaintenanceResultEventType() = default;

void SubsystemMaintenanceResultEventType::copy(const uci::type::SubsystemMaintenanceResultEventType& accessor) {
  copyImpl(accessor, false);
}

void SubsystemMaintenanceResultEventType::copyImpl(const uci::type::SubsystemMaintenanceResultEventType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SubsystemMaintenanceResultEventType&>(accessor);
    if (accessorImpl.hasEventIdentifier()) {
      setEventIdentifier(accessorImpl.getEventIdentifier());
    } else {
      clearEventIdentifier();
    }
    setEventInfo(*(accessorImpl.eventInfo_Accessor));
    setEventResultStatus(*(accessorImpl.eventResultStatus_Accessor));
    setEventProcessingStatus(*(accessorImpl.eventProcessingStatus_Accessor));
    setEventExpectedValue(*(accessorImpl.eventExpectedValue_Accessor));
    setEventActualValue(*(accessorImpl.eventActualValue_Accessor));
    if (accessorImpl.eventFailReason_Accessor) {
      setEventFailReason(*(accessorImpl.eventFailReason_Accessor));
    } else {
      eventFailReason_Accessor.reset();
    }
  }
}

void SubsystemMaintenanceResultEventType::reset() noexcept {
  clearEventIdentifier();
  eventInfo_Accessor->reset();
  eventResultStatus_Accessor->reset();
  eventProcessingStatus_Accessor->reset();
  if (eventExpectedValue_Accessor->getAccessorType() != uci::type::accessorType::nameValuePairType) {
    eventExpectedValue_Accessor = boost::make_unique<NameValuePairType>();
  } else {
    eventExpectedValue_Accessor->reset();
  }
  if (eventActualValue_Accessor->getAccessorType() != uci::type::accessorType::nameValuePairType) {
    eventActualValue_Accessor = boost::make_unique<NameValuePairType>();
  } else {
    eventActualValue_Accessor->reset();
  }
  eventFailReason_Accessor.reset();
}

xs::UnsignedInt SubsystemMaintenanceResultEventType::getEventIdentifier() const {
  if (eventIdentifier_Accessor) {
    return *eventIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getEventIdentifier(): An attempt was made to get an optional field that was not enabled, call hasEventIdentifier() to determine if it is safe to call getEventIdentifier()");
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventIdentifier(xs::UnsignedInt value) {
  eventIdentifier_Accessor = value;
  return *this;
}

bool SubsystemMaintenanceResultEventType::hasEventIdentifier() const noexcept {
  return eventIdentifier_Accessor.has_value();
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::clearEventIdentifier() noexcept {
  eventIdentifier_Accessor.reset();
  return *this;
}

const uci::type::VisibleString64Type& SubsystemMaintenanceResultEventType::getEventInfo() const noexcept {
  return *eventInfo_Accessor;
}

uci::type::VisibleString64Type& SubsystemMaintenanceResultEventType::getEventInfo() noexcept {
  return *eventInfo_Accessor;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventInfo(const uci::type::VisibleString64Type& value) {
  return setEventInfo(value.c_str());
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventInfo(const std::string& value) {
  return setEventInfo(value.c_str());
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventInfo(const char* value) {
  eventInfo_Accessor->setStringValue(value);
  return *this;
}

const uci::type::SubsystemMaintenanceResultStatusType& SubsystemMaintenanceResultEventType::getEventResultStatus() const {
  return *eventResultStatus_Accessor;
}

uci::type::SubsystemMaintenanceResultStatusType& SubsystemMaintenanceResultEventType::getEventResultStatus() {
  return *eventResultStatus_Accessor;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventResultStatus(const uci::type::SubsystemMaintenanceResultStatusType& accessor) {
  if (&accessor != eventResultStatus_Accessor.get()) {
    eventResultStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ProcessingStatusEnum& SubsystemMaintenanceResultEventType::getEventProcessingStatus() const {
  return *eventProcessingStatus_Accessor;
}

uci::type::ProcessingStatusEnum& SubsystemMaintenanceResultEventType::getEventProcessingStatus() {
  return *eventProcessingStatus_Accessor;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventProcessingStatus(const uci::type::ProcessingStatusEnum& accessor) {
  if (&accessor != eventProcessingStatus_Accessor.get()) {
    eventProcessingStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventProcessingStatus(uci::type::ProcessingStatusEnum::EnumerationItem value) {
  eventProcessingStatus_Accessor->setValue(value);
  return *this;
}


const uci::type::NameValuePairType& SubsystemMaintenanceResultEventType::getEventExpectedValue() const {
  return *eventExpectedValue_Accessor;
}

uci::type::NameValuePairType& SubsystemMaintenanceResultEventType::getEventExpectedValue() {
  return *eventExpectedValue_Accessor;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventExpectedValue(const uci::type::NameValuePairType& accessor) {
  enableEventExpectedValue(accessor.getAccessorType());
  if (&accessor != eventExpectedValue_Accessor.get()) {
    eventExpectedValue_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::NameValuePairType& SubsystemMaintenanceResultEventType::enableEventExpectedValue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nameValuePairType : type};
  if ((!eventExpectedValue_Accessor) || (eventExpectedValue_Accessor->getAccessorType() != requestedType)) {
    eventExpectedValue_Accessor = NameValuePairType::create(requestedType);
    if (!eventExpectedValue_Accessor) {
      throw uci::base::UCIException("Error in enableEventExpectedValue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eventExpectedValue_Accessor;
}

const uci::type::NameValuePairType& SubsystemMaintenanceResultEventType::getEventActualValue() const {
  return *eventActualValue_Accessor;
}

uci::type::NameValuePairType& SubsystemMaintenanceResultEventType::getEventActualValue() {
  return *eventActualValue_Accessor;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventActualValue(const uci::type::NameValuePairType& accessor) {
  enableEventActualValue(accessor.getAccessorType());
  if (&accessor != eventActualValue_Accessor.get()) {
    eventActualValue_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::NameValuePairType& SubsystemMaintenanceResultEventType::enableEventActualValue(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::nameValuePairType : type};
  if ((!eventActualValue_Accessor) || (eventActualValue_Accessor->getAccessorType() != requestedType)) {
    eventActualValue_Accessor = NameValuePairType::create(requestedType);
    if (!eventActualValue_Accessor) {
      throw uci::base::UCIException("Error in enableEventActualValue(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *eventActualValue_Accessor;
}

uci::type::VisibleString256Type& SubsystemMaintenanceResultEventType::getEventFailReason_() const {
  if (eventFailReason_Accessor) {
    return *eventFailReason_Accessor;
  }
  throw uci::base::UCIException("Error in getEventFailReason(): An attempt was made to get an optional field that was not enabled, call hasEventFailReason() to determine if it is safe to call getEventFailReason()");
}

const uci::type::VisibleString256Type& SubsystemMaintenanceResultEventType::getEventFailReason() const {
  return getEventFailReason_();
}

uci::type::VisibleString256Type& SubsystemMaintenanceResultEventType::getEventFailReason() {
  return getEventFailReason_();
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventFailReason(const uci::type::VisibleString256Type& value) {
  return setEventFailReason(value.c_str());
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventFailReason(const std::string& value) {
  return setEventFailReason(value.c_str());
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::setEventFailReason(const char* value) {
  enableEventFailReason().setStringValue(value);
  return *this;
}

bool SubsystemMaintenanceResultEventType::hasEventFailReason() const noexcept {
  return static_cast<bool>(eventFailReason_Accessor);
}

uci::type::VisibleString256Type& SubsystemMaintenanceResultEventType::enableEventFailReason(uci::base::accessorType::AccessorType type) {
  if (!eventFailReason_Accessor) {
    eventFailReason_Accessor = VisibleString256Type::create(type);
  }
  return *eventFailReason_Accessor;
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::clearEventFailReason() noexcept {
  eventFailReason_Accessor.reset();
  return *this;
}

std::unique_ptr<SubsystemMaintenanceResultEventType> SubsystemMaintenanceResultEventType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::subsystemMaintenanceResultEventType : type};
  return (requestedType == uci::type::accessorType::subsystemMaintenanceResultEventType) ? boost::make_unique<SubsystemMaintenanceResultEventType>() : nullptr;
}

/**  */
namespace SubsystemMaintenanceResultEventType_Names {

constexpr const char* Extern_Type_Name{"SubsystemMaintenanceResultEventType"};
constexpr const char* EventIdentifier_Name{"EventIdentifier"};
constexpr const char* EventInfo_Name{"EventInfo"};
constexpr const char* EventResultStatus_Name{"EventResultStatus"};
constexpr const char* EventProcessingStatus_Name{"EventProcessingStatus"};
constexpr const char* EventExpectedValue_Name{"EventExpectedValue"};
constexpr const char* EventActualValue_Name{"EventActualValue"};
constexpr const char* EventFailReason_Name{"EventFailReason"};

} // namespace SubsystemMaintenanceResultEventType_Names

void SubsystemMaintenanceResultEventType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemMaintenanceResultEventType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemMaintenanceResultEventType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventIdentifier(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventInfo_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventInfo(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventResultStatus_Name) {
      SubsystemMaintenanceResultStatusType::deserialize(valueType.second, accessor.getEventResultStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventProcessingStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEventProcessingStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventExpectedValue_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEventExpectedValue(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventActualValue_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEventActualValue(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemMaintenanceResultEventType_Names::EventFailReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventFailReason(*value);
      }
    }
  }
}

std::string SubsystemMaintenanceResultEventType::serialize(const uci::type::SubsystemMaintenanceResultEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SubsystemMaintenanceResultEventType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemMaintenanceResultEventType_Names::Extern_Type_Name);
  }
  if (accessor.hasEventIdentifier()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEventIdentifier(), node, SubsystemMaintenanceResultEventType_Names::EventIdentifier_Name);
  }
  asb_uci::util::SerializationHelpers::serializeString(accessor.getEventInfo(), node, SubsystemMaintenanceResultEventType_Names::EventInfo_Name);
  SubsystemMaintenanceResultStatusType::serialize(accessor.getEventResultStatus(), node, SubsystemMaintenanceResultEventType_Names::EventResultStatus_Name);
  ProcessingStatusEnum::serialize(accessor.getEventProcessingStatus(), node, SubsystemMaintenanceResultEventType_Names::EventProcessingStatus_Name, false);
  NameValuePairType::serialize(accessor.getEventExpectedValue(), node, SubsystemMaintenanceResultEventType_Names::EventExpectedValue_Name);
  NameValuePairType::serialize(accessor.getEventActualValue(), node, SubsystemMaintenanceResultEventType_Names::EventActualValue_Name);
  if (accessor.hasEventFailReason()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getEventFailReason(), node, SubsystemMaintenanceResultEventType_Names::EventFailReason_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SubsystemMaintenanceResultEventType>().release());
}

uci::type::SubsystemMaintenanceResultEventType& SubsystemMaintenanceResultEventType::create(const uci::type::SubsystemMaintenanceResultEventType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SubsystemMaintenanceResultEventType> newAccessor{boost::make_unique<asb_uci::type::SubsystemMaintenanceResultEventType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SubsystemMaintenanceResultEventType::destroy(uci::type::SubsystemMaintenanceResultEventType& accessor) {
  delete dynamic_cast<asb_uci::type::SubsystemMaintenanceResultEventType*>(&accessor);
}

} // namespace type

} // namespace uci

