/** @file ECEF_VelocityAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ECEF_VelocityAccelerationCovarianceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ECEF_VelocityAccelerationCovarianceType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ECEF_VelocityAccelerationCovarianceType::ECEF_VelocityAccelerationCovarianceType() = default;

ECEF_VelocityAccelerationCovarianceType::~ECEF_VelocityAccelerationCovarianceType() = default;

void ECEF_VelocityAccelerationCovarianceType::copy(const uci::type::ECEF_VelocityAccelerationCovarianceType& accessor) {
  copyImpl(accessor, false);
}

void ECEF_VelocityAccelerationCovarianceType::copyImpl(const uci::type::ECEF_VelocityAccelerationCovarianceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ECEF_VelocityAccelerationCovarianceType&>(accessor);
    setVxAx(accessorImpl.vxAx_Accessor);
    setVxAy(accessorImpl.vxAy_Accessor);
    setVxAz(accessorImpl.vxAz_Accessor);
    setVyAx(accessorImpl.vyAx_Accessor);
    setVyAy(accessorImpl.vyAy_Accessor);
    setVyAz(accessorImpl.vyAz_Accessor);
    setVzAx(accessorImpl.vzAx_Accessor);
    setVzAy(accessorImpl.vzAy_Accessor);
    setVzAz(accessorImpl.vzAz_Accessor);
  }
}

void ECEF_VelocityAccelerationCovarianceType::reset() noexcept {
  vxAx_Accessor = 0.0;
  vxAy_Accessor = 0.0;
  vxAz_Accessor = 0.0;
  vyAx_Accessor = 0.0;
  vyAy_Accessor = 0.0;
  vyAz_Accessor = 0.0;
  vzAx_Accessor = 0.0;
  vzAy_Accessor = 0.0;
  vzAz_Accessor = 0.0;
}

xs::Double ECEF_VelocityAccelerationCovarianceType::getVxAx() const {
  return vxAx_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVxAx(xs::Double value) {
  vxAx_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVxAy() const {
  return vxAy_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVxAy(xs::Double value) {
  vxAy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVxAz() const {
  return vxAz_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVxAz(xs::Double value) {
  vxAz_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVyAx() const {
  return vyAx_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVyAx(xs::Double value) {
  vyAx_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVyAy() const {
  return vyAy_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVyAy(xs::Double value) {
  vyAy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVyAz() const {
  return vyAz_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVyAz(xs::Double value) {
  vyAz_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVzAx() const {
  return vzAx_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVzAx(xs::Double value) {
  vzAx_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVzAy() const {
  return vzAy_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVzAy(xs::Double value) {
  vzAy_Accessor = value;
  return *this;
}


xs::Double ECEF_VelocityAccelerationCovarianceType::getVzAz() const {
  return vzAz_Accessor;
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::setVzAz(xs::Double value) {
  vzAz_Accessor = value;
  return *this;
}


std::unique_ptr<ECEF_VelocityAccelerationCovarianceType> ECEF_VelocityAccelerationCovarianceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eCEF_VelocityAccelerationCovarianceType : type};
  return (requestedType == uci::type::accessorType::eCEF_VelocityAccelerationCovarianceType) ? boost::make_unique<ECEF_VelocityAccelerationCovarianceType>() : nullptr;
}

/**  */
namespace ECEF_VelocityAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_VelocityAccelerationCovarianceType"};
constexpr const char* VxAx_Name{"VxAx"};
constexpr const char* VxAy_Name{"VxAy"};
constexpr const char* VxAz_Name{"VxAz"};
constexpr const char* VyAx_Name{"VyAx"};
constexpr const char* VyAy_Name{"VyAy"};
constexpr const char* VyAz_Name{"VyAz"};
constexpr const char* VzAx_Name{"VzAx"};
constexpr const char* VzAy_Name{"VzAy"};
constexpr const char* VzAz_Name{"VzAz"};

} // namespace ECEF_VelocityAccelerationCovarianceType_Names

void ECEF_VelocityAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_VelocityAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_VelocityAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VxAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VxAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VxAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVxAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VyAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VyAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VyAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVyAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VzAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzAx(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VzAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzAy(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_VelocityAccelerationCovarianceType_Names::VzAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVzAz(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ECEF_VelocityAccelerationCovarianceType::serialize(const uci::type::ECEF_VelocityAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ECEF_VelocityAccelerationCovarianceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_VelocityAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxAx(), node, ECEF_VelocityAccelerationCovarianceType_Names::VxAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxAy(), node, ECEF_VelocityAccelerationCovarianceType_Names::VxAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVxAz(), node, ECEF_VelocityAccelerationCovarianceType_Names::VxAz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyAx(), node, ECEF_VelocityAccelerationCovarianceType_Names::VyAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyAy(), node, ECEF_VelocityAccelerationCovarianceType_Names::VyAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVyAz(), node, ECEF_VelocityAccelerationCovarianceType_Names::VyAz_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzAx(), node, ECEF_VelocityAccelerationCovarianceType_Names::VzAx_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzAy(), node, ECEF_VelocityAccelerationCovarianceType_Names::VzAy_Name);
  asb_uci::util::SerializationHelpers::serializeDouble(accessor.getVzAz(), node, ECEF_VelocityAccelerationCovarianceType_Names::VzAz_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ECEF_VelocityAccelerationCovarianceType>().release());
}

uci::type::ECEF_VelocityAccelerationCovarianceType& ECEF_VelocityAccelerationCovarianceType::create(const uci::type::ECEF_VelocityAccelerationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ECEF_VelocityAccelerationCovarianceType> newAccessor{boost::make_unique<asb_uci::type::ECEF_VelocityAccelerationCovarianceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ECEF_VelocityAccelerationCovarianceType::destroy(uci::type::ECEF_VelocityAccelerationCovarianceType& accessor) {
  delete dynamic_cast<asb_uci::type::ECEF_VelocityAccelerationCovarianceType*>(&accessor);
}

} // namespace type

} // namespace uci

