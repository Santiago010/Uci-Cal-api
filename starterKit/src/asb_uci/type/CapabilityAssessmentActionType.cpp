/** @file CapabilityAssessmentActionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CapabilityAssessmentActionType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityCommandBaseType.h"
#include "asb_uci/type/SupportCapabilityCommandBaseType.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityAssessmentActionType.h"
#include "uci/type/CapabilityCommandBaseType.h"
#include "uci/type/SupportCapabilityCommandBaseType.h"
#include "uci/type/TaskID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityAssessmentActionType::CapabilityAssessmentActionType() = default;

CapabilityAssessmentActionType::~CapabilityAssessmentActionType() = default;

void CapabilityAssessmentActionType::copy(const uci::type::CapabilityAssessmentActionType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityAssessmentActionType::copyImpl(const uci::type::CapabilityAssessmentActionType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CapabilityAssessmentActionType&>(accessor);
    if (accessorImpl.plannedTaskID_Accessor) {
      setPlannedTaskID(*(accessorImpl.plannedTaskID_Accessor));
    } else {
      plannedTaskID_Accessor.reset();
    }
    if (accessorImpl.estimatedCapabilityCommand_Accessor) {
      setEstimatedCapabilityCommand(*(accessorImpl.estimatedCapabilityCommand_Accessor));
    } else {
      estimatedCapabilityCommand_Accessor.reset();
    }
    if (accessorImpl.estimatedSupportingCapabilityCommand_Accessor) {
      setEstimatedSupportingCapabilityCommand(*(accessorImpl.estimatedSupportingCapabilityCommand_Accessor));
    } else {
      estimatedSupportingCapabilityCommand_Accessor.reset();
    }
  }
}

void CapabilityAssessmentActionType::reset() noexcept {
  plannedTaskID_Accessor.reset();
  estimatedCapabilityCommand_Accessor.reset();
  estimatedSupportingCapabilityCommand_Accessor.reset();
}

uci::type::CapabilityAssessmentActionType::CapabilityAssessmentActionTypeChoice CapabilityAssessmentActionType::getCapabilityAssessmentActionTypeChoiceOrdinal() const noexcept {
  if (plannedTaskID_Accessor) {
    return CAPABILITYASSESSMENTACTIONTYPE_CHOICE_PLANNEDTASKID;
  }
  if (estimatedCapabilityCommand_Accessor) {
    return CAPABILITYASSESSMENTACTIONTYPE_CHOICE_ESTIMATEDCAPABILITYCOMMAND;
  }
  if (estimatedSupportingCapabilityCommand_Accessor) {
    return CAPABILITYASSESSMENTACTIONTYPE_CHOICE_ESTIMATEDSUPPORTINGCAPABILITYCOMMAND;
  }
  return CAPABILITYASSESSMENTACTIONTYPE_CHOICE_NONE;
}

uci::type::CapabilityAssessmentActionType& CapabilityAssessmentActionType::setCapabilityAssessmentActionTypeChoiceOrdinal(uci::type::CapabilityAssessmentActionType::CapabilityAssessmentActionTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case CAPABILITYASSESSMENTACTIONTYPE_CHOICE_PLANNEDTASKID:
      choosePlannedTaskID("setCapabilityAssessmentActionTypeChoiceOrdinal", type);
      break;
    case CAPABILITYASSESSMENTACTIONTYPE_CHOICE_ESTIMATEDCAPABILITYCOMMAND:
      chooseEstimatedCapabilityCommand("setCapabilityAssessmentActionTypeChoiceOrdinal", type);
      break;
    case CAPABILITYASSESSMENTACTIONTYPE_CHOICE_ESTIMATEDSUPPORTINGCAPABILITYCOMMAND:
      chooseEstimatedSupportingCapabilityCommand("setCapabilityAssessmentActionTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setCapabilityAssessmentActionTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::TaskID_Type& CapabilityAssessmentActionType::getPlannedTaskID_() const {
  if (plannedTaskID_Accessor) {
    return *plannedTaskID_Accessor;
  }
  throw uci::base::UCIException("Error in getPlannedTaskID(): Unable to get PlannedTaskID, field not selected");
}

const uci::type::TaskID_Type& CapabilityAssessmentActionType::getPlannedTaskID() const {
  return getPlannedTaskID_();
}

uci::type::TaskID_Type& CapabilityAssessmentActionType::getPlannedTaskID() {
  return getPlannedTaskID_();
}

uci::type::CapabilityAssessmentActionType& CapabilityAssessmentActionType::setPlannedTaskID(const uci::type::TaskID_Type& accessor) {
  choosePlannedTaskID();
  if (&accessor != plannedTaskID_Accessor.get()) {
    plannedTaskID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityAssessmentActionType::isPlannedTaskID() const noexcept {
  return static_cast<bool>(plannedTaskID_Accessor);
}

uci::type::TaskID_Type& CapabilityAssessmentActionType::choosePlannedTaskID(const std::string& method, uci::base::accessorType::AccessorType type) {
  estimatedCapabilityCommand_Accessor.reset();
  estimatedSupportingCapabilityCommand_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskID_Type : type};
  if ((!plannedTaskID_Accessor) || (plannedTaskID_Accessor->getAccessorType() != requestedType)) {
    plannedTaskID_Accessor = TaskID_Type::create(type);
    if (!plannedTaskID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *plannedTaskID_Accessor;
}

uci::type::TaskID_Type& CapabilityAssessmentActionType::choosePlannedTaskID(uci::base::accessorType::AccessorType type) {
  return choosePlannedTaskID("choosePlannedTaskID", type);
}

uci::type::CapabilityCommandBaseType& CapabilityAssessmentActionType::getEstimatedCapabilityCommand_() const {
  if (estimatedCapabilityCommand_Accessor) {
    return *estimatedCapabilityCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedCapabilityCommand(): Unable to get EstimatedCapabilityCommand, field not selected");
}

const uci::type::CapabilityCommandBaseType& CapabilityAssessmentActionType::getEstimatedCapabilityCommand() const {
  return getEstimatedCapabilityCommand_();
}

uci::type::CapabilityCommandBaseType& CapabilityAssessmentActionType::getEstimatedCapabilityCommand() {
  return getEstimatedCapabilityCommand_();
}

uci::type::CapabilityAssessmentActionType& CapabilityAssessmentActionType::setEstimatedCapabilityCommand(const uci::type::CapabilityCommandBaseType& accessor) {
  chooseEstimatedCapabilityCommand("setEstimatedCapabilityCommand", accessor.getAccessorType());
  if (&accessor != estimatedCapabilityCommand_Accessor.get()) {
    estimatedCapabilityCommand_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityAssessmentActionType::isEstimatedCapabilityCommand() const noexcept {
  return static_cast<bool>(estimatedCapabilityCommand_Accessor);
}

uci::type::CapabilityCommandBaseType& CapabilityAssessmentActionType::chooseEstimatedCapabilityCommand(const std::string& method, uci::base::accessorType::AccessorType type) {
  plannedTaskID_Accessor.reset();
  estimatedSupportingCapabilityCommand_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandBaseType : type};
  if ((!estimatedCapabilityCommand_Accessor) || (estimatedCapabilityCommand_Accessor->getAccessorType() != requestedType)) {
    estimatedCapabilityCommand_Accessor = CapabilityCommandBaseType::create(type);
    if (!estimatedCapabilityCommand_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedCapabilityCommand_Accessor;
}

uci::type::CapabilityCommandBaseType& CapabilityAssessmentActionType::chooseEstimatedCapabilityCommand(uci::base::accessorType::AccessorType type) {
  return chooseEstimatedCapabilityCommand("chooseEstimatedCapabilityCommand", type);
}

uci::type::SupportCapabilityCommandBaseType& CapabilityAssessmentActionType::getEstimatedSupportingCapabilityCommand_() const {
  if (estimatedSupportingCapabilityCommand_Accessor) {
    return *estimatedSupportingCapabilityCommand_Accessor;
  }
  throw uci::base::UCIException("Error in getEstimatedSupportingCapabilityCommand(): Unable to get EstimatedSupportingCapabilityCommand, field not selected");
}

const uci::type::SupportCapabilityCommandBaseType& CapabilityAssessmentActionType::getEstimatedSupportingCapabilityCommand() const {
  return getEstimatedSupportingCapabilityCommand_();
}

uci::type::SupportCapabilityCommandBaseType& CapabilityAssessmentActionType::getEstimatedSupportingCapabilityCommand() {
  return getEstimatedSupportingCapabilityCommand_();
}

uci::type::CapabilityAssessmentActionType& CapabilityAssessmentActionType::setEstimatedSupportingCapabilityCommand(const uci::type::SupportCapabilityCommandBaseType& accessor) {
  chooseEstimatedSupportingCapabilityCommand("setEstimatedSupportingCapabilityCommand", accessor.getAccessorType());
  if (&accessor != estimatedSupportingCapabilityCommand_Accessor.get()) {
    estimatedSupportingCapabilityCommand_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CapabilityAssessmentActionType::isEstimatedSupportingCapabilityCommand() const noexcept {
  return static_cast<bool>(estimatedSupportingCapabilityCommand_Accessor);
}

uci::type::SupportCapabilityCommandBaseType& CapabilityAssessmentActionType::chooseEstimatedSupportingCapabilityCommand(const std::string& method, uci::base::accessorType::AccessorType type) {
  plannedTaskID_Accessor.reset();
  estimatedCapabilityCommand_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::supportCapabilityCommandBaseType : type};
  if ((!estimatedSupportingCapabilityCommand_Accessor) || (estimatedSupportingCapabilityCommand_Accessor->getAccessorType() != requestedType)) {
    estimatedSupportingCapabilityCommand_Accessor = SupportCapabilityCommandBaseType::create(type);
    if (!estimatedSupportingCapabilityCommand_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *estimatedSupportingCapabilityCommand_Accessor;
}

uci::type::SupportCapabilityCommandBaseType& CapabilityAssessmentActionType::chooseEstimatedSupportingCapabilityCommand(uci::base::accessorType::AccessorType type) {
  return chooseEstimatedSupportingCapabilityCommand("chooseEstimatedSupportingCapabilityCommand", type);
}

std::unique_ptr<CapabilityAssessmentActionType> CapabilityAssessmentActionType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityAssessmentActionType : type};
  return (requestedType == uci::type::accessorType::capabilityAssessmentActionType) ? boost::make_unique<CapabilityAssessmentActionType>() : nullptr;
}

/**  */
namespace CapabilityAssessmentActionType_Names {

constexpr const char* Extern_Type_Name{"CapabilityAssessmentActionType"};
constexpr const char* PlannedTaskID_Name{"PlannedTaskID"};
constexpr const char* EstimatedCapabilityCommand_Name{"EstimatedCapabilityCommand"};
constexpr const char* EstimatedSupportingCapabilityCommand_Name{"EstimatedSupportingCapabilityCommand"};

} // namespace CapabilityAssessmentActionType_Names

void CapabilityAssessmentActionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityAssessmentActionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityAssessmentActionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityAssessmentActionType_Names::PlannedTaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.choosePlannedTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityAssessmentActionType_Names::EstimatedCapabilityCommand_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEstimatedCapabilityCommand(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityAssessmentActionType_Names::EstimatedSupportingCapabilityCommand_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseEstimatedSupportingCapabilityCommand(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string CapabilityAssessmentActionType::serialize(const uci::type::CapabilityAssessmentActionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityAssessmentActionType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityAssessmentActionType_Names::Extern_Type_Name);
  }
  if (accessor.isPlannedTaskID()) {
    TaskID_Type::serialize(accessor.getPlannedTaskID(), node, CapabilityAssessmentActionType_Names::PlannedTaskID_Name);
  } else if (accessor.isEstimatedCapabilityCommand()) {
    CapabilityCommandBaseType::serialize(accessor.getEstimatedCapabilityCommand(), node, CapabilityAssessmentActionType_Names::EstimatedCapabilityCommand_Name);
  } else if (accessor.isEstimatedSupportingCapabilityCommand()) {
    SupportCapabilityCommandBaseType::serialize(accessor.getEstimatedSupportingCapabilityCommand(), node, CapabilityAssessmentActionType_Names::EstimatedSupportingCapabilityCommand_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityAssessmentActionType& CapabilityAssessmentActionType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityAssessmentActionType>().release());
}

uci::type::CapabilityAssessmentActionType& CapabilityAssessmentActionType::create(const uci::type::CapabilityAssessmentActionType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityAssessmentActionType> newAccessor{boost::make_unique<asb_uci::type::CapabilityAssessmentActionType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityAssessmentActionType::destroy(uci::type::CapabilityAssessmentActionType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityAssessmentActionType*>(&accessor);
}

} // namespace type

} // namespace uci

