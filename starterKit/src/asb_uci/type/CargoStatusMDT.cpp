/** @file CargoStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CargoStatusMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CargoID_Type.h"
#include "asb_uci/type/CargoLocationType.h"
#include "asb_uci/type/CargoType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CargoID_Type.h"
#include "uci/type/CargoLocationType.h"
#include "uci/type/CargoStatusMDT.h"
#include "uci/type/CargoType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CargoStatusMDT::CargoStatusMDT()
  : cargoID_Accessor{boost::make_unique<CargoID_Type>()},
    cargoType_Accessor{boost::make_unique<CargoType>()},
    cargoLocation_Accessor{boost::make_unique<CargoLocationType>()} {
}

CargoStatusMDT::~CargoStatusMDT() = default;

void CargoStatusMDT::copy(const uci::type::CargoStatusMDT& accessor) {
  copyImpl(accessor, false);
}

void CargoStatusMDT::copyImpl(const uci::type::CargoStatusMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const CargoStatusMDT&>(accessor);
    setCargoID(*(accessorImpl.cargoID_Accessor));
    setCargoType(*(accessorImpl.cargoType_Accessor));
    setCargoLocation(*(accessorImpl.cargoLocation_Accessor));
  }
}

void CargoStatusMDT::reset() noexcept {
  cargoID_Accessor->reset();
  cargoType_Accessor->reset();
  cargoLocation_Accessor->reset();
}

const uci::type::CargoID_Type& CargoStatusMDT::getCargoID() const {
  return *cargoID_Accessor;
}

uci::type::CargoID_Type& CargoStatusMDT::getCargoID() {
  return *cargoID_Accessor;
}

uci::type::CargoStatusMDT& CargoStatusMDT::setCargoID(const uci::type::CargoID_Type& accessor) {
  if (&accessor != cargoID_Accessor.get()) {
    cargoID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CargoType& CargoStatusMDT::getCargoType() const {
  return *cargoType_Accessor;
}

uci::type::CargoType& CargoStatusMDT::getCargoType() {
  return *cargoType_Accessor;
}

uci::type::CargoStatusMDT& CargoStatusMDT::setCargoType(const uci::type::CargoType& accessor) {
  if (&accessor != cargoType_Accessor.get()) {
    cargoType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CargoLocationType& CargoStatusMDT::getCargoLocation() const {
  return *cargoLocation_Accessor;
}

uci::type::CargoLocationType& CargoStatusMDT::getCargoLocation() {
  return *cargoLocation_Accessor;
}

uci::type::CargoStatusMDT& CargoStatusMDT::setCargoLocation(const uci::type::CargoLocationType& accessor) {
  if (&accessor != cargoLocation_Accessor.get()) {
    cargoLocation_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CargoStatusMDT> CargoStatusMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cargoStatusMDT : type};
  return (requestedType == uci::type::accessorType::cargoStatusMDT) ? boost::make_unique<CargoStatusMDT>() : nullptr;
}

/**  */
namespace CargoStatusMDT_Names {

constexpr const char* Extern_Type_Name{"CargoStatusMDT"};
constexpr const char* CargoID_Name{"CargoID"};
constexpr const char* CargoType_Name{"CargoType"};
constexpr const char* CargoLocation_Name{"CargoLocation"};

} // namespace CargoStatusMDT_Names

void CargoStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::CargoStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CargoStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CargoStatusMDT_Names::CargoID_Name) {
      CargoID_Type::deserialize(valueType.second, accessor.getCargoID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CargoStatusMDT_Names::CargoType_Name) {
      CargoType::deserialize(valueType.second, accessor.getCargoType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CargoStatusMDT_Names::CargoLocation_Name) {
      CargoLocationType::deserialize(valueType.second, accessor.getCargoLocation(), nodeName, nsPrefix);
    }
  }
}

std::string CargoStatusMDT::serialize(const uci::type::CargoStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CargoStatusMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CargoStatusMDT_Names::Extern_Type_Name);
  }
  CargoID_Type::serialize(accessor.getCargoID(), node, CargoStatusMDT_Names::CargoID_Name);
  CargoType::serialize(accessor.getCargoType(), node, CargoStatusMDT_Names::CargoType_Name);
  CargoLocationType::serialize(accessor.getCargoLocation(), node, CargoStatusMDT_Names::CargoLocation_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CargoStatusMDT& CargoStatusMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CargoStatusMDT>().release());
}

uci::type::CargoStatusMDT& CargoStatusMDT::create(const uci::type::CargoStatusMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CargoStatusMDT> newAccessor{boost::make_unique<asb_uci::type::CargoStatusMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CargoStatusMDT::destroy(uci::type::CargoStatusMDT& accessor) {
  delete dynamic_cast<asb_uci::type::CargoStatusMDT*>(&accessor);
}

} // namespace type

} // namespace uci

