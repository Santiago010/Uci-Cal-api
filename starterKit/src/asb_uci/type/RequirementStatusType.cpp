/** @file RequirementStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RequirementStatusType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/RequirementExecutionApprovalStatusBaseType.h"
#include "asb_uci/type/RequirementExecutionStatusDetailsType.h"
#include "asb_uci/type/RequirementInstanceID_ChoiceType.h"
#include "asb_uci/type/RequirementPlanningStatusDetailsType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/RequirementExecutionApprovalStatusBaseType.h"
#include "uci/type/RequirementExecutionStatusDetailsType.h"
#include "uci/type/RequirementInstanceID_ChoiceType.h"
#include "uci/type/RequirementPlanningStatusDetailsType.h"
#include "uci/type/RequirementStatusType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RequirementStatusType::RequirementStatusType()
  : requirementID_Accessor{boost::make_unique<RequirementInstanceID_ChoiceType>()},
    executionApprovalStatus_Accessor{boost::make_unique<ExecutionApprovalStatus>(0, SIZE_MAX)} {
}

RequirementStatusType::~RequirementStatusType() = default;

void RequirementStatusType::copy(const uci::type::RequirementStatusType& accessor) {
  copyImpl(accessor, false);
}

void RequirementStatusType::copyImpl(const uci::type::RequirementStatusType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const RequirementStatusType&>(accessor);
    setRequirementID(*(accessorImpl.requirementID_Accessor));
    if (accessorImpl.planningStatus_Accessor) {
      setPlanningStatus(*(accessorImpl.planningStatus_Accessor));
    } else {
      planningStatus_Accessor.reset();
    }
    setExecutionApprovalStatus(*(accessorImpl.executionApprovalStatus_Accessor));
    if (accessorImpl.executionStatus_Accessor) {
      setExecutionStatus(*(accessorImpl.executionStatus_Accessor));
    } else {
      executionStatus_Accessor.reset();
    }
  }
}

void RequirementStatusType::reset() noexcept {
  requirementID_Accessor->reset();
  planningStatus_Accessor.reset();
  executionApprovalStatus_Accessor->reset();
  executionStatus_Accessor.reset();
}

const uci::type::RequirementInstanceID_ChoiceType& RequirementStatusType::getRequirementID() const {
  return *requirementID_Accessor;
}

uci::type::RequirementInstanceID_ChoiceType& RequirementStatusType::getRequirementID() {
  return *requirementID_Accessor;
}

uci::type::RequirementStatusType& RequirementStatusType::setRequirementID(const uci::type::RequirementInstanceID_ChoiceType& accessor) {
  if (&accessor != requirementID_Accessor.get()) {
    requirementID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementPlanningStatusDetailsType& RequirementStatusType::getPlanningStatus_() const {
  if (planningStatus_Accessor) {
    return *planningStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getPlanningStatus(): An attempt was made to get an optional field that was not enabled, call hasPlanningStatus() to determine if it is safe to call getPlanningStatus()");
}

const uci::type::RequirementPlanningStatusDetailsType& RequirementStatusType::getPlanningStatus() const {
  return getPlanningStatus_();
}

uci::type::RequirementPlanningStatusDetailsType& RequirementStatusType::getPlanningStatus() {
  return getPlanningStatus_();
}

uci::type::RequirementStatusType& RequirementStatusType::setPlanningStatus(const uci::type::RequirementPlanningStatusDetailsType& accessor) {
  enablePlanningStatus(accessor.getAccessorType());
  if (&accessor != planningStatus_Accessor.get()) {
    planningStatus_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RequirementStatusType::hasPlanningStatus() const noexcept {
  return static_cast<bool>(planningStatus_Accessor);
}

uci::type::RequirementPlanningStatusDetailsType& RequirementStatusType::enablePlanningStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementPlanningStatusDetailsType : type};
  if ((!planningStatus_Accessor) || (planningStatus_Accessor->getAccessorType() != requestedType)) {
    planningStatus_Accessor = RequirementPlanningStatusDetailsType::create(requestedType);
    if (!planningStatus_Accessor) {
      throw uci::base::UCIException("Error in enablePlanningStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *planningStatus_Accessor;
}

uci::type::RequirementStatusType& RequirementStatusType::clearPlanningStatus() noexcept {
  planningStatus_Accessor.reset();
  return *this;
}

const uci::type::RequirementStatusType::ExecutionApprovalStatus& RequirementStatusType::getExecutionApprovalStatus() const {
  return *executionApprovalStatus_Accessor;
}

uci::type::RequirementStatusType::ExecutionApprovalStatus& RequirementStatusType::getExecutionApprovalStatus() {
  return *executionApprovalStatus_Accessor;
}

uci::type::RequirementStatusType& RequirementStatusType::setExecutionApprovalStatus(const uci::type::RequirementStatusType::ExecutionApprovalStatus& accessor) {
  if (&accessor != executionApprovalStatus_Accessor.get()) {
    executionApprovalStatus_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::RequirementExecutionStatusDetailsType& RequirementStatusType::getExecutionStatus_() const {
  if (executionStatus_Accessor) {
    return *executionStatus_Accessor;
  }
  throw uci::base::UCIException("Error in getExecutionStatus(): An attempt was made to get an optional field that was not enabled, call hasExecutionStatus() to determine if it is safe to call getExecutionStatus()");
}

const uci::type::RequirementExecutionStatusDetailsType& RequirementStatusType::getExecutionStatus() const {
  return getExecutionStatus_();
}

uci::type::RequirementExecutionStatusDetailsType& RequirementStatusType::getExecutionStatus() {
  return getExecutionStatus_();
}

uci::type::RequirementStatusType& RequirementStatusType::setExecutionStatus(const uci::type::RequirementExecutionStatusDetailsType& accessor) {
  enableExecutionStatus(accessor.getAccessorType());
  if (&accessor != executionStatus_Accessor.get()) {
    executionStatus_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool RequirementStatusType::hasExecutionStatus() const noexcept {
  return static_cast<bool>(executionStatus_Accessor);
}

uci::type::RequirementExecutionStatusDetailsType& RequirementStatusType::enableExecutionStatus(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementExecutionStatusDetailsType : type};
  if ((!executionStatus_Accessor) || (executionStatus_Accessor->getAccessorType() != requestedType)) {
    executionStatus_Accessor = RequirementExecutionStatusDetailsType::create(requestedType);
    if (!executionStatus_Accessor) {
      throw uci::base::UCIException("Error in enableExecutionStatus(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *executionStatus_Accessor;
}

uci::type::RequirementStatusType& RequirementStatusType::clearExecutionStatus() noexcept {
  executionStatus_Accessor.reset();
  return *this;
}

std::unique_ptr<RequirementStatusType> RequirementStatusType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::requirementStatusType : type};
  return (requestedType == uci::type::accessorType::requirementStatusType) ? boost::make_unique<RequirementStatusType>() : nullptr;
}

/**  */
namespace RequirementStatusType_Names {

constexpr const char* Extern_Type_Name{"RequirementStatusType"};
constexpr const char* RequirementID_Name{"RequirementID"};
constexpr const char* PlanningStatus_Name{"PlanningStatus"};
constexpr const char* ExecutionApprovalStatus_Name{"ExecutionApprovalStatus"};
constexpr const char* ExecutionStatus_Name{"ExecutionStatus"};

} // namespace RequirementStatusType_Names

void RequirementStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RequirementStatusType_Names::RequirementID_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.getRequirementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementStatusType_Names::PlanningStatus_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePlanningStatus(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementStatusType_Names::ExecutionApprovalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementStatusType::ExecutionApprovalStatus& boundedList = accessor.getExecutionApprovalStatus();
        const uci::type::RequirementStatusType::ExecutionApprovalStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementStatusType_Names::ExecutionStatus_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExecutionStatus(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string RequirementStatusType::serialize(const uci::type::RequirementStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RequirementStatusType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementStatusType_Names::Extern_Type_Name);
  }
  RequirementInstanceID_ChoiceType::serialize(accessor.getRequirementID(), node, RequirementStatusType_Names::RequirementID_Name);
  if (accessor.hasPlanningStatus()) {
    RequirementPlanningStatusDetailsType::serialize(accessor.getPlanningStatus(), node, RequirementStatusType_Names::PlanningStatus_Name);
  }
  {
    const uci::type::RequirementStatusType::ExecutionApprovalStatus& boundedList = accessor.getExecutionApprovalStatus();
    for (uci::type::RequirementStatusType::ExecutionApprovalStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::RequirementExecutionApprovalStatusBaseType::serialize(boundedList.at(i), node, RequirementStatusType_Names::ExecutionApprovalStatus_Name);
    }
  }
  if (accessor.hasExecutionStatus()) {
    RequirementExecutionStatusDetailsType::serialize(accessor.getExecutionStatus(), node, RequirementStatusType_Names::ExecutionStatus_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RequirementStatusType& RequirementStatusType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RequirementStatusType>().release());
}

uci::type::RequirementStatusType& RequirementStatusType::create(const uci::type::RequirementStatusType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RequirementStatusType> newAccessor{boost::make_unique<asb_uci::type::RequirementStatusType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RequirementStatusType::destroy(uci::type::RequirementStatusType& accessor) {
  delete dynamic_cast<asb_uci::type::RequirementStatusType*>(&accessor);
}

} // namespace type

} // namespace uci

