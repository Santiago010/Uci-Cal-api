/** @file AO_CapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AO_CapabilityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AO_ComponentSettingsType.h"
#include "asb_uci/type/CapabilityCommandBaseType.h"
#include "asb_uci/type/OpticalCollectionConstraintsType.h"
#include "asb_uci/type/RepetitionType.h"
#include "asb_uci/type/TargetType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AO_CapabilityCommandType.h"
#include "uci/type/AO_ComponentSettingsType.h"
#include "uci/type/OpticalCollectionConstraintsType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/TargetType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AO_CapabilityCommandType::AO_CapabilityCommandType()
  : target_Accessor{boost::make_unique<TargetType>()} {
}

AO_CapabilityCommandType::~AO_CapabilityCommandType() = default;

void AO_CapabilityCommandType::copy(const uci::type::AO_CapabilityCommandType& accessor) {
  copyImpl(accessor, false);
}

void AO_CapabilityCommandType::copyImpl(const uci::type::AO_CapabilityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const AO_CapabilityCommandType&>(accessor);
    setTarget(*(accessorImpl.target_Accessor));
    if (accessorImpl.componentSettings_Accessor) {
      setComponentSettings(*(accessorImpl.componentSettings_Accessor));
    } else {
      componentSettings_Accessor.reset();
    }
    if (accessorImpl.emissionConstraints_Accessor) {
      setEmissionConstraints(*(accessorImpl.emissionConstraints_Accessor));
    } else {
      emissionConstraints_Accessor.reset();
    }
    if (accessorImpl.repetition_Accessor) {
      setRepetition(*(accessorImpl.repetition_Accessor));
    } else {
      repetition_Accessor.reset();
    }
  }
}

void AO_CapabilityCommandType::reset() noexcept {
  CapabilityCommandBaseType::reset();
  target_Accessor->reset();
  componentSettings_Accessor.reset();
  emissionConstraints_Accessor.reset();
  repetition_Accessor.reset();
}

const uci::type::TargetType& AO_CapabilityCommandType::getTarget() const {
  return *target_Accessor;
}

uci::type::TargetType& AO_CapabilityCommandType::getTarget() {
  return *target_Accessor;
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::setTarget(const uci::type::TargetType& accessor) {
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AO_ComponentSettingsType& AO_CapabilityCommandType::getComponentSettings_() const {
  if (componentSettings_Accessor) {
    return *componentSettings_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentSettings(): An attempt was made to get an optional field that was not enabled, call hasComponentSettings() to determine if it is safe to call getComponentSettings()");
}

const uci::type::AO_ComponentSettingsType& AO_CapabilityCommandType::getComponentSettings() const {
  return getComponentSettings_();
}

uci::type::AO_ComponentSettingsType& AO_CapabilityCommandType::getComponentSettings() {
  return getComponentSettings_();
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::setComponentSettings(const uci::type::AO_ComponentSettingsType& accessor) {
  enableComponentSettings();
  if (&accessor != componentSettings_Accessor.get()) {
    componentSettings_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AO_CapabilityCommandType::hasComponentSettings() const noexcept {
  return static_cast<bool>(componentSettings_Accessor);
}

uci::type::AO_ComponentSettingsType& AO_CapabilityCommandType::enableComponentSettings(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_ComponentSettingsType : type};
  if ((!componentSettings_Accessor) || (componentSettings_Accessor->getAccessorType() != requestedType)) {
    componentSettings_Accessor = AO_ComponentSettingsType::create(requestedType);
    if (!componentSettings_Accessor) {
      throw uci::base::UCIException("Error in enableComponentSettings(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *componentSettings_Accessor;
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::clearComponentSettings() noexcept {
  componentSettings_Accessor.reset();
  return *this;
}

uci::type::OpticalCollectionConstraintsType& AO_CapabilityCommandType::getEmissionConstraints_() const {
  if (emissionConstraints_Accessor) {
    return *emissionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getEmissionConstraints(): An attempt was made to get an optional field that was not enabled, call hasEmissionConstraints() to determine if it is safe to call getEmissionConstraints()");
}

const uci::type::OpticalCollectionConstraintsType& AO_CapabilityCommandType::getEmissionConstraints() const {
  return getEmissionConstraints_();
}

uci::type::OpticalCollectionConstraintsType& AO_CapabilityCommandType::getEmissionConstraints() {
  return getEmissionConstraints_();
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::setEmissionConstraints(const uci::type::OpticalCollectionConstraintsType& accessor) {
  enableEmissionConstraints(accessor.getAccessorType());
  if (&accessor != emissionConstraints_Accessor.get()) {
    emissionConstraints_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AO_CapabilityCommandType::hasEmissionConstraints() const noexcept {
  return static_cast<bool>(emissionConstraints_Accessor);
}

uci::type::OpticalCollectionConstraintsType& AO_CapabilityCommandType::enableEmissionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opticalCollectionConstraintsType : type};
  if ((!emissionConstraints_Accessor) || (emissionConstraints_Accessor->getAccessorType() != requestedType)) {
    emissionConstraints_Accessor = OpticalCollectionConstraintsType::create(requestedType);
    if (!emissionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableEmissionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emissionConstraints_Accessor;
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::clearEmissionConstraints() noexcept {
  emissionConstraints_Accessor.reset();
  return *this;
}

uci::type::RepetitionType& AO_CapabilityCommandType::getRepetition_() const {
  if (repetition_Accessor) {
    return *repetition_Accessor;
  }
  throw uci::base::UCIException("Error in getRepetition(): An attempt was made to get an optional field that was not enabled, call hasRepetition() to determine if it is safe to call getRepetition()");
}

const uci::type::RepetitionType& AO_CapabilityCommandType::getRepetition() const {
  return getRepetition_();
}

uci::type::RepetitionType& AO_CapabilityCommandType::getRepetition() {
  return getRepetition_();
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::setRepetition(const uci::type::RepetitionType& accessor) {
  enableRepetition();
  if (&accessor != repetition_Accessor.get()) {
    repetition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AO_CapabilityCommandType::hasRepetition() const noexcept {
  return static_cast<bool>(repetition_Accessor);
}

uci::type::RepetitionType& AO_CapabilityCommandType::enableRepetition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::repetitionType : type};
  if ((!repetition_Accessor) || (repetition_Accessor->getAccessorType() != requestedType)) {
    repetition_Accessor = RepetitionType::create(requestedType);
    if (!repetition_Accessor) {
      throw uci::base::UCIException("Error in enableRepetition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *repetition_Accessor;
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::clearRepetition() noexcept {
  repetition_Accessor.reset();
  return *this;
}

std::unique_ptr<AO_CapabilityCommandType> AO_CapabilityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CapabilityCommandType : type};
  return (requestedType == uci::type::accessorType::aO_CapabilityCommandType) ? boost::make_unique<AO_CapabilityCommandType>() : nullptr;
}

/**  */
namespace AO_CapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"AO_CapabilityCommandType"};
constexpr const char* Target_Name{"Target"};
constexpr const char* ComponentSettings_Name{"ComponentSettings"};
constexpr const char* EmissionConstraints_Name{"EmissionConstraints"};
constexpr const char* Repetition_Name{"Repetition"};

} // namespace AO_CapabilityCommandType_Names

void AO_CapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AO_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AO_CapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AO_CapabilityCommandType_Names::Target_Name) {
      TargetType::deserialize(valueType.second, accessor.getTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_CapabilityCommandType_Names::ComponentSettings_Name) {
      AO_ComponentSettingsType::deserialize(valueType.second, accessor.enableComponentSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_CapabilityCommandType_Names::EmissionConstraints_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEmissionConstraints(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_CapabilityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    }
  }
  CapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string AO_CapabilityCommandType::serialize(const uci::type::AO_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AO_CapabilityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, AO_CapabilityCommandType_Names::Extern_Type_Name);
  }
  CapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  TargetType::serialize(accessor.getTarget(), node, AO_CapabilityCommandType_Names::Target_Name);
  if (accessor.hasComponentSettings()) {
    AO_ComponentSettingsType::serialize(accessor.getComponentSettings(), node, AO_CapabilityCommandType_Names::ComponentSettings_Name);
  }
  if (accessor.hasEmissionConstraints()) {
    OpticalCollectionConstraintsType::serialize(accessor.getEmissionConstraints(), node, AO_CapabilityCommandType_Names::EmissionConstraints_Name);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, AO_CapabilityCommandType_Names::Repetition_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AO_CapabilityCommandType>().release());
}

uci::type::AO_CapabilityCommandType& AO_CapabilityCommandType::create(const uci::type::AO_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AO_CapabilityCommandType> newAccessor{boost::make_unique<asb_uci::type::AO_CapabilityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AO_CapabilityCommandType::destroy(uci::type::AO_CapabilityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::AO_CapabilityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

