/** @file CS_ActivityDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CS_ActivityDetailType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CS_SENO_Type.h"
#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_ActivityDetailType.h"
#include "uci/type/CS_SENO_Type.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/IntPositiveType.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CS_ActivityDetailType::CS_ActivityDetailType() = default;

CS_ActivityDetailType::~CS_ActivityDetailType() = default;

void CS_ActivityDetailType::copy(const uci::type::CS_ActivityDetailType& accessor) {
  copyImpl(accessor, false);
}

void CS_ActivityDetailType::copyImpl(const uci::type::CS_ActivityDetailType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::cS_ActivityDetailType)) {
      const auto& accessorImpl = dynamic_cast<const CS_ActivityDetailType&>(accessor);
      if (accessorImpl.sENO_Accessor) {
        setSENO(*(accessorImpl.sENO_Accessor));
      } else {
        sENO_Accessor.reset();
      }
      if (accessorImpl.signal_Accessor) {
        setSignal(*(accessorImpl.signal_Accessor));
      } else {
        signal_Accessor.reset();
      }
      if (accessorImpl.forceName_Accessor) {
        setForceName(*(accessorImpl.forceName_Accessor));
      } else {
        forceName_Accessor.reset();
      }
      if (accessorImpl.cS_StartStop_Accessor) {
        setCS_StartStop(*(accessorImpl.cS_StartStop_Accessor));
      } else {
        cS_StartStop_Accessor.reset();
      }
      if (accessorImpl.hasEIRP()) {
        setEIRP(accessorImpl.getEIRP());
      } else {
        clearEIRP();
      }
      if (accessorImpl.hasSatNo()) {
        setSatNo(accessorImpl.getSatNo());
      } else {
        clearSatNo();
      }
      if (accessorImpl.hasSuccess()) {
        setSuccess(accessorImpl.getSuccess());
      } else {
        clearSuccess();
      }
      if (accessorImpl.content_Accessor) {
        setContent(*(accessorImpl.content_Accessor));
      } else {
        content_Accessor.reset();
      }
      if (accessorImpl.tactic_Accessor) {
        setTactic(*(accessorImpl.tactic_Accessor));
      } else {
        tactic_Accessor.reset();
      }
      if (accessorImpl.technique_Accessor) {
        setTechnique(*(accessorImpl.technique_Accessor));
      } else {
        technique_Accessor.reset();
      }
      if (accessorImpl.commentsID_Accessor) {
        setCommentsID(*(accessorImpl.commentsID_Accessor));
      } else {
        commentsID_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CS_ActivityDetailType::reset() noexcept {
  sENO_Accessor.reset();
  signal_Accessor.reset();
  forceName_Accessor.reset();
  cS_StartStop_Accessor.reset();
  clearEIRP();
  clearSatNo();
  clearSuccess();
  content_Accessor.reset();
  tactic_Accessor.reset();
  technique_Accessor.reset();
  commentsID_Accessor.reset();
}

uci::type::CS_SENO_Type& CS_ActivityDetailType::getSENO_() const {
  if (sENO_Accessor) {
    return *sENO_Accessor;
  }
  throw uci::base::UCIException("Error in getSENO(): An attempt was made to get an optional field that was not enabled, call hasSENO() to determine if it is safe to call getSENO()");
}

const uci::type::CS_SENO_Type& CS_ActivityDetailType::getSENO() const {
  return getSENO_();
}

uci::type::CS_SENO_Type& CS_ActivityDetailType::getSENO() {
  return getSENO_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setSENO(const uci::type::CS_SENO_Type& value) {
  return setSENO(value.c_str());
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setSENO(const std::string& value) {
  return setSENO(value.c_str());
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setSENO(const char* value) {
  enableSENO().setStringValue(value);
  return *this;
}

bool CS_ActivityDetailType::hasSENO() const noexcept {
  return static_cast<bool>(sENO_Accessor);
}

uci::type::CS_SENO_Type& CS_ActivityDetailType::enableSENO(uci::base::accessorType::AccessorType type) {
  if (!sENO_Accessor) {
    sENO_Accessor = CS_SENO_Type::create(type);
  }
  return *sENO_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearSENO() noexcept {
  sENO_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getSignal_() const {
  if (signal_Accessor) {
    return *signal_Accessor;
  }
  throw uci::base::UCIException("Error in getSignal(): An attempt was made to get an optional field that was not enabled, call hasSignal() to determine if it is safe to call getSignal()");
}

const uci::type::ForeignKeyType& CS_ActivityDetailType::getSignal() const {
  return getSignal_();
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getSignal() {
  return getSignal_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setSignal(const uci::type::ForeignKeyType& accessor) {
  enableSignal(accessor.getAccessorType());
  if (&accessor != signal_Accessor.get()) {
    signal_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_ActivityDetailType::hasSignal() const noexcept {
  return static_cast<bool>(signal_Accessor);
}

uci::type::ForeignKeyType& CS_ActivityDetailType::enableSignal(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!signal_Accessor) || (signal_Accessor->getAccessorType() != requestedType)) {
    signal_Accessor = ForeignKeyType::create(requestedType);
    if (!signal_Accessor) {
      throw uci::base::UCIException("Error in enableSignal(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *signal_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearSignal() noexcept {
  signal_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getForceName_() const {
  if (forceName_Accessor) {
    return *forceName_Accessor;
  }
  throw uci::base::UCIException("Error in getForceName(): An attempt was made to get an optional field that was not enabled, call hasForceName() to determine if it is safe to call getForceName()");
}

const uci::type::ForeignKeyType& CS_ActivityDetailType::getForceName() const {
  return getForceName_();
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getForceName() {
  return getForceName_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setForceName(const uci::type::ForeignKeyType& accessor) {
  enableForceName(accessor.getAccessorType());
  if (&accessor != forceName_Accessor.get()) {
    forceName_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_ActivityDetailType::hasForceName() const noexcept {
  return static_cast<bool>(forceName_Accessor);
}

uci::type::ForeignKeyType& CS_ActivityDetailType::enableForceName(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!forceName_Accessor) || (forceName_Accessor->getAccessorType() != requestedType)) {
    forceName_Accessor = ForeignKeyType::create(requestedType);
    if (!forceName_Accessor) {
      throw uci::base::UCIException("Error in enableForceName(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *forceName_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearForceName() noexcept {
  forceName_Accessor.reset();
  return *this;
}

uci::type::DateTimeRangeType& CS_ActivityDetailType::getCS_StartStop_() const {
  if (cS_StartStop_Accessor) {
    return *cS_StartStop_Accessor;
  }
  throw uci::base::UCIException("Error in getCS_StartStop(): An attempt was made to get an optional field that was not enabled, call hasCS_StartStop() to determine if it is safe to call getCS_StartStop()");
}

const uci::type::DateTimeRangeType& CS_ActivityDetailType::getCS_StartStop() const {
  return getCS_StartStop_();
}

uci::type::DateTimeRangeType& CS_ActivityDetailType::getCS_StartStop() {
  return getCS_StartStop_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setCS_StartStop(const uci::type::DateTimeRangeType& accessor) {
  enableCS_StartStop();
  if (&accessor != cS_StartStop_Accessor.get()) {
    cS_StartStop_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_ActivityDetailType::hasCS_StartStop() const noexcept {
  return static_cast<bool>(cS_StartStop_Accessor);
}

uci::type::DateTimeRangeType& CS_ActivityDetailType::enableCS_StartStop(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!cS_StartStop_Accessor) || (cS_StartStop_Accessor->getAccessorType() != requestedType)) {
    cS_StartStop_Accessor = DateTimeRangeType::create(requestedType);
    if (!cS_StartStop_Accessor) {
      throw uci::base::UCIException("Error in enableCS_StartStop(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *cS_StartStop_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearCS_StartStop() noexcept {
  cS_StartStop_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioTypeValue CS_ActivityDetailType::getEIRP() const {
  if (eIRP_Accessor) {
    return *eIRP_Accessor;
  }
  throw uci::base::UCIException("Error in getEIRP(): An attempt was made to get an optional field that was not enabled, call hasEIRP() to determine if it is safe to call getEIRP()");
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setEIRP(uci::type::MilliwattPowerRatioTypeValue value) {
  eIRP_Accessor = value;
  return *this;
}

bool CS_ActivityDetailType::hasEIRP() const noexcept {
  return eIRP_Accessor.has_value();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearEIRP() noexcept {
  eIRP_Accessor.reset();
  return *this;
}

uci::type::IntPositiveTypeValue CS_ActivityDetailType::getSatNo() const {
  if (satNo_Accessor) {
    return *satNo_Accessor;
  }
  throw uci::base::UCIException("Error in getSatNo(): An attempt was made to get an optional field that was not enabled, call hasSatNo() to determine if it is safe to call getSatNo()");
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setSatNo(uci::type::IntPositiveTypeValue value) {
  satNo_Accessor = value;
  return *this;
}

bool CS_ActivityDetailType::hasSatNo() const noexcept {
  return satNo_Accessor.has_value();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearSatNo() noexcept {
  satNo_Accessor.reset();
  return *this;
}

xs::Boolean CS_ActivityDetailType::getSuccess() const {
  if (success_Accessor) {
    return *success_Accessor;
  }
  throw uci::base::UCIException("Error in getSuccess(): An attempt was made to get an optional field that was not enabled, call hasSuccess() to determine if it is safe to call getSuccess()");
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setSuccess(xs::Boolean value) {
  success_Accessor = value;
  return *this;
}

bool CS_ActivityDetailType::hasSuccess() const noexcept {
  return success_Accessor.has_value();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearSuccess() noexcept {
  success_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getContent_() const {
  if (content_Accessor) {
    return *content_Accessor;
  }
  throw uci::base::UCIException("Error in getContent(): An attempt was made to get an optional field that was not enabled, call hasContent() to determine if it is safe to call getContent()");
}

const uci::type::ForeignKeyType& CS_ActivityDetailType::getContent() const {
  return getContent_();
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getContent() {
  return getContent_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setContent(const uci::type::ForeignKeyType& accessor) {
  enableContent(accessor.getAccessorType());
  if (&accessor != content_Accessor.get()) {
    content_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_ActivityDetailType::hasContent() const noexcept {
  return static_cast<bool>(content_Accessor);
}

uci::type::ForeignKeyType& CS_ActivityDetailType::enableContent(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!content_Accessor) || (content_Accessor->getAccessorType() != requestedType)) {
    content_Accessor = ForeignKeyType::create(requestedType);
    if (!content_Accessor) {
      throw uci::base::UCIException("Error in enableContent(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *content_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearContent() noexcept {
  content_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getTactic_() const {
  if (tactic_Accessor) {
    return *tactic_Accessor;
  }
  throw uci::base::UCIException("Error in getTactic(): An attempt was made to get an optional field that was not enabled, call hasTactic() to determine if it is safe to call getTactic()");
}

const uci::type::ForeignKeyType& CS_ActivityDetailType::getTactic() const {
  return getTactic_();
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getTactic() {
  return getTactic_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setTactic(const uci::type::ForeignKeyType& accessor) {
  enableTactic(accessor.getAccessorType());
  if (&accessor != tactic_Accessor.get()) {
    tactic_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_ActivityDetailType::hasTactic() const noexcept {
  return static_cast<bool>(tactic_Accessor);
}

uci::type::ForeignKeyType& CS_ActivityDetailType::enableTactic(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!tactic_Accessor) || (tactic_Accessor->getAccessorType() != requestedType)) {
    tactic_Accessor = ForeignKeyType::create(requestedType);
    if (!tactic_Accessor) {
      throw uci::base::UCIException("Error in enableTactic(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *tactic_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearTactic() noexcept {
  tactic_Accessor.reset();
  return *this;
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getTechnique_() const {
  if (technique_Accessor) {
    return *technique_Accessor;
  }
  throw uci::base::UCIException("Error in getTechnique(): An attempt was made to get an optional field that was not enabled, call hasTechnique() to determine if it is safe to call getTechnique()");
}

const uci::type::ForeignKeyType& CS_ActivityDetailType::getTechnique() const {
  return getTechnique_();
}

uci::type::ForeignKeyType& CS_ActivityDetailType::getTechnique() {
  return getTechnique_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setTechnique(const uci::type::ForeignKeyType& accessor) {
  enableTechnique(accessor.getAccessorType());
  if (&accessor != technique_Accessor.get()) {
    technique_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CS_ActivityDetailType::hasTechnique() const noexcept {
  return static_cast<bool>(technique_Accessor);
}

uci::type::ForeignKeyType& CS_ActivityDetailType::enableTechnique(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!technique_Accessor) || (technique_Accessor->getAccessorType() != requestedType)) {
    technique_Accessor = ForeignKeyType::create(requestedType);
    if (!technique_Accessor) {
      throw uci::base::UCIException("Error in enableTechnique(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *technique_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearTechnique() noexcept {
  technique_Accessor.reset();
  return *this;
}

uci::type::FileLocationID_Type& CS_ActivityDetailType::getCommentsID_() const {
  if (commentsID_Accessor) {
    return *commentsID_Accessor;
  }
  throw uci::base::UCIException("Error in getCommentsID(): An attempt was made to get an optional field that was not enabled, call hasCommentsID() to determine if it is safe to call getCommentsID()");
}

const uci::type::FileLocationID_Type& CS_ActivityDetailType::getCommentsID() const {
  return getCommentsID_();
}

uci::type::FileLocationID_Type& CS_ActivityDetailType::getCommentsID() {
  return getCommentsID_();
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::setCommentsID(const uci::type::FileLocationID_Type& accessor) {
  enableCommentsID();
  if (&accessor != commentsID_Accessor.get()) {
    commentsID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CS_ActivityDetailType::hasCommentsID() const noexcept {
  return static_cast<bool>(commentsID_Accessor);
}

uci::type::FileLocationID_Type& CS_ActivityDetailType::enableCommentsID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!commentsID_Accessor) || (commentsID_Accessor->getAccessorType() != requestedType)) {
    commentsID_Accessor = FileLocationID_Type::create(requestedType);
    if (!commentsID_Accessor) {
      throw uci::base::UCIException("Error in enableCommentsID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *commentsID_Accessor;
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::clearCommentsID() noexcept {
  commentsID_Accessor.reset();
  return *this;
}

std::unique_ptr<CS_ActivityDetailType> CS_ActivityDetailType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::cS_ActivityDetailType : type};
  return std::unique_ptr<CS_ActivityDetailType>(dynamic_cast<CS_ActivityDetailType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CS_ActivityDetailType_Names {

constexpr const char* Extern_Type_Name{"CS_ActivityDetailType"};
constexpr const char* SENO_Name{"SENO"};
constexpr const char* Signal_Name{"Signal"};
constexpr const char* ForceName_Name{"ForceName"};
constexpr const char* CS_StartStop_Name{"CS_StartStop"};
constexpr const char* EIRP_Name{"EIRP"};
constexpr const char* SatNo_Name{"SatNo"};
constexpr const char* Success_Name{"Success"};
constexpr const char* Content_Name{"Content"};
constexpr const char* Tactic_Name{"Tactic"};
constexpr const char* Technique_Name{"Technique"};
constexpr const char* CommentsID_Name{"CommentsID"};

} // namespace CS_ActivityDetailType_Names

void CS_ActivityDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_ActivityDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_ActivityDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::SENO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSENO(*value);
      }
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::Signal_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSignal(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::ForceName_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableForceName(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::CS_StartStop_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableCS_StartStop(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::EIRP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEIRP(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::SatNo_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSatNo(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::Success_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSuccess(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::Content_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableContent(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::Tactic_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableTactic(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::Technique_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableTechnique(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_ActivityDetailType_Names::CommentsID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.enableCommentsID(), nodeName, nsPrefix);
    }
  }
}

std::string CS_ActivityDetailType::serialize(const uci::type::CS_ActivityDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CS_ActivityDetailType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::cS_ActivityDetailType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CS_ActivityDetailType_Names::Extern_Type_Name);
    }
    if (accessor.hasSENO()) {
      asb_uci::util::SerializationHelpers::serializeString(accessor.getSENO(), node, CS_ActivityDetailType_Names::SENO_Name);
    }
    if (accessor.hasSignal()) {
      ForeignKeyType::serialize(accessor.getSignal(), node, CS_ActivityDetailType_Names::Signal_Name);
    }
    if (accessor.hasForceName()) {
      ForeignKeyType::serialize(accessor.getForceName(), node, CS_ActivityDetailType_Names::ForceName_Name);
    }
    if (accessor.hasCS_StartStop()) {
      DateTimeRangeType::serialize(accessor.getCS_StartStop(), node, CS_ActivityDetailType_Names::CS_StartStop_Name);
    }
    if (accessor.hasEIRP()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEIRP(), node, CS_ActivityDetailType_Names::EIRP_Name);
    }
    if (accessor.hasSatNo()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getSatNo(), node, CS_ActivityDetailType_Names::SatNo_Name);
    }
    if (accessor.hasSuccess()) {
      asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getSuccess(), node, CS_ActivityDetailType_Names::Success_Name);
    }
    if (accessor.hasContent()) {
      ForeignKeyType::serialize(accessor.getContent(), node, CS_ActivityDetailType_Names::Content_Name);
    }
    if (accessor.hasTactic()) {
      ForeignKeyType::serialize(accessor.getTactic(), node, CS_ActivityDetailType_Names::Tactic_Name);
    }
    if (accessor.hasTechnique()) {
      ForeignKeyType::serialize(accessor.getTechnique(), node, CS_ActivityDetailType_Names::Technique_Name);
    }
    if (accessor.hasCommentsID()) {
      FileLocationID_Type::serialize(accessor.getCommentsID(), node, CS_ActivityDetailType_Names::CommentsID_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CS_ActivityDetailType>().release());
}

uci::type::CS_ActivityDetailType& CS_ActivityDetailType::create(const uci::type::CS_ActivityDetailType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CS_ActivityDetailType> newAccessor{boost::make_unique<asb_uci::type::CS_ActivityDetailType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CS_ActivityDetailType::destroy(uci::type::CS_ActivityDetailType& accessor) {
  delete dynamic_cast<asb_uci::type::CS_ActivityDetailType*>(&accessor);
}

} // namespace type

} // namespace uci

