/** @file TLE_BaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/TLE_BaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/COE_OrbitBaseType.h"
#include "asb_uci/type/COE_PositionType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/COE_PositionType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/TLE_BaseType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

TLE_BaseType::TLE_BaseType()
  : position_Accessor{boost::make_unique<COE_PositionType>()} {
}

TLE_BaseType::~TLE_BaseType() = default;

void TLE_BaseType::copy(const uci::type::TLE_BaseType& accessor) {
  copyImpl(accessor, false);
}

void TLE_BaseType::copyImpl(const uci::type::TLE_BaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::tLE_BaseType)) {
      COE_OrbitBaseType::copyImpl(accessor, false);
      const auto& accessorImpl = dynamic_cast<const TLE_BaseType&>(accessor);
      setEpoch(accessorImpl.epoch_Accessor);
      if (accessorImpl.hasElementSetNumber()) {
        setElementSetNumber(accessorImpl.getElementSetNumber());
      } else {
        clearElementSetNumber();
      }
      if (accessorImpl.hasFirstTimeDerivativeOfMeanMotion()) {
        setFirstTimeDerivativeOfMeanMotion(accessorImpl.getFirstTimeDerivativeOfMeanMotion());
      } else {
        clearFirstTimeDerivativeOfMeanMotion();
      }
      if (accessorImpl.hasSecondTimeDerivativeOfMeanMotion()) {
        setSecondTimeDerivativeOfMeanMotion(accessorImpl.getSecondTimeDerivativeOfMeanMotion());
      } else {
        clearSecondTimeDerivativeOfMeanMotion();
      }
      if (accessorImpl.hasBSTAR_Drag()) {
        setBSTAR_Drag(accessorImpl.getBSTAR_Drag());
      } else {
        clearBSTAR_Drag();
      }
      setPosition(*(accessorImpl.position_Accessor));
      setMeanMotion(accessorImpl.meanMotion_Accessor);
      if (accessorImpl.hasRevolutionNumber()) {
        setRevolutionNumber(accessorImpl.getRevolutionNumber());
      } else {
        clearRevolutionNumber();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void TLE_BaseType::reset() noexcept {
  COE_OrbitBaseType::reset();
  epoch_Accessor = 0;
  clearElementSetNumber();
  clearFirstTimeDerivativeOfMeanMotion();
  clearSecondTimeDerivativeOfMeanMotion();
  clearBSTAR_Drag();
  position_Accessor->reset();
  meanMotion_Accessor = 0.0;
  clearRevolutionNumber();
}

uci::type::DateTimeTypeValue TLE_BaseType::getEpoch() const {
  return epoch_Accessor;
}

uci::type::TLE_BaseType& TLE_BaseType::setEpoch(uci::type::DateTimeTypeValue value) {
  epoch_Accessor = value;
  return *this;
}


xs::UnsignedShort TLE_BaseType::getElementSetNumber() const {
  if (elementSetNumber_Accessor) {
    return *elementSetNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getElementSetNumber(): An attempt was made to get an optional field that was not enabled, call hasElementSetNumber() to determine if it is safe to call getElementSetNumber()");
}

uci::type::TLE_BaseType& TLE_BaseType::setElementSetNumber(xs::UnsignedShort value) {
  elementSetNumber_Accessor = value;
  return *this;
}

bool TLE_BaseType::hasElementSetNumber() const noexcept {
  return elementSetNumber_Accessor.has_value();
}

uci::type::TLE_BaseType& TLE_BaseType::clearElementSetNumber() noexcept {
  elementSetNumber_Accessor.reset();
  return *this;
}

xs::Double TLE_BaseType::getFirstTimeDerivativeOfMeanMotion() const {
  if (firstTimeDerivativeOfMeanMotion_Accessor) {
    return *firstTimeDerivativeOfMeanMotion_Accessor;
  }
  throw uci::base::UCIException("Error in getFirstTimeDerivativeOfMeanMotion(): An attempt was made to get an optional field that was not enabled, call hasFirstTimeDerivativeOfMeanMotion() to determine if it is safe to call getFirstTimeDerivativeOfMeanMotion()");
}

uci::type::TLE_BaseType& TLE_BaseType::setFirstTimeDerivativeOfMeanMotion(xs::Double value) {
  firstTimeDerivativeOfMeanMotion_Accessor = value;
  return *this;
}

bool TLE_BaseType::hasFirstTimeDerivativeOfMeanMotion() const noexcept {
  return firstTimeDerivativeOfMeanMotion_Accessor.has_value();
}

uci::type::TLE_BaseType& TLE_BaseType::clearFirstTimeDerivativeOfMeanMotion() noexcept {
  firstTimeDerivativeOfMeanMotion_Accessor.reset();
  return *this;
}

xs::Double TLE_BaseType::getSecondTimeDerivativeOfMeanMotion() const {
  if (secondTimeDerivativeOfMeanMotion_Accessor) {
    return *secondTimeDerivativeOfMeanMotion_Accessor;
  }
  throw uci::base::UCIException("Error in getSecondTimeDerivativeOfMeanMotion(): An attempt was made to get an optional field that was not enabled, call hasSecondTimeDerivativeOfMeanMotion() to determine if it is safe to call getSecondTimeDerivativeOfMeanMotion()");
}

uci::type::TLE_BaseType& TLE_BaseType::setSecondTimeDerivativeOfMeanMotion(xs::Double value) {
  secondTimeDerivativeOfMeanMotion_Accessor = value;
  return *this;
}

bool TLE_BaseType::hasSecondTimeDerivativeOfMeanMotion() const noexcept {
  return secondTimeDerivativeOfMeanMotion_Accessor.has_value();
}

uci::type::TLE_BaseType& TLE_BaseType::clearSecondTimeDerivativeOfMeanMotion() noexcept {
  secondTimeDerivativeOfMeanMotion_Accessor.reset();
  return *this;
}

xs::Double TLE_BaseType::getBSTAR_Drag() const {
  if (bSTAR_Drag_Accessor) {
    return *bSTAR_Drag_Accessor;
  }
  throw uci::base::UCIException("Error in getBSTAR_Drag(): An attempt was made to get an optional field that was not enabled, call hasBSTAR_Drag() to determine if it is safe to call getBSTAR_Drag()");
}

uci::type::TLE_BaseType& TLE_BaseType::setBSTAR_Drag(xs::Double value) {
  bSTAR_Drag_Accessor = value;
  return *this;
}

bool TLE_BaseType::hasBSTAR_Drag() const noexcept {
  return bSTAR_Drag_Accessor.has_value();
}

uci::type::TLE_BaseType& TLE_BaseType::clearBSTAR_Drag() noexcept {
  bSTAR_Drag_Accessor.reset();
  return *this;
}

const uci::type::COE_PositionType& TLE_BaseType::getPosition() const {
  return *position_Accessor;
}

uci::type::COE_PositionType& TLE_BaseType::getPosition() {
  return *position_Accessor;
}

uci::type::TLE_BaseType& TLE_BaseType::setPosition(const uci::type::COE_PositionType& accessor) {
  if (&accessor != position_Accessor.get()) {
    position_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::Double TLE_BaseType::getMeanMotion() const {
  return meanMotion_Accessor;
}

uci::type::TLE_BaseType& TLE_BaseType::setMeanMotion(xs::Double value) {
  meanMotion_Accessor = value;
  return *this;
}


xs::UnsignedInt TLE_BaseType::getRevolutionNumber() const {
  if (revolutionNumber_Accessor) {
    return *revolutionNumber_Accessor;
  }
  throw uci::base::UCIException("Error in getRevolutionNumber(): An attempt was made to get an optional field that was not enabled, call hasRevolutionNumber() to determine if it is safe to call getRevolutionNumber()");
}

uci::type::TLE_BaseType& TLE_BaseType::setRevolutionNumber(xs::UnsignedInt value) {
  revolutionNumber_Accessor = value;
  return *this;
}

bool TLE_BaseType::hasRevolutionNumber() const noexcept {
  return revolutionNumber_Accessor.has_value();
}

uci::type::TLE_BaseType& TLE_BaseType::clearRevolutionNumber() noexcept {
  revolutionNumber_Accessor.reset();
  return *this;
}

std::unique_ptr<TLE_BaseType> TLE_BaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::tLE_BaseType : type};
  return std::unique_ptr<TLE_BaseType>(dynamic_cast<TLE_BaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace TLE_BaseType_Names {

constexpr const char* Extern_Type_Name{"TLE_BaseType"};
constexpr const char* Epoch_Name{"Epoch"};
constexpr const char* ElementSetNumber_Name{"ElementSetNumber"};
constexpr const char* FirstTimeDerivativeOfMeanMotion_Name{"FirstTimeDerivativeOfMeanMotion"};
constexpr const char* SecondTimeDerivativeOfMeanMotion_Name{"SecondTimeDerivativeOfMeanMotion"};
constexpr const char* BSTAR_Drag_Name{"BSTAR_Drag"};
constexpr const char* Position_Name{"Position"};
constexpr const char* MeanMotion_Name{"MeanMotion"};
constexpr const char* RevolutionNumber_Name{"RevolutionNumber"};

} // namespace TLE_BaseType_Names

void TLE_BaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TLE_BaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TLE_BaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::Epoch_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEpoch(asb_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::ElementSetNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElementSetNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::FirstTimeDerivativeOfMeanMotion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFirstTimeDerivativeOfMeanMotion(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::SecondTimeDerivativeOfMeanMotion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSecondTimeDerivativeOfMeanMotion(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::BSTAR_Drag_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBSTAR_Drag(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::Position_Name) {
      COE_PositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::MeanMotion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMeanMotion(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + TLE_BaseType_Names::RevolutionNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRevolutionNumber(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
  COE_OrbitBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string TLE_BaseType::serialize(const uci::type::TLE_BaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? TLE_BaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::tLE_BaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, TLE_BaseType_Names::Extern_Type_Name);
    }
    COE_OrbitBaseType::serialize(accessor, node, "", false, false, false);
    asb_uci::util::SerializationHelpers::serializeDateTime(accessor.getEpoch(), node, TLE_BaseType_Names::Epoch_Name);
    if (accessor.hasElementSetNumber()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getElementSetNumber(), node, TLE_BaseType_Names::ElementSetNumber_Name);
    }
    if (accessor.hasFirstTimeDerivativeOfMeanMotion()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getFirstTimeDerivativeOfMeanMotion(), node, TLE_BaseType_Names::FirstTimeDerivativeOfMeanMotion_Name);
    }
    if (accessor.hasSecondTimeDerivativeOfMeanMotion()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getSecondTimeDerivativeOfMeanMotion(), node, TLE_BaseType_Names::SecondTimeDerivativeOfMeanMotion_Name);
    }
    if (accessor.hasBSTAR_Drag()) {
      asb_uci::util::SerializationHelpers::serializeDouble(accessor.getBSTAR_Drag(), node, TLE_BaseType_Names::BSTAR_Drag_Name);
    }
    COE_PositionType::serialize(accessor.getPosition(), node, TLE_BaseType_Names::Position_Name);
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMeanMotion(), node, TLE_BaseType_Names::MeanMotion_Name);
    if (accessor.hasRevolutionNumber()) {
      asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getRevolutionNumber(), node, TLE_BaseType_Names::RevolutionNumber_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::TLE_BaseType& TLE_BaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::TLE_BaseType>().release());
}

uci::type::TLE_BaseType& TLE_BaseType::create(const uci::type::TLE_BaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::TLE_BaseType> newAccessor{boost::make_unique<asb_uci::type::TLE_BaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void TLE_BaseType::destroy(uci::type::TLE_BaseType& accessor) {
  delete dynamic_cast<asb_uci::type::TLE_BaseType*>(&accessor);
}

} // namespace type

} // namespace uci

