/** @file PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComponentControlsB_Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComponentControlsB_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType() = default;

PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::~PO_ComponentSettingsFocalPlaneArrayPixelAggregationType() = default;

void PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::copy(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::copyImpl(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentSettingsFocalPlaneArrayPixelAggregationType&>(accessor);
    aggregationSetting_Accessor = (accessorImpl.aggregationSetting_Accessor ? accessorImpl.aggregationSetting_Accessor : boost::none);
    if (accessorImpl.aggregationControls_Accessor) {
      setAggregationControls(*(accessorImpl.aggregationControls_Accessor));
    } else {
      aggregationControls_Accessor.reset();
    }
  }
}

void PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::reset() noexcept {
  aggregationSetting_Accessor.reset();
  aggregationControls_Accessor.reset();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::PO_ComponentSettingsFocalPlaneArrayPixelAggregationTypeChoice PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::getPO_ComponentSettingsFocalPlaneArrayPixelAggregationTypeChoiceOrdinal() const noexcept {
  if (aggregationSetting_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELAGGREGATIONTYPE_CHOICE_AGGREGATIONSETTING;
  }
  if (aggregationControls_Accessor) {
    return PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELAGGREGATIONTYPE_CHOICE_AGGREGATIONCONTROLS;
  }
  return PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELAGGREGATIONTYPE_CHOICE_NONE;
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::setPO_ComponentSettingsFocalPlaneArrayPixelAggregationTypeChoiceOrdinal(uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::PO_ComponentSettingsFocalPlaneArrayPixelAggregationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELAGGREGATIONTYPE_CHOICE_AGGREGATIONSETTING:
      chooseAggregationSetting();
      break;
    case PO_COMPONENTSETTINGSFOCALPLANEARRAYPIXELAGGREGATIONTYPE_CHOICE_AGGREGATIONCONTROLS:
      chooseAggregationControls("setPO_ComponentSettingsFocalPlaneArrayPixelAggregationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setPO_ComponentSettingsFocalPlaneArrayPixelAggregationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

xs::UnsignedInt PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::getAggregationSetting() const {
  if (aggregationSetting_Accessor) {
    return *aggregationSetting_Accessor;
  }
  throw uci::base::UCIException("Error in getAggregationSetting(): Unable to get AggregationSetting, field not selected");
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::setAggregationSetting(xs::UnsignedInt value) {
  chooseAggregationSetting();
  aggregationSetting_Accessor = value;
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::isAggregationSetting() const noexcept {
  return static_cast<bool>(aggregationSetting_Accessor);
}

void PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::chooseAggregationSetting() {
  aggregationControls_Accessor.reset();
  if (!aggregationSetting_Accessor) {
    aggregationSetting_Accessor = boost::optional<asb_xs::UnsignedInt>();
  }
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::getAggregationControls_() const {
  if (aggregationControls_Accessor) {
    return *aggregationControls_Accessor;
  }
  throw uci::base::UCIException("Error in getAggregationControls(): Unable to get AggregationControls, field not selected");
}

const uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::getAggregationControls() const {
  return getAggregationControls_();
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::getAggregationControls() {
  return getAggregationControls_();
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::setAggregationControls(const uci::type::ComponentControlsB_Type& accessor) {
  chooseAggregationControls();
  if (&accessor != aggregationControls_Accessor.get()) {
    aggregationControls_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::isAggregationControls() const noexcept {
  return static_cast<bool>(aggregationControls_Accessor);
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::chooseAggregationControls(const std::string& method, uci::base::accessorType::AccessorType type) {
  aggregationSetting_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::componentControlsB_Type : type};
  if ((!aggregationControls_Accessor) || (aggregationControls_Accessor->getAccessorType() != requestedType)) {
    aggregationControls_Accessor = ComponentControlsB_Type::create(type);
    if (!aggregationControls_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *aggregationControls_Accessor;
}

uci::type::ComponentControlsB_Type& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::chooseAggregationControls(uci::base::accessorType::AccessorType type) {
  return chooseAggregationControls("chooseAggregationControls", type);
}

std::unique_ptr<PO_ComponentSettingsFocalPlaneArrayPixelAggregationType> PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelAggregationType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelAggregationType) ? boost::make_unique<PO_ComponentSettingsFocalPlaneArrayPixelAggregationType>() : nullptr;
}

/**  */
namespace PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsFocalPlaneArrayPixelAggregationType"};
constexpr const char* AggregationSetting_Name{"AggregationSetting"};
constexpr const char* AggregationControls_Name{"AggregationControls"};

} // namespace PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names

void PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::AggregationSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAggregationSetting(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::AggregationControls_Name) {
      ComponentControlsB_Type::deserialize(valueType.second, accessor.chooseAggregationControls(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::serialize(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::Extern_Type_Name);
  }
  if (accessor.isAggregationSetting()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAggregationSetting(), node, PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::AggregationSetting_Name);
  } else if (accessor.isAggregationControls()) {
    ComponentControlsB_Type::serialize(accessor.getAggregationControls(), node, PO_ComponentSettingsFocalPlaneArrayPixelAggregationType_Names::AggregationControls_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType>().release());
}

uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::create(const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::destroy(uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType*>(&accessor);
}

} // namespace type

} // namespace uci

