/** @file ReferenceFrameOriginChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ReferenceFrameOriginChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/ReferenceFrameObjectToFollowType.h"
#include "asb_uci/type/ReferenceFrameOriginKinematicsType.h"
#include "asb_uci/type/ReferenceFrameOriginType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/ReferenceFrameObjectToFollowType.h"
#include "uci/type/ReferenceFrameOriginChoiceType.h"
#include "uci/type/ReferenceFrameOriginKinematicsType.h"
#include "uci/type/ReferenceFrameOriginType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ReferenceFrameOriginChoiceType::ReferenceFrameOriginChoiceType() = default;

ReferenceFrameOriginChoiceType::~ReferenceFrameOriginChoiceType() = default;

void ReferenceFrameOriginChoiceType::copy(const uci::type::ReferenceFrameOriginChoiceType& accessor) {
  copyImpl(accessor, false);
}

void ReferenceFrameOriginChoiceType::copyImpl(const uci::type::ReferenceFrameOriginChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ReferenceFrameOriginChoiceType&>(accessor);
    if (accessorImpl.alternateSource_Accessor) {
      setAlternateSource(*(accessorImpl.alternateSource_Accessor));
    } else {
      alternateSource_Accessor.reset();
    }
    if (accessorImpl.objectToFollowIdentifier_Accessor) {
      setObjectToFollowIdentifier(*(accessorImpl.objectToFollowIdentifier_Accessor));
    } else {
      objectToFollowIdentifier_Accessor.reset();
    }
    if (accessorImpl.geospatialPosition_Accessor) {
      setGeospatialPosition(*(accessorImpl.geospatialPosition_Accessor));
    } else {
      geospatialPosition_Accessor.reset();
    }
    if (accessorImpl.kinematicsReferenceFrameOrigin_Accessor) {
      setKinematicsReferenceFrameOrigin(*(accessorImpl.kinematicsReferenceFrameOrigin_Accessor));
    } else {
      kinematicsReferenceFrameOrigin_Accessor.reset();
    }
  }
}

void ReferenceFrameOriginChoiceType::reset() noexcept {
  alternateSource_Accessor.reset();
  objectToFollowIdentifier_Accessor.reset();
  geospatialPosition_Accessor.reset();
  kinematicsReferenceFrameOrigin_Accessor.reset();
}

uci::type::ReferenceFrameOriginChoiceType::ReferenceFrameOriginChoiceTypeChoice ReferenceFrameOriginChoiceType::getReferenceFrameOriginChoiceTypeChoiceOrdinal() const noexcept {
  if (alternateSource_Accessor) {
    return REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_ALTERNATESOURCE;
  }
  if (objectToFollowIdentifier_Accessor) {
    return REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_OBJECTTOFOLLOWIDENTIFIER;
  }
  if (geospatialPosition_Accessor) {
    return REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_GEOSPATIALPOSITION;
  }
  if (kinematicsReferenceFrameOrigin_Accessor) {
    return REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_KINEMATICSREFERENCEFRAMEORIGIN;
  }
  return REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_NONE;
}

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::setReferenceFrameOriginChoiceTypeChoiceOrdinal(uci::type::ReferenceFrameOriginChoiceType::ReferenceFrameOriginChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_ALTERNATESOURCE:
      chooseAlternateSource("setReferenceFrameOriginChoiceTypeChoiceOrdinal", type);
      break;
    case REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_OBJECTTOFOLLOWIDENTIFIER:
      chooseObjectToFollowIdentifier("setReferenceFrameOriginChoiceTypeChoiceOrdinal", type);
      break;
    case REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_GEOSPATIALPOSITION:
      chooseGeospatialPosition("setReferenceFrameOriginChoiceTypeChoiceOrdinal", type);
      break;
    case REFERENCEFRAMEORIGINCHOICETYPE_CHOICE_KINEMATICSREFERENCEFRAMEORIGIN:
      chooseKinematicsReferenceFrameOrigin("setReferenceFrameOriginChoiceTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setReferenceFrameOriginChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ForeignKeyType& ReferenceFrameOriginChoiceType::getAlternateSource_() const {
  if (alternateSource_Accessor) {
    return *alternateSource_Accessor;
  }
  throw uci::base::UCIException("Error in getAlternateSource(): Unable to get AlternateSource, field not selected");
}

const uci::type::ForeignKeyType& ReferenceFrameOriginChoiceType::getAlternateSource() const {
  return getAlternateSource_();
}

uci::type::ForeignKeyType& ReferenceFrameOriginChoiceType::getAlternateSource() {
  return getAlternateSource_();
}

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::setAlternateSource(const uci::type::ForeignKeyType& accessor) {
  chooseAlternateSource("setAlternateSource", accessor.getAccessorType());
  if (&accessor != alternateSource_Accessor.get()) {
    alternateSource_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool ReferenceFrameOriginChoiceType::isAlternateSource() const noexcept {
  return static_cast<bool>(alternateSource_Accessor);
}

uci::type::ForeignKeyType& ReferenceFrameOriginChoiceType::chooseAlternateSource(const std::string& method, uci::base::accessorType::AccessorType type) {
  objectToFollowIdentifier_Accessor.reset();
  geospatialPosition_Accessor.reset();
  kinematicsReferenceFrameOrigin_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!alternateSource_Accessor) || (alternateSource_Accessor->getAccessorType() != requestedType)) {
    alternateSource_Accessor = ForeignKeyType::create(type);
    if (!alternateSource_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *alternateSource_Accessor;
}

uci::type::ForeignKeyType& ReferenceFrameOriginChoiceType::chooseAlternateSource(uci::base::accessorType::AccessorType type) {
  return chooseAlternateSource("chooseAlternateSource", type);
}

uci::type::ReferenceFrameObjectToFollowType& ReferenceFrameOriginChoiceType::getObjectToFollowIdentifier_() const {
  if (objectToFollowIdentifier_Accessor) {
    return *objectToFollowIdentifier_Accessor;
  }
  throw uci::base::UCIException("Error in getObjectToFollowIdentifier(): Unable to get ObjectToFollowIdentifier, field not selected");
}

const uci::type::ReferenceFrameObjectToFollowType& ReferenceFrameOriginChoiceType::getObjectToFollowIdentifier() const {
  return getObjectToFollowIdentifier_();
}

uci::type::ReferenceFrameObjectToFollowType& ReferenceFrameOriginChoiceType::getObjectToFollowIdentifier() {
  return getObjectToFollowIdentifier_();
}

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::setObjectToFollowIdentifier(const uci::type::ReferenceFrameObjectToFollowType& accessor) {
  chooseObjectToFollowIdentifier(accessor.getAccessorType());
  if (&accessor != objectToFollowIdentifier_Accessor.get()) {
    objectToFollowIdentifier_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReferenceFrameOriginChoiceType::isObjectToFollowIdentifier() const noexcept {
  return static_cast<bool>(objectToFollowIdentifier_Accessor);
}

uci::type::ReferenceFrameObjectToFollowType& ReferenceFrameOriginChoiceType::chooseObjectToFollowIdentifier(const std::string& method, uci::base::accessorType::AccessorType type) {
  alternateSource_Accessor.reset();
  geospatialPosition_Accessor.reset();
  kinematicsReferenceFrameOrigin_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceFrameObjectToFollowType : type};
  if ((!objectToFollowIdentifier_Accessor) || (objectToFollowIdentifier_Accessor->getAccessorType() != requestedType)) {
    objectToFollowIdentifier_Accessor = ReferenceFrameObjectToFollowType::create(type);
    if (!objectToFollowIdentifier_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objectToFollowIdentifier_Accessor;
}

uci::type::ReferenceFrameObjectToFollowType& ReferenceFrameOriginChoiceType::chooseObjectToFollowIdentifier(uci::base::accessorType::AccessorType type) {
  return chooseObjectToFollowIdentifier("chooseObjectToFollowIdentifier", type);
}

uci::type::ReferenceFrameOriginType& ReferenceFrameOriginChoiceType::getGeospatialPosition_() const {
  if (geospatialPosition_Accessor) {
    return *geospatialPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getGeospatialPosition(): Unable to get GeospatialPosition, field not selected");
}

const uci::type::ReferenceFrameOriginType& ReferenceFrameOriginChoiceType::getGeospatialPosition() const {
  return getGeospatialPosition_();
}

uci::type::ReferenceFrameOriginType& ReferenceFrameOriginChoiceType::getGeospatialPosition() {
  return getGeospatialPosition_();
}

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::setGeospatialPosition(const uci::type::ReferenceFrameOriginType& accessor) {
  chooseGeospatialPosition();
  if (&accessor != geospatialPosition_Accessor.get()) {
    geospatialPosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReferenceFrameOriginChoiceType::isGeospatialPosition() const noexcept {
  return static_cast<bool>(geospatialPosition_Accessor);
}

uci::type::ReferenceFrameOriginType& ReferenceFrameOriginChoiceType::chooseGeospatialPosition(const std::string& method, uci::base::accessorType::AccessorType type) {
  alternateSource_Accessor.reset();
  objectToFollowIdentifier_Accessor.reset();
  kinematicsReferenceFrameOrigin_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceFrameOriginType : type};
  if ((!geospatialPosition_Accessor) || (geospatialPosition_Accessor->getAccessorType() != requestedType)) {
    geospatialPosition_Accessor = ReferenceFrameOriginType::create(type);
    if (!geospatialPosition_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *geospatialPosition_Accessor;
}

uci::type::ReferenceFrameOriginType& ReferenceFrameOriginChoiceType::chooseGeospatialPosition(uci::base::accessorType::AccessorType type) {
  return chooseGeospatialPosition("chooseGeospatialPosition", type);
}

uci::type::ReferenceFrameOriginKinematicsType& ReferenceFrameOriginChoiceType::getKinematicsReferenceFrameOrigin_() const {
  if (kinematicsReferenceFrameOrigin_Accessor) {
    return *kinematicsReferenceFrameOrigin_Accessor;
  }
  throw uci::base::UCIException("Error in getKinematicsReferenceFrameOrigin(): Unable to get KinematicsReferenceFrameOrigin, field not selected");
}

const uci::type::ReferenceFrameOriginKinematicsType& ReferenceFrameOriginChoiceType::getKinematicsReferenceFrameOrigin() const {
  return getKinematicsReferenceFrameOrigin_();
}

uci::type::ReferenceFrameOriginKinematicsType& ReferenceFrameOriginChoiceType::getKinematicsReferenceFrameOrigin() {
  return getKinematicsReferenceFrameOrigin_();
}

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::setKinematicsReferenceFrameOrigin(const uci::type::ReferenceFrameOriginKinematicsType& accessor) {
  chooseKinematicsReferenceFrameOrigin();
  if (&accessor != kinematicsReferenceFrameOrigin_Accessor.get()) {
    kinematicsReferenceFrameOrigin_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ReferenceFrameOriginChoiceType::isKinematicsReferenceFrameOrigin() const noexcept {
  return static_cast<bool>(kinematicsReferenceFrameOrigin_Accessor);
}

uci::type::ReferenceFrameOriginKinematicsType& ReferenceFrameOriginChoiceType::chooseKinematicsReferenceFrameOrigin(const std::string& method, uci::base::accessorType::AccessorType type) {
  alternateSource_Accessor.reset();
  objectToFollowIdentifier_Accessor.reset();
  geospatialPosition_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceFrameOriginKinematicsType : type};
  if ((!kinematicsReferenceFrameOrigin_Accessor) || (kinematicsReferenceFrameOrigin_Accessor->getAccessorType() != requestedType)) {
    kinematicsReferenceFrameOrigin_Accessor = ReferenceFrameOriginKinematicsType::create(type);
    if (!kinematicsReferenceFrameOrigin_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *kinematicsReferenceFrameOrigin_Accessor;
}

uci::type::ReferenceFrameOriginKinematicsType& ReferenceFrameOriginChoiceType::chooseKinematicsReferenceFrameOrigin(uci::base::accessorType::AccessorType type) {
  return chooseKinematicsReferenceFrameOrigin("chooseKinematicsReferenceFrameOrigin", type);
}

std::unique_ptr<ReferenceFrameOriginChoiceType> ReferenceFrameOriginChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::referenceFrameOriginChoiceType : type};
  return (requestedType == uci::type::accessorType::referenceFrameOriginChoiceType) ? boost::make_unique<ReferenceFrameOriginChoiceType>() : nullptr;
}

/**  */
namespace ReferenceFrameOriginChoiceType_Names {

constexpr const char* Extern_Type_Name{"ReferenceFrameOriginChoiceType"};
constexpr const char* AlternateSource_Name{"AlternateSource"};
constexpr const char* ObjectToFollowIdentifier_Name{"ObjectToFollowIdentifier"};
constexpr const char* GeospatialPosition_Name{"GeospatialPosition"};
constexpr const char* KinematicsReferenceFrameOrigin_Name{"KinematicsReferenceFrameOrigin"};

} // namespace ReferenceFrameOriginChoiceType_Names

void ReferenceFrameOriginChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ReferenceFrameOriginChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ReferenceFrameOriginChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ReferenceFrameOriginChoiceType_Names::AlternateSource_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAlternateSource(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReferenceFrameOriginChoiceType_Names::ObjectToFollowIdentifier_Name) {
      ReferenceFrameObjectToFollowType::deserialize(valueType.second, accessor.chooseObjectToFollowIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReferenceFrameOriginChoiceType_Names::GeospatialPosition_Name) {
      ReferenceFrameOriginType::deserialize(valueType.second, accessor.chooseGeospatialPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ReferenceFrameOriginChoiceType_Names::KinematicsReferenceFrameOrigin_Name) {
      ReferenceFrameOriginKinematicsType::deserialize(valueType.second, accessor.chooseKinematicsReferenceFrameOrigin(), nodeName, nsPrefix);
    }
  }
}

std::string ReferenceFrameOriginChoiceType::serialize(const uci::type::ReferenceFrameOriginChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ReferenceFrameOriginChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ReferenceFrameOriginChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isAlternateSource()) {
    ForeignKeyType::serialize(accessor.getAlternateSource(), node, ReferenceFrameOriginChoiceType_Names::AlternateSource_Name);
  } else if (accessor.isObjectToFollowIdentifier()) {
    ReferenceFrameObjectToFollowType::serialize(accessor.getObjectToFollowIdentifier(), node, ReferenceFrameOriginChoiceType_Names::ObjectToFollowIdentifier_Name);
  } else if (accessor.isGeospatialPosition()) {
    ReferenceFrameOriginType::serialize(accessor.getGeospatialPosition(), node, ReferenceFrameOriginChoiceType_Names::GeospatialPosition_Name);
  } else if (accessor.isKinematicsReferenceFrameOrigin()) {
    ReferenceFrameOriginKinematicsType::serialize(accessor.getKinematicsReferenceFrameOrigin(), node, ReferenceFrameOriginChoiceType_Names::KinematicsReferenceFrameOrigin_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ReferenceFrameOriginChoiceType>().release());
}

uci::type::ReferenceFrameOriginChoiceType& ReferenceFrameOriginChoiceType::create(const uci::type::ReferenceFrameOriginChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ReferenceFrameOriginChoiceType> newAccessor{boost::make_unique<asb_uci::type::ReferenceFrameOriginChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ReferenceFrameOriginChoiceType::destroy(uci::type::ReferenceFrameOriginChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::ReferenceFrameOriginChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

