/** @file QueryStepType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/QueryStepType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/EmptyType.h"
#include "asb_uci/type/NamedElementType.h"
#include "asb_uci/type/WildcardElementType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/NamedElementType.h"
#include "uci/type/QueryStepType.h"
#include "uci/type/WildcardElementType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

QueryStepType::QueryStepType() = default;

QueryStepType::~QueryStepType() = default;

void QueryStepType::copy(const uci::type::QueryStepType& accessor) {
  copyImpl(accessor, false);
}

void QueryStepType::copyImpl(const uci::type::QueryStepType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const QueryStepType&>(accessor);
    if (accessorImpl.element_Accessor) {
      setElement(*(accessorImpl.element_Accessor));
    } else {
      element_Accessor.reset();
    }
    if (accessorImpl.root_Accessor) {
      setRoot(*(accessorImpl.root_Accessor));
    } else {
      root_Accessor.reset();
    }
    if (accessorImpl.ancestor_Accessor) {
      setAncestor(*(accessorImpl.ancestor_Accessor));
    } else {
      ancestor_Accessor.reset();
    }
    if (accessorImpl.descendant_Accessor) {
      setDescendant(*(accessorImpl.descendant_Accessor));
    } else {
      descendant_Accessor.reset();
    }
    if (accessorImpl.parent_Accessor) {
      setParent(*(accessorImpl.parent_Accessor));
    } else {
      parent_Accessor.reset();
    }
    if (accessorImpl.child_Accessor) {
      setChild(*(accessorImpl.child_Accessor));
    } else {
      child_Accessor.reset();
    }
  }
}

void QueryStepType::reset() noexcept {
  element_Accessor.reset();
  root_Accessor.reset();
  ancestor_Accessor.reset();
  descendant_Accessor.reset();
  parent_Accessor.reset();
  child_Accessor.reset();
}

uci::type::QueryStepType::QueryStepTypeChoice QueryStepType::getQueryStepTypeChoiceOrdinal() const noexcept {
  if (element_Accessor) {
    return QUERYSTEPTYPE_CHOICE_ELEMENT;
  }
  if (root_Accessor) {
    return QUERYSTEPTYPE_CHOICE_ROOT;
  }
  if (ancestor_Accessor) {
    return QUERYSTEPTYPE_CHOICE_ANCESTOR;
  }
  if (descendant_Accessor) {
    return QUERYSTEPTYPE_CHOICE_DESCENDANT;
  }
  if (parent_Accessor) {
    return QUERYSTEPTYPE_CHOICE_PARENT;
  }
  if (child_Accessor) {
    return QUERYSTEPTYPE_CHOICE_CHILD;
  }
  return QUERYSTEPTYPE_CHOICE_NONE;
}

uci::type::QueryStepType& QueryStepType::setQueryStepTypeChoiceOrdinal(uci::type::QueryStepType::QueryStepTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case QUERYSTEPTYPE_CHOICE_ELEMENT:
      chooseElement("setQueryStepTypeChoiceOrdinal", type);
      break;
    case QUERYSTEPTYPE_CHOICE_ROOT:
      chooseRoot("setQueryStepTypeChoiceOrdinal", type);
      break;
    case QUERYSTEPTYPE_CHOICE_ANCESTOR:
      chooseAncestor("setQueryStepTypeChoiceOrdinal", type);
      break;
    case QUERYSTEPTYPE_CHOICE_DESCENDANT:
      chooseDescendant("setQueryStepTypeChoiceOrdinal", type);
      break;
    case QUERYSTEPTYPE_CHOICE_PARENT:
      chooseParent("setQueryStepTypeChoiceOrdinal", type);
      break;
    case QUERYSTEPTYPE_CHOICE_CHILD:
      chooseChild("setQueryStepTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setQueryStepTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::NamedElementType& QueryStepType::getElement_() const {
  if (element_Accessor) {
    return *element_Accessor;
  }
  throw uci::base::UCIException("Error in getElement(): Unable to get Element, field not selected");
}

const uci::type::NamedElementType& QueryStepType::getElement() const {
  return getElement_();
}

uci::type::NamedElementType& QueryStepType::getElement() {
  return getElement_();
}

uci::type::QueryStepType& QueryStepType::setElement(const uci::type::NamedElementType& accessor) {
  chooseElement();
  if (&accessor != element_Accessor.get()) {
    element_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryStepType::isElement() const noexcept {
  return static_cast<bool>(element_Accessor);
}

uci::type::NamedElementType& QueryStepType::chooseElement(const std::string& method, uci::base::accessorType::AccessorType type) {
  root_Accessor.reset();
  ancestor_Accessor.reset();
  descendant_Accessor.reset();
  parent_Accessor.reset();
  child_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::namedElementType : type};
  if ((!element_Accessor) || (element_Accessor->getAccessorType() != requestedType)) {
    element_Accessor = NamedElementType::create(type);
    if (!element_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *element_Accessor;
}

uci::type::NamedElementType& QueryStepType::chooseElement(uci::base::accessorType::AccessorType type) {
  return chooseElement("chooseElement", type);
}

uci::type::EmptyType& QueryStepType::getRoot_() const {
  if (root_Accessor) {
    return *root_Accessor;
  }
  throw uci::base::UCIException("Error in getRoot(): An attempt was made to get an optional field that was not enabled, call hasRoot() to determine if it is safe to call getRoot()");
}

const uci::type::EmptyType& QueryStepType::getRoot() const {
  return getRoot_();
}

uci::type::EmptyType& QueryStepType::getRoot() {
  return getRoot_();
}

uci::type::QueryStepType& QueryStepType::setRoot(const uci::type::EmptyType& value) {
  return setRoot(value.c_str());
}

uci::type::QueryStepType& QueryStepType::setRoot(const std::string& value) {
  return setRoot(value.c_str());
}

uci::type::QueryStepType& QueryStepType::setRoot(const char * value) {
  chooseRoot().setStringValue(value);
  return *this;
}

bool QueryStepType::isRoot() const noexcept {
  return static_cast<bool>(root_Accessor);
}

uci::type::EmptyType& QueryStepType::chooseRoot(const std::string& /*method*/, uci::base::accessorType::AccessorType type) {
  element_Accessor.reset();
  ancestor_Accessor.reset();
  descendant_Accessor.reset();
  parent_Accessor.reset();
  child_Accessor.reset();
  if (!root_Accessor) {
    root_Accessor = EmptyType::create(type);
  }
  return *root_Accessor;
}

uci::type::EmptyType& QueryStepType::chooseRoot(uci::base::accessorType::AccessorType type) {
  return chooseRoot("chooseRoot", type);
}

uci::type::WildcardElementType& QueryStepType::getAncestor_() const {
  if (ancestor_Accessor) {
    return *ancestor_Accessor;
  }
  throw uci::base::UCIException("Error in getAncestor(): Unable to get Ancestor, field not selected");
}

const uci::type::WildcardElementType& QueryStepType::getAncestor() const {
  return getAncestor_();
}

uci::type::WildcardElementType& QueryStepType::getAncestor() {
  return getAncestor_();
}

uci::type::QueryStepType& QueryStepType::setAncestor(const uci::type::WildcardElementType& accessor) {
  chooseAncestor();
  if (&accessor != ancestor_Accessor.get()) {
    ancestor_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryStepType::isAncestor() const noexcept {
  return static_cast<bool>(ancestor_Accessor);
}

uci::type::WildcardElementType& QueryStepType::chooseAncestor(const std::string& method, uci::base::accessorType::AccessorType type) {
  element_Accessor.reset();
  root_Accessor.reset();
  descendant_Accessor.reset();
  parent_Accessor.reset();
  child_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::wildcardElementType : type};
  if ((!ancestor_Accessor) || (ancestor_Accessor->getAccessorType() != requestedType)) {
    ancestor_Accessor = WildcardElementType::create(type);
    if (!ancestor_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ancestor_Accessor;
}

uci::type::WildcardElementType& QueryStepType::chooseAncestor(uci::base::accessorType::AccessorType type) {
  return chooseAncestor("chooseAncestor", type);
}

uci::type::WildcardElementType& QueryStepType::getDescendant_() const {
  if (descendant_Accessor) {
    return *descendant_Accessor;
  }
  throw uci::base::UCIException("Error in getDescendant(): Unable to get Descendant, field not selected");
}

const uci::type::WildcardElementType& QueryStepType::getDescendant() const {
  return getDescendant_();
}

uci::type::WildcardElementType& QueryStepType::getDescendant() {
  return getDescendant_();
}

uci::type::QueryStepType& QueryStepType::setDescendant(const uci::type::WildcardElementType& accessor) {
  chooseDescendant();
  if (&accessor != descendant_Accessor.get()) {
    descendant_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryStepType::isDescendant() const noexcept {
  return static_cast<bool>(descendant_Accessor);
}

uci::type::WildcardElementType& QueryStepType::chooseDescendant(const std::string& method, uci::base::accessorType::AccessorType type) {
  element_Accessor.reset();
  root_Accessor.reset();
  ancestor_Accessor.reset();
  parent_Accessor.reset();
  child_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::wildcardElementType : type};
  if ((!descendant_Accessor) || (descendant_Accessor->getAccessorType() != requestedType)) {
    descendant_Accessor = WildcardElementType::create(type);
    if (!descendant_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *descendant_Accessor;
}

uci::type::WildcardElementType& QueryStepType::chooseDescendant(uci::base::accessorType::AccessorType type) {
  return chooseDescendant("chooseDescendant", type);
}

uci::type::WildcardElementType& QueryStepType::getParent_() const {
  if (parent_Accessor) {
    return *parent_Accessor;
  }
  throw uci::base::UCIException("Error in getParent(): Unable to get Parent, field not selected");
}

const uci::type::WildcardElementType& QueryStepType::getParent() const {
  return getParent_();
}

uci::type::WildcardElementType& QueryStepType::getParent() {
  return getParent_();
}

uci::type::QueryStepType& QueryStepType::setParent(const uci::type::WildcardElementType& accessor) {
  chooseParent();
  if (&accessor != parent_Accessor.get()) {
    parent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryStepType::isParent() const noexcept {
  return static_cast<bool>(parent_Accessor);
}

uci::type::WildcardElementType& QueryStepType::chooseParent(const std::string& method, uci::base::accessorType::AccessorType type) {
  element_Accessor.reset();
  root_Accessor.reset();
  ancestor_Accessor.reset();
  descendant_Accessor.reset();
  child_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::wildcardElementType : type};
  if ((!parent_Accessor) || (parent_Accessor->getAccessorType() != requestedType)) {
    parent_Accessor = WildcardElementType::create(type);
    if (!parent_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *parent_Accessor;
}

uci::type::WildcardElementType& QueryStepType::chooseParent(uci::base::accessorType::AccessorType type) {
  return chooseParent("chooseParent", type);
}

uci::type::WildcardElementType& QueryStepType::getChild_() const {
  if (child_Accessor) {
    return *child_Accessor;
  }
  throw uci::base::UCIException("Error in getChild(): Unable to get Child, field not selected");
}

const uci::type::WildcardElementType& QueryStepType::getChild() const {
  return getChild_();
}

uci::type::WildcardElementType& QueryStepType::getChild() {
  return getChild_();
}

uci::type::QueryStepType& QueryStepType::setChild(const uci::type::WildcardElementType& accessor) {
  chooseChild();
  if (&accessor != child_Accessor.get()) {
    child_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool QueryStepType::isChild() const noexcept {
  return static_cast<bool>(child_Accessor);
}

uci::type::WildcardElementType& QueryStepType::chooseChild(const std::string& method, uci::base::accessorType::AccessorType type) {
  element_Accessor.reset();
  root_Accessor.reset();
  ancestor_Accessor.reset();
  descendant_Accessor.reset();
  parent_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::wildcardElementType : type};
  if ((!child_Accessor) || (child_Accessor->getAccessorType() != requestedType)) {
    child_Accessor = WildcardElementType::create(type);
    if (!child_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *child_Accessor;
}

uci::type::WildcardElementType& QueryStepType::chooseChild(uci::base::accessorType::AccessorType type) {
  return chooseChild("chooseChild", type);
}

std::unique_ptr<QueryStepType> QueryStepType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::queryStepType : type};
  return (requestedType == uci::type::accessorType::queryStepType) ? boost::make_unique<QueryStepType>() : nullptr;
}

/**  */
namespace QueryStepType_Names {

constexpr const char* Extern_Type_Name{"QueryStepType"};
constexpr const char* Element_Name{"Element"};
constexpr const char* Root_Name{"Root"};
constexpr const char* Ancestor_Name{"Ancestor"};
constexpr const char* Descendant_Name{"Descendant"};
constexpr const char* Parent_Name{"Parent"};
constexpr const char* Child_Name{"Child"};

} // namespace QueryStepType_Names

void QueryStepType::deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryStepType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QueryStepType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QueryStepType_Names::Element_Name) {
      NamedElementType::deserialize(valueType.second, accessor.chooseElement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryStepType_Names::Root_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseRoot().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + QueryStepType_Names::Ancestor_Name) {
      WildcardElementType::deserialize(valueType.second, accessor.chooseAncestor(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryStepType_Names::Descendant_Name) {
      WildcardElementType::deserialize(valueType.second, accessor.chooseDescendant(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryStepType_Names::Parent_Name) {
      WildcardElementType::deserialize(valueType.second, accessor.chooseParent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryStepType_Names::Child_Name) {
      WildcardElementType::deserialize(valueType.second, accessor.chooseChild(), nodeName, nsPrefix);
    }
  }
}

std::string QueryStepType::serialize(const uci::type::QueryStepType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? QueryStepType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, QueryStepType_Names::Extern_Type_Name);
  }
  if (accessor.isElement()) {
    NamedElementType::serialize(accessor.getElement(), node, QueryStepType_Names::Element_Name);
  } else if (accessor.isRoot()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getRoot(), node, QueryStepType_Names::Root_Name);
  } else if (accessor.isAncestor()) {
    WildcardElementType::serialize(accessor.getAncestor(), node, QueryStepType_Names::Ancestor_Name);
  } else if (accessor.isDescendant()) {
    WildcardElementType::serialize(accessor.getDescendant(), node, QueryStepType_Names::Descendant_Name);
  } else if (accessor.isParent()) {
    WildcardElementType::serialize(accessor.getParent(), node, QueryStepType_Names::Parent_Name);
  } else if (accessor.isChild()) {
    WildcardElementType::serialize(accessor.getChild(), node, QueryStepType_Names::Child_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::QueryStepType& QueryStepType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::QueryStepType>().release());
}

uci::type::QueryStepType& QueryStepType::create(const uci::type::QueryStepType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::QueryStepType> newAccessor{boost::make_unique<asb_uci::type::QueryStepType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void QueryStepType::destroy(uci::type::QueryStepType& accessor) {
  delete dynamic_cast<asb_uci::type::QueryStepType*>(&accessor);
}

} // namespace type

} // namespace uci

