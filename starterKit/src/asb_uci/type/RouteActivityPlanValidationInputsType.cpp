/** @file RouteActivityPlanValidationInputsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/RouteActivityPlanValidationInputsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/ActivityPlanPartsEnum.h"
#include "asb_uci/type/PlanValidationInputsBaseType.h"
#include "asb_uci/type/PlanningPointType.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ActivityPlanPartsEnum.h"
#include "uci/type/PlanningPointType.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanValidationInputsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

RouteActivityPlanValidationInputsType::RouteActivityPlanValidationInputsType()
  : planID_Accessor{boost::make_unique<RouteActivityPlanID_Type>()},
    planPart_Accessor{boost::make_unique<PlanPart>(0, 9)} {
}

RouteActivityPlanValidationInputsType::~RouteActivityPlanValidationInputsType() = default;

void RouteActivityPlanValidationInputsType::copy(const uci::type::RouteActivityPlanValidationInputsType& accessor) {
  copyImpl(accessor, false);
}

void RouteActivityPlanValidationInputsType::copyImpl(const uci::type::RouteActivityPlanValidationInputsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    PlanValidationInputsBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const RouteActivityPlanValidationInputsType&>(accessor);
    setPlanID(*(accessorImpl.planID_Accessor));
    setPlanPart(*(accessorImpl.planPart_Accessor));
    if (accessorImpl.origin_Accessor) {
      setOrigin(*(accessorImpl.origin_Accessor));
    } else {
      origin_Accessor.reset();
    }
  }
}

void RouteActivityPlanValidationInputsType::reset() noexcept {
  PlanValidationInputsBaseType::reset();
  planID_Accessor->reset();
  planPart_Accessor->reset();
  origin_Accessor.reset();
}

const uci::type::RouteActivityPlanID_Type& RouteActivityPlanValidationInputsType::getPlanID() const {
  return *planID_Accessor;
}

uci::type::RouteActivityPlanID_Type& RouteActivityPlanValidationInputsType::getPlanID() {
  return *planID_Accessor;
}

uci::type::RouteActivityPlanValidationInputsType& RouteActivityPlanValidationInputsType::setPlanID(const uci::type::RouteActivityPlanID_Type& accessor) {
  if (&accessor != planID_Accessor.get()) {
    planID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RouteActivityPlanValidationInputsType::PlanPart& RouteActivityPlanValidationInputsType::getPlanPart() const {
  return *planPart_Accessor;
}

uci::type::RouteActivityPlanValidationInputsType::PlanPart& RouteActivityPlanValidationInputsType::getPlanPart() {
  return *planPart_Accessor;
}

uci::type::RouteActivityPlanValidationInputsType& RouteActivityPlanValidationInputsType::setPlanPart(const uci::type::RouteActivityPlanValidationInputsType::PlanPart& accessor) {
  if (&accessor != planPart_Accessor.get()) {
    planPart_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::PlanningPointType& RouteActivityPlanValidationInputsType::getOrigin_() const {
  if (origin_Accessor) {
    return *origin_Accessor;
  }
  throw uci::base::UCIException("Error in getOrigin(): An attempt was made to get an optional field that was not enabled, call hasOrigin() to determine if it is safe to call getOrigin()");
}

const uci::type::PlanningPointType& RouteActivityPlanValidationInputsType::getOrigin() const {
  return getOrigin_();
}

uci::type::PlanningPointType& RouteActivityPlanValidationInputsType::getOrigin() {
  return getOrigin_();
}

uci::type::RouteActivityPlanValidationInputsType& RouteActivityPlanValidationInputsType::setOrigin(const uci::type::PlanningPointType& accessor) {
  enableOrigin();
  if (&accessor != origin_Accessor.get()) {
    origin_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool RouteActivityPlanValidationInputsType::hasOrigin() const noexcept {
  return static_cast<bool>(origin_Accessor);
}

uci::type::PlanningPointType& RouteActivityPlanValidationInputsType::enableOrigin(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningPointType : type};
  if ((!origin_Accessor) || (origin_Accessor->getAccessorType() != requestedType)) {
    origin_Accessor = PlanningPointType::create(requestedType);
    if (!origin_Accessor) {
      throw uci::base::UCIException("Error in enableOrigin(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *origin_Accessor;
}

uci::type::RouteActivityPlanValidationInputsType& RouteActivityPlanValidationInputsType::clearOrigin() noexcept {
  origin_Accessor.reset();
  return *this;
}

std::unique_ptr<RouteActivityPlanValidationInputsType> RouteActivityPlanValidationInputsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routeActivityPlanValidationInputsType : type};
  return (requestedType == uci::type::accessorType::routeActivityPlanValidationInputsType) ? boost::make_unique<RouteActivityPlanValidationInputsType>() : nullptr;
}

/**  */
namespace RouteActivityPlanValidationInputsType_Names {

constexpr const char* Extern_Type_Name{"RouteActivityPlanValidationInputsType"};
constexpr const char* PlanID_Name{"PlanID"};
constexpr const char* PlanPart_Name{"PlanPart"};
constexpr const char* Origin_Name{"Origin"};

} // namespace RouteActivityPlanValidationInputsType_Names

void RouteActivityPlanValidationInputsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RouteActivityPlanValidationInputsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RouteActivityPlanValidationInputsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RouteActivityPlanValidationInputsType_Names::PlanID_Name) {
      RouteActivityPlanID_Type::deserialize(valueType.second, accessor.getPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RouteActivityPlanValidationInputsType_Names::PlanPart_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RouteActivityPlanValidationInputsType::PlanPart& boundedList = accessor.getPlanPart();
        const uci::type::RouteActivityPlanValidationInputsType::PlanPart::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RouteActivityPlanValidationInputsType_Names::Origin_Name) {
      PlanningPointType::deserialize(valueType.second, accessor.enableOrigin(), nodeName, nsPrefix);
    }
  }
  PlanValidationInputsBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string RouteActivityPlanValidationInputsType::serialize(const uci::type::RouteActivityPlanValidationInputsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? RouteActivityPlanValidationInputsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, RouteActivityPlanValidationInputsType_Names::Extern_Type_Name);
  }
  PlanValidationInputsBaseType::serialize(accessor, node, "", false, false, false);
  RouteActivityPlanID_Type::serialize(accessor.getPlanID(), node, RouteActivityPlanValidationInputsType_Names::PlanID_Name);
  {
    const uci::type::RouteActivityPlanValidationInputsType::PlanPart& boundedList = accessor.getPlanPart();
    for (uci::type::RouteActivityPlanValidationInputsType::PlanPart::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityPlanPartsEnum::serialize(boundedList.at(i), node, RouteActivityPlanValidationInputsType_Names::PlanPart_Name, false);
    }
  }
  if (accessor.hasOrigin()) {
    PlanningPointType::serialize(accessor.getOrigin(), node, RouteActivityPlanValidationInputsType_Names::Origin_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::RouteActivityPlanValidationInputsType& RouteActivityPlanValidationInputsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::RouteActivityPlanValidationInputsType>().release());
}

uci::type::RouteActivityPlanValidationInputsType& RouteActivityPlanValidationInputsType::create(const uci::type::RouteActivityPlanValidationInputsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::RouteActivityPlanValidationInputsType> newAccessor{boost::make_unique<asb_uci::type::RouteActivityPlanValidationInputsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void RouteActivityPlanValidationInputsType::destroy(uci::type::RouteActivityPlanValidationInputsType& accessor) {
  delete dynamic_cast<asb_uci::type::RouteActivityPlanValidationInputsType*>(&accessor);
}

} // namespace type

} // namespace uci

