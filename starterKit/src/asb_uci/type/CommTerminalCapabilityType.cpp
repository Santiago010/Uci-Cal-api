/** @file CommTerminalCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CommTerminalCapabilityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CommCapabilityEnum.h"
#include "asb_uci/type/CommCapabilityOptionsType.h"
#include "asb_uci/type/CommDataFormatEnum.h"
#include "asb_uci/type/CommProfileID_Type.h"
#include "asb_uci/type/CommUserIO_ID_Type.h"
#include "asb_uci/type/CommUserLinkType.h"
#include "asb_uci/type/CommandableCapabilityDeclarationType.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/CryptoTypeEnum.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/FrequencyRangeType.h"
#include "asb_uci/type/MilliwattPowerRatioRangeType.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommCapabilityEnum.h"
#include "uci/type/CommCapabilityOptionsType.h"
#include "uci/type/CommDataFormatEnum.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommTerminalCapabilityType.h"
#include "uci/type/CommUserIO_ID_Type.h"
#include "uci/type/CommUserLinkType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/CryptoTypeEnum.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/MilliwattPowerRatioRangeType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CommTerminalCapabilityType::CommTerminalCapabilityType()
  : capabilityType_Accessor{boost::make_unique<CommCapabilityEnum>()},
    capabilityOptions_Accessor{boost::make_unique<CommCapabilityOptionsType>()},
    availableProfileID_Accessor{boost::make_unique<AvailableProfileID>(0, SIZE_MAX)},
    dataFormat_Accessor{boost::make_unique<DataFormat>(0, 17)},
    transmitFrequencyRange_Accessor{boost::make_unique<TransmitFrequencyRange>(0, SIZE_MAX)},
    receiveFrequencyRange_Accessor{boost::make_unique<ReceiveFrequencyRange>(0, SIZE_MAX)},
    cryptoType_Accessor{boost::make_unique<CryptoType>(0, 14)},
    associatedUserIO_ID_Accessor{boost::make_unique<AssociatedUserIO_ID>(0, SIZE_MAX)},
    associatedUserLink_Accessor{boost::make_unique<AssociatedUserLink>(0, SIZE_MAX)},
    associatedAntennaID_Accessor{boost::make_unique<AssociatedAntennaID>(0, SIZE_MAX)} {
}

CommTerminalCapabilityType::~CommTerminalCapabilityType() = default;

void CommTerminalCapabilityType::copy(const uci::type::CommTerminalCapabilityType& accessor) {
  copyImpl(accessor, false);
}

void CommTerminalCapabilityType::copyImpl(const uci::type::CommTerminalCapabilityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CommandableCapabilityDeclarationType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const CommTerminalCapabilityType&>(accessor);
    setCapabilityType(*(accessorImpl.capabilityType_Accessor));
    if (accessorImpl.subCapabilityType_Accessor) {
      setSubCapabilityType(*(accessorImpl.subCapabilityType_Accessor));
    } else {
      subCapabilityType_Accessor.reset();
    }
    setCapabilityOptions(*(accessorImpl.capabilityOptions_Accessor));
    setAvailableProfileID(*(accessorImpl.availableProfileID_Accessor));
    setDataFormat(*(accessorImpl.dataFormat_Accessor));
    if (accessorImpl.terminalUniqueKey_Accessor) {
      setTerminalUniqueKey(*(accessorImpl.terminalUniqueKey_Accessor));
    } else {
      terminalUniqueKey_Accessor.reset();
    }
    if (accessorImpl.txPowerRange_Accessor) {
      setTxPowerRange(*(accessorImpl.txPowerRange_Accessor));
    } else {
      txPowerRange_Accessor.reset();
    }
    setTransmitFrequencyRange(*(accessorImpl.transmitFrequencyRange_Accessor));
    setReceiveFrequencyRange(*(accessorImpl.receiveFrequencyRange_Accessor));
    setCryptoType(*(accessorImpl.cryptoType_Accessor));
    setAssociatedUserIO_ID(*(accessorImpl.associatedUserIO_ID_Accessor));
    setAssociatedUserLink(*(accessorImpl.associatedUserLink_Accessor));
    setAssociatedAntennaID(*(accessorImpl.associatedAntennaID_Accessor));
  }
}

void CommTerminalCapabilityType::reset() noexcept {
  CommandableCapabilityDeclarationType::reset();
  capabilityType_Accessor->reset();
  subCapabilityType_Accessor.reset();
  capabilityOptions_Accessor->reset();
  availableProfileID_Accessor->reset();
  dataFormat_Accessor->reset();
  terminalUniqueKey_Accessor.reset();
  txPowerRange_Accessor.reset();
  transmitFrequencyRange_Accessor->reset();
  receiveFrequencyRange_Accessor->reset();
  cryptoType_Accessor->reset();
  associatedUserIO_ID_Accessor->reset();
  associatedUserLink_Accessor->reset();
  associatedAntennaID_Accessor->reset();
}

const uci::type::CommCapabilityEnum& CommTerminalCapabilityType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::CommCapabilityEnum& CommTerminalCapabilityType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setCapabilityType(const uci::type::CommCapabilityEnum& accessor) {
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setCapabilityType(uci::type::CommCapabilityEnum::EnumerationItem value) {
  capabilityType_Accessor->setValue(value);
  return *this;
}


uci::type::ForeignKeyType& CommTerminalCapabilityType::getSubCapabilityType_() const {
  if (subCapabilityType_Accessor) {
    return *subCapabilityType_Accessor;
  }
  throw uci::base::UCIException("Error in getSubCapabilityType(): An attempt was made to get an optional field that was not enabled, call hasSubCapabilityType() to determine if it is safe to call getSubCapabilityType()");
}

const uci::type::ForeignKeyType& CommTerminalCapabilityType::getSubCapabilityType() const {
  return getSubCapabilityType_();
}

uci::type::ForeignKeyType& CommTerminalCapabilityType::getSubCapabilityType() {
  return getSubCapabilityType_();
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setSubCapabilityType(const uci::type::ForeignKeyType& accessor) {
  enableSubCapabilityType(accessor.getAccessorType());
  if (&accessor != subCapabilityType_Accessor.get()) {
    subCapabilityType_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommTerminalCapabilityType::hasSubCapabilityType() const noexcept {
  return static_cast<bool>(subCapabilityType_Accessor);
}

uci::type::ForeignKeyType& CommTerminalCapabilityType::enableSubCapabilityType(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!subCapabilityType_Accessor) || (subCapabilityType_Accessor->getAccessorType() != requestedType)) {
    subCapabilityType_Accessor = ForeignKeyType::create(requestedType);
    if (!subCapabilityType_Accessor) {
      throw uci::base::UCIException("Error in enableSubCapabilityType(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *subCapabilityType_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::clearSubCapabilityType() noexcept {
  subCapabilityType_Accessor.reset();
  return *this;
}

const uci::type::CommCapabilityOptionsType& CommTerminalCapabilityType::getCapabilityOptions() const {
  return *capabilityOptions_Accessor;
}

uci::type::CommCapabilityOptionsType& CommTerminalCapabilityType::getCapabilityOptions() {
  return *capabilityOptions_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setCapabilityOptions(const uci::type::CommCapabilityOptionsType& accessor) {
  if (&accessor != capabilityOptions_Accessor.get()) {
    capabilityOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::AvailableProfileID& CommTerminalCapabilityType::getAvailableProfileID() const {
  return *availableProfileID_Accessor;
}

uci::type::CommTerminalCapabilityType::AvailableProfileID& CommTerminalCapabilityType::getAvailableProfileID() {
  return *availableProfileID_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setAvailableProfileID(const uci::type::CommTerminalCapabilityType::AvailableProfileID& accessor) {
  if (&accessor != availableProfileID_Accessor.get()) {
    availableProfileID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::DataFormat& CommTerminalCapabilityType::getDataFormat() const {
  return *dataFormat_Accessor;
}

uci::type::CommTerminalCapabilityType::DataFormat& CommTerminalCapabilityType::getDataFormat() {
  return *dataFormat_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setDataFormat(const uci::type::CommTerminalCapabilityType::DataFormat& accessor) {
  if (&accessor != dataFormat_Accessor.get()) {
    dataFormat_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ForeignKeyType& CommTerminalCapabilityType::getTerminalUniqueKey_() const {
  if (terminalUniqueKey_Accessor) {
    return *terminalUniqueKey_Accessor;
  }
  throw uci::base::UCIException("Error in getTerminalUniqueKey(): An attempt was made to get an optional field that was not enabled, call hasTerminalUniqueKey() to determine if it is safe to call getTerminalUniqueKey()");
}

const uci::type::ForeignKeyType& CommTerminalCapabilityType::getTerminalUniqueKey() const {
  return getTerminalUniqueKey_();
}

uci::type::ForeignKeyType& CommTerminalCapabilityType::getTerminalUniqueKey() {
  return getTerminalUniqueKey_();
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setTerminalUniqueKey(const uci::type::ForeignKeyType& accessor) {
  enableTerminalUniqueKey(accessor.getAccessorType());
  if (&accessor != terminalUniqueKey_Accessor.get()) {
    terminalUniqueKey_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool CommTerminalCapabilityType::hasTerminalUniqueKey() const noexcept {
  return static_cast<bool>(terminalUniqueKey_Accessor);
}

uci::type::ForeignKeyType& CommTerminalCapabilityType::enableTerminalUniqueKey(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::foreignKeyType : type};
  if ((!terminalUniqueKey_Accessor) || (terminalUniqueKey_Accessor->getAccessorType() != requestedType)) {
    terminalUniqueKey_Accessor = ForeignKeyType::create(requestedType);
    if (!terminalUniqueKey_Accessor) {
      throw uci::base::UCIException("Error in enableTerminalUniqueKey(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *terminalUniqueKey_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::clearTerminalUniqueKey() noexcept {
  terminalUniqueKey_Accessor.reset();
  return *this;
}

uci::type::MilliwattPowerRatioRangeType& CommTerminalCapabilityType::getTxPowerRange_() const {
  if (txPowerRange_Accessor) {
    return *txPowerRange_Accessor;
  }
  throw uci::base::UCIException("Error in getTxPowerRange(): An attempt was made to get an optional field that was not enabled, call hasTxPowerRange() to determine if it is safe to call getTxPowerRange()");
}

const uci::type::MilliwattPowerRatioRangeType& CommTerminalCapabilityType::getTxPowerRange() const {
  return getTxPowerRange_();
}

uci::type::MilliwattPowerRatioRangeType& CommTerminalCapabilityType::getTxPowerRange() {
  return getTxPowerRange_();
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setTxPowerRange(const uci::type::MilliwattPowerRatioRangeType& accessor) {
  enableTxPowerRange();
  if (&accessor != txPowerRange_Accessor.get()) {
    txPowerRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CommTerminalCapabilityType::hasTxPowerRange() const noexcept {
  return static_cast<bool>(txPowerRange_Accessor);
}

uci::type::MilliwattPowerRatioRangeType& CommTerminalCapabilityType::enableTxPowerRange(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::milliwattPowerRatioRangeType : type};
  if ((!txPowerRange_Accessor) || (txPowerRange_Accessor->getAccessorType() != requestedType)) {
    txPowerRange_Accessor = MilliwattPowerRatioRangeType::create(requestedType);
    if (!txPowerRange_Accessor) {
      throw uci::base::UCIException("Error in enableTxPowerRange(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *txPowerRange_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::clearTxPowerRange() noexcept {
  txPowerRange_Accessor.reset();
  return *this;
}

const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& CommTerminalCapabilityType::getTransmitFrequencyRange() const {
  return *transmitFrequencyRange_Accessor;
}

uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& CommTerminalCapabilityType::getTransmitFrequencyRange() {
  return *transmitFrequencyRange_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setTransmitFrequencyRange(const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& accessor) {
  if (&accessor != transmitFrequencyRange_Accessor.get()) {
    transmitFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& CommTerminalCapabilityType::getReceiveFrequencyRange() const {
  return *receiveFrequencyRange_Accessor;
}

uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& CommTerminalCapabilityType::getReceiveFrequencyRange() {
  return *receiveFrequencyRange_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setReceiveFrequencyRange(const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& accessor) {
  if (&accessor != receiveFrequencyRange_Accessor.get()) {
    receiveFrequencyRange_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::CryptoType& CommTerminalCapabilityType::getCryptoType() const {
  return *cryptoType_Accessor;
}

uci::type::CommTerminalCapabilityType::CryptoType& CommTerminalCapabilityType::getCryptoType() {
  return *cryptoType_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setCryptoType(const uci::type::CommTerminalCapabilityType::CryptoType& accessor) {
  if (&accessor != cryptoType_Accessor.get()) {
    cryptoType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& CommTerminalCapabilityType::getAssociatedUserIO_ID() const {
  return *associatedUserIO_ID_Accessor;
}

uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& CommTerminalCapabilityType::getAssociatedUserIO_ID() {
  return *associatedUserIO_ID_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setAssociatedUserIO_ID(const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& accessor) {
  if (&accessor != associatedUserIO_ID_Accessor.get()) {
    associatedUserIO_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::AssociatedUserLink& CommTerminalCapabilityType::getAssociatedUserLink() const {
  return *associatedUserLink_Accessor;
}

uci::type::CommTerminalCapabilityType::AssociatedUserLink& CommTerminalCapabilityType::getAssociatedUserLink() {
  return *associatedUserLink_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setAssociatedUserLink(const uci::type::CommTerminalCapabilityType::AssociatedUserLink& accessor) {
  if (&accessor != associatedUserLink_Accessor.get()) {
    associatedUserLink_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& CommTerminalCapabilityType::getAssociatedAntennaID() const {
  return *associatedAntennaID_Accessor;
}

uci::type::CommTerminalCapabilityType::AssociatedAntennaID& CommTerminalCapabilityType::getAssociatedAntennaID() {
  return *associatedAntennaID_Accessor;
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::setAssociatedAntennaID(const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& accessor) {
  if (&accessor != associatedAntennaID_Accessor.get()) {
    associatedAntennaID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CommTerminalCapabilityType> CommTerminalCapabilityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::commTerminalCapabilityType : type};
  return (requestedType == uci::type::accessorType::commTerminalCapabilityType) ? boost::make_unique<CommTerminalCapabilityType>() : nullptr;
}

/**  */
namespace CommTerminalCapabilityType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalCapabilityType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* SubCapabilityType_Name{"SubCapabilityType"};
constexpr const char* CapabilityOptions_Name{"CapabilityOptions"};
constexpr const char* AvailableProfileID_Name{"AvailableProfileID"};
constexpr const char* DataFormat_Name{"DataFormat"};
constexpr const char* TerminalUniqueKey_Name{"TerminalUniqueKey"};
constexpr const char* TxPowerRange_Name{"TxPowerRange"};
constexpr const char* TransmitFrequencyRange_Name{"TransmitFrequencyRange"};
constexpr const char* ReceiveFrequencyRange_Name{"ReceiveFrequencyRange"};
constexpr const char* CryptoType_Name{"CryptoType"};
constexpr const char* AssociatedUserIO_ID_Name{"AssociatedUserIO_ID"};
constexpr const char* AssociatedUserLink_Name{"AssociatedUserLink"};
constexpr const char* AssociatedAntennaID_Name{"AssociatedAntennaID"};

} // namespace CommTerminalCapabilityType_Names

void CommTerminalCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::SubCapabilityType_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSubCapabilityType(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::CapabilityOptions_Name) {
      CommCapabilityOptionsType::deserialize(valueType.second, accessor.getCapabilityOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AvailableProfileID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AvailableProfileID& boundedList = accessor.getAvailableProfileID();
        const uci::type::CommTerminalCapabilityType::AvailableProfileID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommProfileID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::DataFormat_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::DataFormat& boundedList = accessor.getDataFormat();
        const uci::type::CommTerminalCapabilityType::DataFormat::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::TerminalUniqueKey_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableTerminalUniqueKey(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::TxPowerRange_Name) {
      MilliwattPowerRatioRangeType::deserialize(valueType.second, accessor.enableTxPowerRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::TransmitFrequencyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& boundedList = accessor.getTransmitFrequencyRange();
        const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::ReceiveFrequencyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& boundedList = accessor.getReceiveFrequencyRange();
        const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::CryptoType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::CryptoType& boundedList = accessor.getCryptoType();
        const uci::type::CommTerminalCapabilityType::CryptoType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AssociatedUserIO_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& boundedList = accessor.getAssociatedUserIO_ID();
        const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommUserIO_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AssociatedUserLink_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AssociatedUserLink& boundedList = accessor.getAssociatedUserLink();
        const uci::type::CommTerminalCapabilityType::AssociatedUserLink::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CommUserLinkType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AssociatedAntennaID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AssociatedAntennaID& boundedList = accessor.getAssociatedAntennaID();
        const uci::type::CommTerminalCapabilityType::AssociatedAntennaID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CommandableCapabilityDeclarationType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string CommTerminalCapabilityType::serialize(const uci::type::CommTerminalCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CommTerminalCapabilityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalCapabilityType_Names::Extern_Type_Name);
  }
  CommandableCapabilityDeclarationType::serialize(accessor, node, "", false, false, false);
  CommCapabilityEnum::serialize(accessor.getCapabilityType(), node, CommTerminalCapabilityType_Names::CapabilityType_Name, false);
  if (accessor.hasSubCapabilityType()) {
    ForeignKeyType::serialize(accessor.getSubCapabilityType(), node, CommTerminalCapabilityType_Names::SubCapabilityType_Name);
  }
  CommCapabilityOptionsType::serialize(accessor.getCapabilityOptions(), node, CommTerminalCapabilityType_Names::CapabilityOptions_Name);
  {
    const uci::type::CommTerminalCapabilityType::AvailableProfileID& boundedList = accessor.getAvailableProfileID();
    for (uci::type::CommTerminalCapabilityType::AvailableProfileID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommProfileID_Type::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AvailableProfileID_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::DataFormat& boundedList = accessor.getDataFormat();
    for (uci::type::CommTerminalCapabilityType::DataFormat::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommDataFormatEnum::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::DataFormat_Name, false);
    }
  }
  if (accessor.hasTerminalUniqueKey()) {
    ForeignKeyType::serialize(accessor.getTerminalUniqueKey(), node, CommTerminalCapabilityType_Names::TerminalUniqueKey_Name);
  }
  if (accessor.hasTxPowerRange()) {
    MilliwattPowerRatioRangeType::serialize(accessor.getTxPowerRange(), node, CommTerminalCapabilityType_Names::TxPowerRange_Name);
  }
  {
    const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& boundedList = accessor.getTransmitFrequencyRange();
    for (uci::type::CommTerminalCapabilityType::TransmitFrequencyRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::TransmitFrequencyRange_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& boundedList = accessor.getReceiveFrequencyRange();
    for (uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::FrequencyRangeType::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::ReceiveFrequencyRange_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::CryptoType& boundedList = accessor.getCryptoType();
    for (uci::type::CommTerminalCapabilityType::CryptoType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CryptoTypeEnum::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::CryptoType_Name, false);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& boundedList = accessor.getAssociatedUserIO_ID();
    for (uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommUserIO_ID_Type::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AssociatedUserIO_ID_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::AssociatedUserLink& boundedList = accessor.getAssociatedUserLink();
    for (uci::type::CommTerminalCapabilityType::AssociatedUserLink::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::CommUserLinkType::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AssociatedUserLink_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& boundedList = accessor.getAssociatedAntennaID();
    for (uci::type::CommTerminalCapabilityType::AssociatedAntennaID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AssociatedAntennaID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CommTerminalCapabilityType>().release());
}

uci::type::CommTerminalCapabilityType& CommTerminalCapabilityType::create(const uci::type::CommTerminalCapabilityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CommTerminalCapabilityType> newAccessor{boost::make_unique<asb_uci::type::CommTerminalCapabilityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CommTerminalCapabilityType::destroy(uci::type::CommTerminalCapabilityType& accessor) {
  delete dynamic_cast<asb_uci::type::CommTerminalCapabilityType*>(&accessor);
}

} // namespace type

} // namespace uci

