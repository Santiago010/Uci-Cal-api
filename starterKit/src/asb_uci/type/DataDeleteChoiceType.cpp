/** @file DataDeleteChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/DataDeleteChoiceType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/FileMetadataID_Type.h"
#include "asb_uci/type/ProductLocationID_Type.h"
#include "asb_uci/type/ProductMetadataID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DataDeleteChoiceType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/ProductLocationID_Type.h"
#include "uci/type/ProductMetadataID_Type.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DataDeleteChoiceType::DataDeleteChoiceType() = default;

DataDeleteChoiceType::~DataDeleteChoiceType() = default;

void DataDeleteChoiceType::copy(const uci::type::DataDeleteChoiceType& accessor) {
  copyImpl(accessor, false);
}

void DataDeleteChoiceType::copyImpl(const uci::type::DataDeleteChoiceType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const DataDeleteChoiceType&>(accessor);
    if (accessorImpl.productMetadataID_Accessor) {
      setProductMetadataID(*(accessorImpl.productMetadataID_Accessor));
    } else {
      productMetadataID_Accessor.reset();
    }
    if (accessorImpl.productLocationID_Accessor) {
      setProductLocationID(*(accessorImpl.productLocationID_Accessor));
    } else {
      productLocationID_Accessor.reset();
    }
    if (accessorImpl.fileMetadataID_Accessor) {
      setFileMetadataID(*(accessorImpl.fileMetadataID_Accessor));
    } else {
      fileMetadataID_Accessor.reset();
    }
    if (accessorImpl.fileLocationID_Accessor) {
      setFileLocationID(*(accessorImpl.fileLocationID_Accessor));
    } else {
      fileLocationID_Accessor.reset();
    }
    if (accessorImpl.capabilityID_Accessor) {
      setCapabilityID(*(accessorImpl.capabilityID_Accessor));
    } else {
      capabilityID_Accessor.reset();
    }
    if (accessorImpl.componentID_Accessor) {
      setComponentID(*(accessorImpl.componentID_Accessor));
    } else {
      componentID_Accessor.reset();
    }
  }
}

void DataDeleteChoiceType::reset() noexcept {
  productMetadataID_Accessor.reset();
  productLocationID_Accessor.reset();
  fileMetadataID_Accessor.reset();
  fileLocationID_Accessor.reset();
  capabilityID_Accessor.reset();
  componentID_Accessor.reset();
}

uci::type::DataDeleteChoiceType::DataDeleteChoiceTypeChoice DataDeleteChoiceType::getDataDeleteChoiceTypeChoiceOrdinal() const noexcept {
  if (productMetadataID_Accessor) {
    return DATADELETECHOICETYPE_CHOICE_PRODUCTMETADATAID;
  }
  if (productLocationID_Accessor) {
    return DATADELETECHOICETYPE_CHOICE_PRODUCTLOCATIONID;
  }
  if (fileMetadataID_Accessor) {
    return DATADELETECHOICETYPE_CHOICE_FILEMETADATAID;
  }
  if (fileLocationID_Accessor) {
    return DATADELETECHOICETYPE_CHOICE_FILELOCATIONID;
  }
  if (capabilityID_Accessor) {
    return DATADELETECHOICETYPE_CHOICE_CAPABILITYID;
  }
  if (componentID_Accessor) {
    return DATADELETECHOICETYPE_CHOICE_COMPONENTID;
  }
  return DATADELETECHOICETYPE_CHOICE_NONE;
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setDataDeleteChoiceTypeChoiceOrdinal(uci::type::DataDeleteChoiceType::DataDeleteChoiceTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case DATADELETECHOICETYPE_CHOICE_PRODUCTMETADATAID:
      chooseProductMetadataID("setDataDeleteChoiceTypeChoiceOrdinal", type);
      break;
    case DATADELETECHOICETYPE_CHOICE_PRODUCTLOCATIONID:
      chooseProductLocationID("setDataDeleteChoiceTypeChoiceOrdinal", type);
      break;
    case DATADELETECHOICETYPE_CHOICE_FILEMETADATAID:
      chooseFileMetadataID("setDataDeleteChoiceTypeChoiceOrdinal", type);
      break;
    case DATADELETECHOICETYPE_CHOICE_FILELOCATIONID:
      chooseFileLocationID("setDataDeleteChoiceTypeChoiceOrdinal", type);
      break;
    case DATADELETECHOICETYPE_CHOICE_CAPABILITYID:
      chooseCapabilityID();
      break;
    case DATADELETECHOICETYPE_CHOICE_COMPONENTID:
      chooseComponentID();
      break;
    default:
      throw uci::base::UCIException("Error in setDataDeleteChoiceTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::ProductMetadataID_Type& DataDeleteChoiceType::getProductMetadataID_() const {
  if (productMetadataID_Accessor) {
    return *productMetadataID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductMetadataID(): Unable to get ProductMetadataID, field not selected");
}

const uci::type::ProductMetadataID_Type& DataDeleteChoiceType::getProductMetadataID() const {
  return getProductMetadataID_();
}

uci::type::ProductMetadataID_Type& DataDeleteChoiceType::getProductMetadataID() {
  return getProductMetadataID_();
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setProductMetadataID(const uci::type::ProductMetadataID_Type& accessor) {
  chooseProductMetadataID();
  if (&accessor != productMetadataID_Accessor.get()) {
    productMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataDeleteChoiceType::isProductMetadataID() const noexcept {
  return static_cast<bool>(productMetadataID_Accessor);
}

uci::type::ProductMetadataID_Type& DataDeleteChoiceType::chooseProductMetadataID(const std::string& method, uci::base::accessorType::AccessorType type) {
  productLocationID_Accessor.reset();
  fileMetadataID_Accessor.reset();
  fileLocationID_Accessor.reset();
  capabilityID_Accessor.reset();
  componentID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productMetadataID_Type : type};
  if ((!productMetadataID_Accessor) || (productMetadataID_Accessor->getAccessorType() != requestedType)) {
    productMetadataID_Accessor = ProductMetadataID_Type::create(type);
    if (!productMetadataID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productMetadataID_Accessor;
}

uci::type::ProductMetadataID_Type& DataDeleteChoiceType::chooseProductMetadataID(uci::base::accessorType::AccessorType type) {
  return chooseProductMetadataID("chooseProductMetadataID", type);
}

uci::type::ProductLocationID_Type& DataDeleteChoiceType::getProductLocationID_() const {
  if (productLocationID_Accessor) {
    return *productLocationID_Accessor;
  }
  throw uci::base::UCIException("Error in getProductLocationID(): Unable to get ProductLocationID, field not selected");
}

const uci::type::ProductLocationID_Type& DataDeleteChoiceType::getProductLocationID() const {
  return getProductLocationID_();
}

uci::type::ProductLocationID_Type& DataDeleteChoiceType::getProductLocationID() {
  return getProductLocationID_();
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setProductLocationID(const uci::type::ProductLocationID_Type& accessor) {
  chooseProductLocationID();
  if (&accessor != productLocationID_Accessor.get()) {
    productLocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataDeleteChoiceType::isProductLocationID() const noexcept {
  return static_cast<bool>(productLocationID_Accessor);
}

uci::type::ProductLocationID_Type& DataDeleteChoiceType::chooseProductLocationID(const std::string& method, uci::base::accessorType::AccessorType type) {
  productMetadataID_Accessor.reset();
  fileMetadataID_Accessor.reset();
  fileLocationID_Accessor.reset();
  capabilityID_Accessor.reset();
  componentID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::productLocationID_Type : type};
  if ((!productLocationID_Accessor) || (productLocationID_Accessor->getAccessorType() != requestedType)) {
    productLocationID_Accessor = ProductLocationID_Type::create(type);
    if (!productLocationID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *productLocationID_Accessor;
}

uci::type::ProductLocationID_Type& DataDeleteChoiceType::chooseProductLocationID(uci::base::accessorType::AccessorType type) {
  return chooseProductLocationID("chooseProductLocationID", type);
}

uci::type::FileMetadataID_Type& DataDeleteChoiceType::getFileMetadataID_() const {
  if (fileMetadataID_Accessor) {
    return *fileMetadataID_Accessor;
  }
  throw uci::base::UCIException("Error in getFileMetadataID(): Unable to get FileMetadataID, field not selected");
}

const uci::type::FileMetadataID_Type& DataDeleteChoiceType::getFileMetadataID() const {
  return getFileMetadataID_();
}

uci::type::FileMetadataID_Type& DataDeleteChoiceType::getFileMetadataID() {
  return getFileMetadataID_();
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setFileMetadataID(const uci::type::FileMetadataID_Type& accessor) {
  chooseFileMetadataID();
  if (&accessor != fileMetadataID_Accessor.get()) {
    fileMetadataID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataDeleteChoiceType::isFileMetadataID() const noexcept {
  return static_cast<bool>(fileMetadataID_Accessor);
}

uci::type::FileMetadataID_Type& DataDeleteChoiceType::chooseFileMetadataID(const std::string& method, uci::base::accessorType::AccessorType type) {
  productMetadataID_Accessor.reset();
  productLocationID_Accessor.reset();
  fileLocationID_Accessor.reset();
  capabilityID_Accessor.reset();
  componentID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileMetadataID_Type : type};
  if ((!fileMetadataID_Accessor) || (fileMetadataID_Accessor->getAccessorType() != requestedType)) {
    fileMetadataID_Accessor = FileMetadataID_Type::create(type);
    if (!fileMetadataID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileMetadataID_Accessor;
}

uci::type::FileMetadataID_Type& DataDeleteChoiceType::chooseFileMetadataID(uci::base::accessorType::AccessorType type) {
  return chooseFileMetadataID("chooseFileMetadataID", type);
}

uci::type::FileLocationID_Type& DataDeleteChoiceType::getFileLocationID_() const {
  if (fileLocationID_Accessor) {
    return *fileLocationID_Accessor;
  }
  throw uci::base::UCIException("Error in getFileLocationID(): Unable to get FileLocationID, field not selected");
}

const uci::type::FileLocationID_Type& DataDeleteChoiceType::getFileLocationID() const {
  return getFileLocationID_();
}

uci::type::FileLocationID_Type& DataDeleteChoiceType::getFileLocationID() {
  return getFileLocationID_();
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setFileLocationID(const uci::type::FileLocationID_Type& accessor) {
  chooseFileLocationID();
  if (&accessor != fileLocationID_Accessor.get()) {
    fileLocationID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataDeleteChoiceType::isFileLocationID() const noexcept {
  return static_cast<bool>(fileLocationID_Accessor);
}

uci::type::FileLocationID_Type& DataDeleteChoiceType::chooseFileLocationID(const std::string& method, uci::base::accessorType::AccessorType type) {
  productMetadataID_Accessor.reset();
  productLocationID_Accessor.reset();
  fileMetadataID_Accessor.reset();
  capabilityID_Accessor.reset();
  componentID_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::fileLocationID_Type : type};
  if ((!fileLocationID_Accessor) || (fileLocationID_Accessor->getAccessorType() != requestedType)) {
    fileLocationID_Accessor = FileLocationID_Type::create(type);
    if (!fileLocationID_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *fileLocationID_Accessor;
}

uci::type::FileLocationID_Type& DataDeleteChoiceType::chooseFileLocationID(uci::base::accessorType::AccessorType type) {
  return chooseFileLocationID("chooseFileLocationID", type);
}

uci::type::DataDeleteChoiceType::CapabilityID& DataDeleteChoiceType::getCapabilityID_() const {
  if (capabilityID_Accessor) {
    return *capabilityID_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityID(): Unable to get CapabilityID, field not selected");
}

const uci::type::DataDeleteChoiceType::CapabilityID& DataDeleteChoiceType::getCapabilityID() const {
  return getCapabilityID_();
}

uci::type::DataDeleteChoiceType::CapabilityID& DataDeleteChoiceType::getCapabilityID() {
  return getCapabilityID_();
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setCapabilityID(const uci::type::DataDeleteChoiceType::CapabilityID& accessor) {
  chooseCapabilityID();
  if (&accessor != capabilityID_Accessor.get()) {
    capabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataDeleteChoiceType::isCapabilityID() const noexcept {
  return static_cast<bool>(capabilityID_Accessor);
}

uci::type::DataDeleteChoiceType::CapabilityID& DataDeleteChoiceType::chooseCapabilityID() {
  productMetadataID_Accessor.reset();
  productLocationID_Accessor.reset();
  fileMetadataID_Accessor.reset();
  fileLocationID_Accessor.reset();
  componentID_Accessor.reset();
  if (!capabilityID_Accessor) {
    capabilityID_Accessor = boost::make_unique<CapabilityID>(1, SIZE_MAX);
  }
  return *capabilityID_Accessor;
}

uci::type::DataDeleteChoiceType::ComponentID& DataDeleteChoiceType::getComponentID_() const {
  if (componentID_Accessor) {
    return *componentID_Accessor;
  }
  throw uci::base::UCIException("Error in getComponentID(): Unable to get ComponentID, field not selected");
}

const uci::type::DataDeleteChoiceType::ComponentID& DataDeleteChoiceType::getComponentID() const {
  return getComponentID_();
}

uci::type::DataDeleteChoiceType::ComponentID& DataDeleteChoiceType::getComponentID() {
  return getComponentID_();
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::setComponentID(const uci::type::DataDeleteChoiceType::ComponentID& accessor) {
  chooseComponentID();
  if (&accessor != componentID_Accessor.get()) {
    componentID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DataDeleteChoiceType::isComponentID() const noexcept {
  return static_cast<bool>(componentID_Accessor);
}

uci::type::DataDeleteChoiceType::ComponentID& DataDeleteChoiceType::chooseComponentID() {
  productMetadataID_Accessor.reset();
  productLocationID_Accessor.reset();
  fileMetadataID_Accessor.reset();
  fileLocationID_Accessor.reset();
  capabilityID_Accessor.reset();
  if (!componentID_Accessor) {
    componentID_Accessor = boost::make_unique<ComponentID>(1, SIZE_MAX);
  }
  return *componentID_Accessor;
}

std::unique_ptr<DataDeleteChoiceType> DataDeleteChoiceType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dataDeleteChoiceType : type};
  return (requestedType == uci::type::accessorType::dataDeleteChoiceType) ? boost::make_unique<DataDeleteChoiceType>() : nullptr;
}

/**  */
namespace DataDeleteChoiceType_Names {

constexpr const char* Extern_Type_Name{"DataDeleteChoiceType"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* ProductLocationID_Name{"ProductLocationID"};
constexpr const char* FileMetadataID_Name{"FileMetadataID"};
constexpr const char* FileLocationID_Name{"FileLocationID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ComponentID_Name{"ComponentID"};

} // namespace DataDeleteChoiceType_Names

void DataDeleteChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::DataDeleteChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DataDeleteChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DataDeleteChoiceType_Names::ProductMetadataID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.chooseProductMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataDeleteChoiceType_Names::ProductLocationID_Name) {
      ProductLocationID_Type::deserialize(valueType.second, accessor.chooseProductLocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataDeleteChoiceType_Names::FileMetadataID_Name) {
      FileMetadataID_Type::deserialize(valueType.second, accessor.chooseFileMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataDeleteChoiceType_Names::FileLocationID_Name) {
      FileLocationID_Type::deserialize(valueType.second, accessor.chooseFileLocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DataDeleteChoiceType_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataDeleteChoiceType::CapabilityID& boundedList = accessor.chooseCapabilityID();
        const uci::type::DataDeleteChoiceType::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DataDeleteChoiceType_Names::ComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DataDeleteChoiceType::ComponentID& boundedList = accessor.chooseComponentID();
        const uci::type::DataDeleteChoiceType::ComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string DataDeleteChoiceType::serialize(const uci::type::DataDeleteChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DataDeleteChoiceType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DataDeleteChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isProductMetadataID()) {
    ProductMetadataID_Type::serialize(accessor.getProductMetadataID(), node, DataDeleteChoiceType_Names::ProductMetadataID_Name);
  } else if (accessor.isProductLocationID()) {
    ProductLocationID_Type::serialize(accessor.getProductLocationID(), node, DataDeleteChoiceType_Names::ProductLocationID_Name);
  } else if (accessor.isFileMetadataID()) {
    FileMetadataID_Type::serialize(accessor.getFileMetadataID(), node, DataDeleteChoiceType_Names::FileMetadataID_Name);
  } else if (accessor.isFileLocationID()) {
    FileLocationID_Type::serialize(accessor.getFileLocationID(), node, DataDeleteChoiceType_Names::FileLocationID_Name);
  } else if (accessor.isCapabilityID()) {
    {
      const uci::type::DataDeleteChoiceType::CapabilityID& boundedList = accessor.getCapabilityID();
      for (uci::type::DataDeleteChoiceType::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, DataDeleteChoiceType_Names::CapabilityID_Name);
      }
    }
  } else if (accessor.isComponentID()) {
    {
      const uci::type::DataDeleteChoiceType::ComponentID& boundedList = accessor.getComponentID();
      for (uci::type::DataDeleteChoiceType::ComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::ComponentID_Type::serialize(boundedList.at(i), node, DataDeleteChoiceType_Names::ComponentID_Name);
      }
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DataDeleteChoiceType>().release());
}

uci::type::DataDeleteChoiceType& DataDeleteChoiceType::create(const uci::type::DataDeleteChoiceType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DataDeleteChoiceType> newAccessor{boost::make_unique<asb_uci::type::DataDeleteChoiceType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DataDeleteChoiceType::destroy(uci::type::DataDeleteChoiceType& accessor) {
  delete dynamic_cast<asb_uci::type::DataDeleteChoiceType*>(&accessor);
}

} // namespace type

} // namespace uci

