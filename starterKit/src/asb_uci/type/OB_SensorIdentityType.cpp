/** @file OB_SensorIdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/OB_SensorIdentityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/EnvironmentEnum.h"
#include "../../../include/asb_uci/type/MobilityEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EnvironmentEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MobilityEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OB_SensorIdentityType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OB_SensorIdentityType::OB_SensorIdentityType() = default;

OB_SensorIdentityType::~OB_SensorIdentityType() = default;

void OB_SensorIdentityType::copy(const uci::type::OB_SensorIdentityType& accessor) {
  copyImpl(accessor, false);
}

void OB_SensorIdentityType::copyImpl(const uci::type::OB_SensorIdentityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OB_SensorIdentityType&>(accessor);
    if (accessorImpl.mobility_Accessor) {
      setMobility(*(accessorImpl.mobility_Accessor));
    } else {
      mobility_Accessor.reset();
    }
    if (accessorImpl.environment_Accessor) {
      setEnvironment(*(accessorImpl.environment_Accessor));
    } else {
      environment_Accessor.reset();
    }
  }
}

void OB_SensorIdentityType::reset() noexcept {
  mobility_Accessor.reset();
  environment_Accessor.reset();
}

uci::type::MobilityEnum& OB_SensorIdentityType::getMobility_() const {
  if (mobility_Accessor) {
    return *mobility_Accessor;
  }
  throw uci::base::UCIException("Error in getMobility(): An attempt was made to get an optional field that was not enabled, call hasMobility() to determine if it is safe to call getMobility()");
}

const uci::type::MobilityEnum& OB_SensorIdentityType::getMobility() const {
  return getMobility_();
}

uci::type::MobilityEnum& OB_SensorIdentityType::getMobility() {
  return getMobility_();
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::setMobility(const uci::type::MobilityEnum& accessor) {
  enableMobility();
  if (&accessor != mobility_Accessor.get()) {
    mobility_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::setMobility(const uci::type::MobilityEnum::EnumerationItem value) {
  enableMobility().setValue(value);
  return *this;
}

bool OB_SensorIdentityType::hasMobility() const noexcept {
  return static_cast<bool>(mobility_Accessor);
}

uci::type::MobilityEnum& OB_SensorIdentityType::enableMobility(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mobilityEnum : type};
  if ((!mobility_Accessor) || (mobility_Accessor->getAccessorType() != requestedType)) {
    mobility_Accessor = MobilityEnum::create(requestedType);
    if (!mobility_Accessor) {
      throw uci::base::UCIException("Error in enableMobility(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *mobility_Accessor;
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::clearMobility() noexcept {
  mobility_Accessor.reset();
  return *this;
}

uci::type::EnvironmentEnum& OB_SensorIdentityType::getEnvironment_() const {
  if (environment_Accessor) {
    return *environment_Accessor;
  }
  throw uci::base::UCIException("Error in getEnvironment(): An attempt was made to get an optional field that was not enabled, call hasEnvironment() to determine if it is safe to call getEnvironment()");
}

const uci::type::EnvironmentEnum& OB_SensorIdentityType::getEnvironment() const {
  return getEnvironment_();
}

uci::type::EnvironmentEnum& OB_SensorIdentityType::getEnvironment() {
  return getEnvironment_();
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::setEnvironment(const uci::type::EnvironmentEnum& accessor) {
  enableEnvironment();
  if (&accessor != environment_Accessor.get()) {
    environment_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::setEnvironment(const uci::type::EnvironmentEnum::EnumerationItem value) {
  enableEnvironment().setValue(value);
  return *this;
}

bool OB_SensorIdentityType::hasEnvironment() const noexcept {
  return static_cast<bool>(environment_Accessor);
}

uci::type::EnvironmentEnum& OB_SensorIdentityType::enableEnvironment(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::environmentEnum : type};
  if ((!environment_Accessor) || (environment_Accessor->getAccessorType() != requestedType)) {
    environment_Accessor = EnvironmentEnum::create(requestedType);
    if (!environment_Accessor) {
      throw uci::base::UCIException("Error in enableEnvironment(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *environment_Accessor;
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::clearEnvironment() noexcept {
  environment_Accessor.reset();
  return *this;
}

std::unique_ptr<OB_SensorIdentityType> OB_SensorIdentityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::oB_SensorIdentityType : type};
  return (requestedType == uci::type::accessorType::oB_SensorIdentityType) ? boost::make_unique<OB_SensorIdentityType>() : nullptr;
}

/**  */
namespace OB_SensorIdentityType_Names {

constexpr const char* Extern_Type_Name{"OB_SensorIdentityType"};
constexpr const char* Mobility_Name{"Mobility"};
constexpr const char* Environment_Name{"Environment"};

} // namespace OB_SensorIdentityType_Names

void OB_SensorIdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OB_SensorIdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OB_SensorIdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OB_SensorIdentityType_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OB_SensorIdentityType_Names::Environment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEnvironment().setValueFromName(*value);
      }
    }
  }
}

std::string OB_SensorIdentityType::serialize(const uci::type::OB_SensorIdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OB_SensorIdentityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OB_SensorIdentityType_Names::Extern_Type_Name);
  }
  if (accessor.hasMobility()) {
    MobilityEnum::serialize(accessor.getMobility(), node, OB_SensorIdentityType_Names::Mobility_Name, false);
  }
  if (accessor.hasEnvironment()) {
    EnvironmentEnum::serialize(accessor.getEnvironment(), node, OB_SensorIdentityType_Names::Environment_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OB_SensorIdentityType>().release());
}

uci::type::OB_SensorIdentityType& OB_SensorIdentityType::create(const uci::type::OB_SensorIdentityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OB_SensorIdentityType> newAccessor{boost::make_unique<asb_uci::type::OB_SensorIdentityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OB_SensorIdentityType::destroy(uci::type::OB_SensorIdentityType& accessor) {
  delete dynamic_cast<asb_uci::type::OB_SensorIdentityType*>(&accessor);
}

} // namespace type

} // namespace uci

