/** @file AO_TaskBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:11 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/AO_TaskBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AO_CapabilityEnum.h"
#include "asb_uci/type/AO_CodeType.h"
#include "asb_uci/type/OpticalCollectionConstraintsType.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AO_CapabilityEnum.h"
#include "uci/type/AO_CodeType.h"
#include "uci/type/AO_TaskBaseType.h"
#include "uci/type/OpticalCollectionConstraintsType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

AO_TaskBaseType::AO_TaskBaseType()
  : capabilityType_Accessor{boost::make_unique<AO_CapabilityEnum>()} {
}

AO_TaskBaseType::~AO_TaskBaseType() = default;

void AO_TaskBaseType::copy(const uci::type::AO_TaskBaseType& accessor) {
  copyImpl(accessor, false);
}

void AO_TaskBaseType::copyImpl(const uci::type::AO_TaskBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::aO_TaskBaseType)) {
      const auto& accessorImpl = dynamic_cast<const AO_TaskBaseType&>(accessor);
      setCapabilityType(*(accessorImpl.capabilityType_Accessor));
      if (accessorImpl.supportedCode_Accessor) {
        setSupportedCode(*(accessorImpl.supportedCode_Accessor));
      } else {
        supportedCode_Accessor.reset();
      }
      if (accessorImpl.emissionConstraints_Accessor) {
        setEmissionConstraints(*(accessorImpl.emissionConstraints_Accessor));
      } else {
        emissionConstraints_Accessor.reset();
      }
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void AO_TaskBaseType::reset() noexcept {
  capabilityType_Accessor->reset();
  supportedCode_Accessor.reset();
  emissionConstraints_Accessor.reset();
}

const uci::type::AO_CapabilityEnum& AO_TaskBaseType::getCapabilityType() const {
  return *capabilityType_Accessor;
}

uci::type::AO_CapabilityEnum& AO_TaskBaseType::getCapabilityType() {
  return *capabilityType_Accessor;
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::setCapabilityType(const uci::type::AO_CapabilityEnum& accessor) {
  if (&accessor != capabilityType_Accessor.get()) {
    capabilityType_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::setCapabilityType(uci::type::AO_CapabilityEnum::EnumerationItem value) {
  capabilityType_Accessor->setValue(value);
  return *this;
}


uci::type::AO_CodeType& AO_TaskBaseType::getSupportedCode_() const {
  if (supportedCode_Accessor) {
    return *supportedCode_Accessor;
  }
  throw uci::base::UCIException("Error in getSupportedCode(): An attempt was made to get an optional field that was not enabled, call hasSupportedCode() to determine if it is safe to call getSupportedCode()");
}

const uci::type::AO_CodeType& AO_TaskBaseType::getSupportedCode() const {
  return getSupportedCode_();
}

uci::type::AO_CodeType& AO_TaskBaseType::getSupportedCode() {
  return getSupportedCode_();
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::setSupportedCode(const uci::type::AO_CodeType& accessor) {
  enableSupportedCode();
  if (&accessor != supportedCode_Accessor.get()) {
    supportedCode_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool AO_TaskBaseType::hasSupportedCode() const noexcept {
  return static_cast<bool>(supportedCode_Accessor);
}

uci::type::AO_CodeType& AO_TaskBaseType::enableSupportedCode(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_CodeType : type};
  if ((!supportedCode_Accessor) || (supportedCode_Accessor->getAccessorType() != requestedType)) {
    supportedCode_Accessor = AO_CodeType::create(requestedType);
    if (!supportedCode_Accessor) {
      throw uci::base::UCIException("Error in enableSupportedCode(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *supportedCode_Accessor;
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::clearSupportedCode() noexcept {
  supportedCode_Accessor.reset();
  return *this;
}

uci::type::OpticalCollectionConstraintsType& AO_TaskBaseType::getEmissionConstraints_() const {
  if (emissionConstraints_Accessor) {
    return *emissionConstraints_Accessor;
  }
  throw uci::base::UCIException("Error in getEmissionConstraints(): An attempt was made to get an optional field that was not enabled, call hasEmissionConstraints() to determine if it is safe to call getEmissionConstraints()");
}

const uci::type::OpticalCollectionConstraintsType& AO_TaskBaseType::getEmissionConstraints() const {
  return getEmissionConstraints_();
}

uci::type::OpticalCollectionConstraintsType& AO_TaskBaseType::getEmissionConstraints() {
  return getEmissionConstraints_();
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::setEmissionConstraints(const uci::type::OpticalCollectionConstraintsType& accessor) {
  enableEmissionConstraints(accessor.getAccessorType());
  if (&accessor != emissionConstraints_Accessor.get()) {
    emissionConstraints_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool AO_TaskBaseType::hasEmissionConstraints() const noexcept {
  return static_cast<bool>(emissionConstraints_Accessor);
}

uci::type::OpticalCollectionConstraintsType& AO_TaskBaseType::enableEmissionConstraints(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::opticalCollectionConstraintsType : type};
  if ((!emissionConstraints_Accessor) || (emissionConstraints_Accessor->getAccessorType() != requestedType)) {
    emissionConstraints_Accessor = OpticalCollectionConstraintsType::create(requestedType);
    if (!emissionConstraints_Accessor) {
      throw uci::base::UCIException("Error in enableEmissionConstraints(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emissionConstraints_Accessor;
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::clearEmissionConstraints() noexcept {
  emissionConstraints_Accessor.reset();
  return *this;
}

std::unique_ptr<AO_TaskBaseType> AO_TaskBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::aO_TaskBaseType : type};
  return std::unique_ptr<AO_TaskBaseType>(dynamic_cast<AO_TaskBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace AO_TaskBaseType_Names {

constexpr const char* Extern_Type_Name{"AO_TaskBaseType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* SupportedCode_Name{"SupportedCode"};
constexpr const char* EmissionConstraints_Name{"EmissionConstraints"};

} // namespace AO_TaskBaseType_Names

void AO_TaskBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AO_TaskBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AO_TaskBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AO_TaskBaseType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AO_TaskBaseType_Names::SupportedCode_Name) {
      AO_CodeType::deserialize(valueType.second, accessor.enableSupportedCode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AO_TaskBaseType_Names::EmissionConstraints_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEmissionConstraints(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
}

std::string AO_TaskBaseType::serialize(const uci::type::AO_TaskBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? AO_TaskBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::aO_TaskBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, AO_TaskBaseType_Names::Extern_Type_Name);
    }
    AO_CapabilityEnum::serialize(accessor.getCapabilityType(), node, AO_TaskBaseType_Names::CapabilityType_Name, false);
    if (accessor.hasSupportedCode()) {
      AO_CodeType::serialize(accessor.getSupportedCode(), node, AO_TaskBaseType_Names::SupportedCode_Name);
    }
    if (accessor.hasEmissionConstraints()) {
      OpticalCollectionConstraintsType::serialize(accessor.getEmissionConstraints(), node, AO_TaskBaseType_Names::EmissionConstraints_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::AO_TaskBaseType& AO_TaskBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::AO_TaskBaseType>().release());
}

uci::type::AO_TaskBaseType& AO_TaskBaseType::create(const uci::type::AO_TaskBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::AO_TaskBaseType> newAccessor{boost::make_unique<asb_uci::type::AO_TaskBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void AO_TaskBaseType::destroy(uci::type::AO_TaskBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::AO_TaskBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

