/** @file ConfigurationParameterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ConfigurationParameterType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ConfigurationParameterValueRestrictionsType.h"
#include "../../../include/asb_uci/type/EmptyType.h"
#include "../../../include/asb_uci/type/MessageElementDataTypeEnum.h"
#include "../../../include/asb_uci/type/MissionEnvironmentObjectClassType.h"
#include "../../../include/asb_uci/type/ParameterID_Type.h"
#include "../../../include/asb_uci/type/VisibleString256Type.h"
#include "../../../include/asb_uci/type/VisibleString32Type.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ConfigurationParameterType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ConfigurationParameterValueRestrictionsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EmptyType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MessageElementDataTypeEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionEnvironmentObjectClassType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ParameterID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString256Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/VisibleString32Type.h"
#include "../../../../cppInterface/2.3.2/include/xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ConfigurationParameterType::ConfigurationParameterType()
  : parameterID_Accessor{boost::make_unique<ParameterID_Type>()},
    name_Accessor{boost::make_unique<VisibleString256Type>()},
    value_Accessor{boost::make_unique<VisibleString256Type>()},
    defaultValue_Accessor{boost::make_unique<VisibleString256Type>()},
    type_Accessor{boost::make_unique<MessageElementDataTypeEnum>()} {
}

ConfigurationParameterType::~ConfigurationParameterType() = default;

void ConfigurationParameterType::copy(const uci::type::ConfigurationParameterType& accessor) {
  copyImpl(accessor, false);
}

void ConfigurationParameterType::copyImpl(const uci::type::ConfigurationParameterType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ConfigurationParameterType&>(accessor);
    setParameterID(*(accessorImpl.parameterID_Accessor));
    setName(*(accessorImpl.name_Accessor));
    setValue(*(accessorImpl.value_Accessor));
    setDefaultValue(*(accessorImpl.defaultValue_Accessor));
    setUserModifiable(accessorImpl.userModifiable_Accessor);
    setType(*(accessorImpl.type_Accessor));
    if (accessorImpl.units_Accessor) {
      setUnits(*(accessorImpl.units_Accessor));
    } else {
      units_Accessor.reset();
    }
    if (accessorImpl.typeSpecificRestrictions_Accessor) {
      setTypeSpecificRestrictions(*(accessorImpl.typeSpecificRestrictions_Accessor));
    } else {
      typeSpecificRestrictions_Accessor.reset();
    }
    if (accessorImpl.objectClass_Accessor) {
      setObjectClass(*(accessorImpl.objectClass_Accessor));
    } else {
      objectClass_Accessor.reset();
    }
    if (accessorImpl.missionEnvironment_Accessor) {
      setMissionEnvironment(*(accessorImpl.missionEnvironment_Accessor));
    } else {
      missionEnvironment_Accessor.reset();
    }
  }
}

void ConfigurationParameterType::reset() noexcept {
  parameterID_Accessor->reset();
  name_Accessor->reset();
  value_Accessor->reset();
  defaultValue_Accessor->reset();
  userModifiable_Accessor = false;
  type_Accessor->reset();
  units_Accessor.reset();
  typeSpecificRestrictions_Accessor.reset();
  objectClass_Accessor.reset();
  missionEnvironment_Accessor.reset();
}

const uci::type::ParameterID_Type& ConfigurationParameterType::getParameterID() const {
  return *parameterID_Accessor;
}

uci::type::ParameterID_Type& ConfigurationParameterType::getParameterID() {
  return *parameterID_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setParameterID(const uci::type::ParameterID_Type& accessor) {
  if (&accessor != parameterID_Accessor.get()) {
    parameterID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const asb_uci::type::VisibleString256Type& ConfigurationParameterType::getName() const noexcept {
  return *name_Accessor;
}

asb_uci::type::VisibleString256Type& ConfigurationParameterType::getName() noexcept {
  return *name_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setName(const asb_uci::type::VisibleString256Type& value) {
  return setName(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setName(const std::string& value) {
  return setName(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setName(const char* value) {
  name_Accessor->setStringValue(value);
  return *this;
}

const asb_uci::type::VisibleString256Type& ConfigurationParameterType::getValue() const noexcept {
  return *value_Accessor;
}

asb_uci::type::VisibleString256Type& ConfigurationParameterType::getValue() noexcept {
  return *value_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setValue(const asb_uci::type::VisibleString256Type& value) {
  return setValue(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setValue(const std::string& value) {
  return setValue(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setValue(const char* value) {
  value_Accessor->setStringValue(value);
  return *this;
}

const asb_uci::type::VisibleString256Type& ConfigurationParameterType::getDefaultValue() const noexcept {
  return *defaultValue_Accessor;
}

asb_uci::type::VisibleString256Type& ConfigurationParameterType::getDefaultValue() noexcept {
  return *defaultValue_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setDefaultValue(const asb_uci::type::VisibleString256Type& value) {
  return setDefaultValue(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setDefaultValue(const std::string& value) {
  return setDefaultValue(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setDefaultValue(const char* value) {
  defaultValue_Accessor->setStringValue(value);
  return *this;
}

xs::Boolean ConfigurationParameterType::getUserModifiable() const {
  return userModifiable_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setUserModifiable(xs::Boolean value) {
  userModifiable_Accessor = value;
  return *this;
}


const uci::type::MessageElementDataTypeEnum& ConfigurationParameterType::getType() const {
  return *type_Accessor;
}

uci::type::MessageElementDataTypeEnum& ConfigurationParameterType::getType() {
  return *type_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setType(const uci::type::MessageElementDataTypeEnum& accessor) {
  if (&accessor != type_Accessor.get()) {
    type_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setType(uci::type::MessageElementDataTypeEnum::EnumerationItem value) {
  type_Accessor->setValue(value);
  return *this;
}


uci::type::VisibleString32Type& ConfigurationParameterType::getUnits_() const {
  if (units_Accessor) {
    return *units_Accessor;
  }
  throw uci::base::UCIException("Error in getUnits(): An attempt was made to get an optional field that was not enabled, call hasUnits() to determine if it is safe to call getUnits()");
}

const uci::type::VisibleString32Type& ConfigurationParameterType::getUnits() const {
  return getUnits_();
}

uci::type::VisibleString32Type& ConfigurationParameterType::getUnits() {
  return getUnits_();
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setUnits(const uci::type::VisibleString32Type& value) {
  return setUnits(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setUnits(const std::string& value) {
  return setUnits(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setUnits(const char* value) {
  enableUnits().setStringValue(value);
  return *this;
}

bool ConfigurationParameterType::hasUnits() const noexcept {
  return static_cast<bool>(units_Accessor);
}

uci::type::VisibleString32Type& ConfigurationParameterType::enableUnits(uci::base::accessorType::AccessorType type) {
  if (!units_Accessor) {
    units_Accessor = VisibleString32Type::create(type);
  }
  return *units_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::clearUnits() noexcept {
  units_Accessor.reset();
  return *this;
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterType::getTypeSpecificRestrictions_() const {
  if (typeSpecificRestrictions_Accessor) {
    return *typeSpecificRestrictions_Accessor;
  }
  throw uci::base::UCIException("Error in getTypeSpecificRestrictions(): An attempt was made to get an optional field that was not enabled, call hasTypeSpecificRestrictions() to determine if it is safe to call getTypeSpecificRestrictions()");
}

const uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterType::getTypeSpecificRestrictions() const {
  return getTypeSpecificRestrictions_();
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterType::getTypeSpecificRestrictions() {
  return getTypeSpecificRestrictions_();
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setTypeSpecificRestrictions(const uci::type::ConfigurationParameterValueRestrictionsType& accessor) {
  enableTypeSpecificRestrictions();
  if (&accessor != typeSpecificRestrictions_Accessor.get()) {
    typeSpecificRestrictions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConfigurationParameterType::hasTypeSpecificRestrictions() const noexcept {
  return static_cast<bool>(typeSpecificRestrictions_Accessor);
}

uci::type::ConfigurationParameterValueRestrictionsType& ConfigurationParameterType::enableTypeSpecificRestrictions(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::configurationParameterValueRestrictionsType : type};
  if ((!typeSpecificRestrictions_Accessor) || (typeSpecificRestrictions_Accessor->getAccessorType() != requestedType)) {
    typeSpecificRestrictions_Accessor = ConfigurationParameterValueRestrictionsType::create(requestedType);
    if (!typeSpecificRestrictions_Accessor) {
      throw uci::base::UCIException("Error in enableTypeSpecificRestrictions(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *typeSpecificRestrictions_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::clearTypeSpecificRestrictions() noexcept {
  typeSpecificRestrictions_Accessor.reset();
  return *this;
}

uci::type::MissionEnvironmentObjectClassType& ConfigurationParameterType::getObjectClass_() const {
  if (objectClass_Accessor) {
    return *objectClass_Accessor;
  }
  throw uci::base::UCIException("Error in getObjectClass(): An attempt was made to get an optional field that was not enabled, call hasObjectClass() to determine if it is safe to call getObjectClass()");
}

const uci::type::MissionEnvironmentObjectClassType& ConfigurationParameterType::getObjectClass() const {
  return getObjectClass_();
}

uci::type::MissionEnvironmentObjectClassType& ConfigurationParameterType::getObjectClass() {
  return getObjectClass_();
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setObjectClass(const uci::type::MissionEnvironmentObjectClassType& accessor) {
  enableObjectClass();
  if (&accessor != objectClass_Accessor.get()) {
    objectClass_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ConfigurationParameterType::hasObjectClass() const noexcept {
  return static_cast<bool>(objectClass_Accessor);
}

uci::type::MissionEnvironmentObjectClassType& ConfigurationParameterType::enableObjectClass(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionEnvironmentObjectClassType : type};
  if ((!objectClass_Accessor) || (objectClass_Accessor->getAccessorType() != requestedType)) {
    objectClass_Accessor = MissionEnvironmentObjectClassType::create(requestedType);
    if (!objectClass_Accessor) {
      throw uci::base::UCIException("Error in enableObjectClass(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *objectClass_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::clearObjectClass() noexcept {
  objectClass_Accessor.reset();
  return *this;
}

uci::type::EmptyType& ConfigurationParameterType::getMissionEnvironment_() const {
  if (missionEnvironment_Accessor) {
    return *missionEnvironment_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionEnvironment(): An attempt was made to get an optional field that was not enabled, call hasMissionEnvironment() to determine if it is safe to call getMissionEnvironment()");
}

const uci::type::EmptyType& ConfigurationParameterType::getMissionEnvironment() const {
  return getMissionEnvironment_();
}

uci::type::EmptyType& ConfigurationParameterType::getMissionEnvironment() {
  return getMissionEnvironment_();
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setMissionEnvironment(const uci::type::EmptyType& value) {
  return setMissionEnvironment(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setMissionEnvironment(const std::string& value) {
  return setMissionEnvironment(value.c_str());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::setMissionEnvironment(const char* value) {
  enableMissionEnvironment().setStringValue(value);
  return *this;
}

bool ConfigurationParameterType::hasMissionEnvironment() const noexcept {
  return static_cast<bool>(missionEnvironment_Accessor);
}

uci::type::EmptyType& ConfigurationParameterType::enableMissionEnvironment(uci::base::accessorType::AccessorType type) {
  if (!missionEnvironment_Accessor) {
    missionEnvironment_Accessor = EmptyType::create(type);
  }
  return *missionEnvironment_Accessor;
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::clearMissionEnvironment() noexcept {
  missionEnvironment_Accessor.reset();
  return *this;
}

std::unique_ptr<ConfigurationParameterType> ConfigurationParameterType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::configurationParameterType : type};
  return (requestedType == uci::type::accessorType::configurationParameterType) ? boost::make_unique<ConfigurationParameterType>() : nullptr;
}

/**  */
namespace ConfigurationParameterType_Names {

constexpr const char* Extern_Type_Name{"ConfigurationParameterType"};
constexpr const char* ParameterID_Name{"ParameterID"};
constexpr const char* Name_Name{"Name"};
constexpr const char* Value_Name{"Value"};
constexpr const char* DefaultValue_Name{"DefaultValue"};
constexpr const char* UserModifiable_Name{"UserModifiable"};
constexpr const char* Type_Name{"Type"};
constexpr const char* Units_Name{"Units"};
constexpr const char* TypeSpecificRestrictions_Name{"TypeSpecificRestrictions"};
constexpr const char* ObjectClass_Name{"ObjectClass"};
constexpr const char* MissionEnvironment_Name{"MissionEnvironment"};

} // namespace ConfigurationParameterType_Names

void ConfigurationParameterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ConfigurationParameterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ConfigurationParameterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::ParameterID_Name) {
      ParameterID_Type::deserialize(valueType.second, accessor.getParameterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::Name_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setName(*value);
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::Value_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setValue(*value);
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::DefaultValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDefaultValue(*value);
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::UserModifiable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUserModifiable(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::Units_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnits(*value);
      }
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::TypeSpecificRestrictions_Name) {
      ConfigurationParameterValueRestrictionsType::deserialize(valueType.second, accessor.enableTypeSpecificRestrictions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::ObjectClass_Name) {
      MissionEnvironmentObjectClassType::deserialize(valueType.second, accessor.enableObjectClass(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ConfigurationParameterType_Names::MissionEnvironment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionEnvironment(*value);
      }
    }
  }
}

std::string ConfigurationParameterType::serialize(const uci::type::ConfigurationParameterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ConfigurationParameterType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ConfigurationParameterType_Names::Extern_Type_Name);
  }
  ParameterID_Type::serialize(accessor.getParameterID(), node, ConfigurationParameterType_Names::ParameterID_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getName(), node, ConfigurationParameterType_Names::Name_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getValue(), node, ConfigurationParameterType_Names::Value_Name);
  asb_uci::util::SerializationHelpers::serializeString(accessor.getDefaultValue(), node, ConfigurationParameterType_Names::DefaultValue_Name);
  asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUserModifiable(), node, ConfigurationParameterType_Names::UserModifiable_Name);
  MessageElementDataTypeEnum::serialize(accessor.getType(), node, ConfigurationParameterType_Names::Type_Name, false);
  if (accessor.hasUnits()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getUnits(), node, ConfigurationParameterType_Names::Units_Name);
  }
  if (accessor.hasTypeSpecificRestrictions()) {
    ConfigurationParameterValueRestrictionsType::serialize(accessor.getTypeSpecificRestrictions(), node, ConfigurationParameterType_Names::TypeSpecificRestrictions_Name);
  }
  if (accessor.hasObjectClass()) {
    MissionEnvironmentObjectClassType::serialize(accessor.getObjectClass(), node, ConfigurationParameterType_Names::ObjectClass_Name);
  }
  if (accessor.hasMissionEnvironment()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMissionEnvironment(), node, ConfigurationParameterType_Names::MissionEnvironment_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ConfigurationParameterType& ConfigurationParameterType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ConfigurationParameterType>().release());
}

uci::type::ConfigurationParameterType& ConfigurationParameterType::create(const uci::type::ConfigurationParameterType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ConfigurationParameterType> newAccessor{boost::make_unique<asb_uci::type::ConfigurationParameterType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ConfigurationParameterType::destroy(uci::type::ConfigurationParameterType& accessor) {
  delete dynamic_cast<asb_uci::type::ConfigurationParameterType*>(&accessor);
}

} // namespace type

} // namespace uci

