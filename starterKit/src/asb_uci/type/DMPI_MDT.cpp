/** @file DMPI_MDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/DMPI_MDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ComparableRankingType.h"
#include "../../../include/asb_uci/type/CreationSourceEnum.h"
#include "../../../include/asb_uci/type/DMPI_ID_Type.h"
#include "../../../include/asb_uci/type/DMPI_TargetType.h"
#include "../../../include/asb_uci/type/DMPI_TraceabilityType.h"
#include "../../../include/asb_uci/type/DataRecordBaseType.h"
#include "../../../include/asb_uci/type/RemarksType.h"
#include "../../../include/asb_uci/type/WeaponeeringType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ComparableRankingType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/CreationSourceEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_ID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_MDT.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_TargetType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DMPI_TraceabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RemarksType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/WeaponeeringType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

DMPI_MDT::DMPI_MDT()
  : dMPI_ID_Accessor{boost::make_unique<DMPI_ID_Type>()},
    target_Accessor{boost::make_unique<DMPI_TargetType>()} {
}

DMPI_MDT::~DMPI_MDT() = default;

void DMPI_MDT::copy(const uci::type::DMPI_MDT& accessor) {
  copyImpl(accessor, false);
}

void DMPI_MDT::copyImpl(const uci::type::DMPI_MDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    DataRecordBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const DMPI_MDT&>(accessor);
    setDMPI_ID(*(accessorImpl.dMPI_ID_Accessor));
    setTarget(*(accessorImpl.target_Accessor));
    if (accessorImpl.traceability_Accessor) {
      setTraceability(*(accessorImpl.traceability_Accessor));
    } else {
      traceability_Accessor.reset();
    }
    if (accessorImpl.remarks_Accessor) {
      setRemarks(*(accessorImpl.remarks_Accessor));
    } else {
      remarks_Accessor.reset();
    }
    if (accessorImpl.weaponeering_Accessor) {
      setWeaponeering(*(accessorImpl.weaponeering_Accessor));
    } else {
      weaponeering_Accessor.reset();
    }
    if (accessorImpl.source_Accessor) {
      setSource(*(accessorImpl.source_Accessor));
    } else {
      source_Accessor.reset();
    }
    if (accessorImpl.ranking_Accessor) {
      setRanking(*(accessorImpl.ranking_Accessor));
    } else {
      ranking_Accessor.reset();
    }
  }
}

void DMPI_MDT::reset() noexcept {
  DataRecordBaseType::reset();
  dMPI_ID_Accessor->reset();
  target_Accessor->reset();
  traceability_Accessor.reset();
  remarks_Accessor.reset();
  weaponeering_Accessor.reset();
  source_Accessor.reset();
  ranking_Accessor.reset();
}

const uci::type::DMPI_ID_Type& DMPI_MDT::getDMPI_ID() const {
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_ID_Type& DMPI_MDT::getDMPI_ID() {
  return *dMPI_ID_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::setDMPI_ID(const uci::type::DMPI_ID_Type& accessor) {
  if (&accessor != dMPI_ID_Accessor.get()) {
    dMPI_ID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::DMPI_TargetType& DMPI_MDT::getTarget() const {
  return *target_Accessor;
}

uci::type::DMPI_TargetType& DMPI_MDT::getTarget() {
  return *target_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::setTarget(const uci::type::DMPI_TargetType& accessor) {
  if (&accessor != target_Accessor.get()) {
    target_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DMPI_TraceabilityType& DMPI_MDT::getTraceability_() const {
  if (traceability_Accessor) {
    return *traceability_Accessor;
  }
  throw uci::base::UCIException("Error in getTraceability(): An attempt was made to get an optional field that was not enabled, call hasTraceability() to determine if it is safe to call getTraceability()");
}

const uci::type::DMPI_TraceabilityType& DMPI_MDT::getTraceability() const {
  return getTraceability_();
}

uci::type::DMPI_TraceabilityType& DMPI_MDT::getTraceability() {
  return getTraceability_();
}

uci::type::DMPI_MDT& DMPI_MDT::setTraceability(const uci::type::DMPI_TraceabilityType& accessor) {
  enableTraceability();
  if (&accessor != traceability_Accessor.get()) {
    traceability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_MDT::hasTraceability() const noexcept {
  return static_cast<bool>(traceability_Accessor);
}

uci::type::DMPI_TraceabilityType& DMPI_MDT::enableTraceability(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_TraceabilityType : type};
  if ((!traceability_Accessor) || (traceability_Accessor->getAccessorType() != requestedType)) {
    traceability_Accessor = DMPI_TraceabilityType::create(requestedType);
    if (!traceability_Accessor) {
      throw uci::base::UCIException("Error in enableTraceability(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *traceability_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::clearTraceability() noexcept {
  traceability_Accessor.reset();
  return *this;
}

uci::type::RemarksType& DMPI_MDT::getRemarks_() const {
  if (remarks_Accessor) {
    return *remarks_Accessor;
  }
  throw uci::base::UCIException("Error in getRemarks(): An attempt was made to get an optional field that was not enabled, call hasRemarks() to determine if it is safe to call getRemarks()");
}

const uci::type::RemarksType& DMPI_MDT::getRemarks() const {
  return getRemarks_();
}

uci::type::RemarksType& DMPI_MDT::getRemarks() {
  return getRemarks_();
}

uci::type::DMPI_MDT& DMPI_MDT::setRemarks(const uci::type::RemarksType& accessor) {
  enableRemarks();
  if (&accessor != remarks_Accessor.get()) {
    remarks_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_MDT::hasRemarks() const noexcept {
  return static_cast<bool>(remarks_Accessor);
}

uci::type::RemarksType& DMPI_MDT::enableRemarks(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::remarksType : type};
  if ((!remarks_Accessor) || (remarks_Accessor->getAccessorType() != requestedType)) {
    remarks_Accessor = RemarksType::create(requestedType);
    if (!remarks_Accessor) {
      throw uci::base::UCIException("Error in enableRemarks(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *remarks_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::clearRemarks() noexcept {
  remarks_Accessor.reset();
  return *this;
}

uci::type::WeaponeeringType& DMPI_MDT::getWeaponeering_() const {
  if (weaponeering_Accessor) {
    return *weaponeering_Accessor;
  }
  throw uci::base::UCIException("Error in getWeaponeering(): An attempt was made to get an optional field that was not enabled, call hasWeaponeering() to determine if it is safe to call getWeaponeering()");
}

const uci::type::WeaponeeringType& DMPI_MDT::getWeaponeering() const {
  return getWeaponeering_();
}

uci::type::WeaponeeringType& DMPI_MDT::getWeaponeering() {
  return getWeaponeering_();
}

uci::type::DMPI_MDT& DMPI_MDT::setWeaponeering(const uci::type::WeaponeeringType& accessor) {
  enableWeaponeering(accessor.getAccessorType());
  if (&accessor != weaponeering_Accessor.get()) {
    weaponeering_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool DMPI_MDT::hasWeaponeering() const noexcept {
  return static_cast<bool>(weaponeering_Accessor);
}

uci::type::WeaponeeringType& DMPI_MDT::enableWeaponeering(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::weaponeeringType : type};
  if ((!weaponeering_Accessor) || (weaponeering_Accessor->getAccessorType() != requestedType)) {
    weaponeering_Accessor = WeaponeeringType::create(requestedType);
    if (!weaponeering_Accessor) {
      throw uci::base::UCIException("Error in enableWeaponeering(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *weaponeering_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::clearWeaponeering() noexcept {
  weaponeering_Accessor.reset();
  return *this;
}

uci::type::CreationSourceEnum& DMPI_MDT::getSource_() const {
  if (source_Accessor) {
    return *source_Accessor;
  }
  throw uci::base::UCIException("Error in getSource(): An attempt was made to get an optional field that was not enabled, call hasSource() to determine if it is safe to call getSource()");
}

const uci::type::CreationSourceEnum& DMPI_MDT::getSource() const {
  return getSource_();
}

uci::type::CreationSourceEnum& DMPI_MDT::getSource() {
  return getSource_();
}

uci::type::DMPI_MDT& DMPI_MDT::setSource(const uci::type::CreationSourceEnum& accessor) {
  enableSource();
  if (&accessor != source_Accessor.get()) {
    source_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DMPI_MDT& DMPI_MDT::setSource(const uci::type::CreationSourceEnum::EnumerationItem value) {
  enableSource().setValue(value);
  return *this;
}

bool DMPI_MDT::hasSource() const noexcept {
  return static_cast<bool>(source_Accessor);
}

uci::type::CreationSourceEnum& DMPI_MDT::enableSource(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::creationSourceEnum : type};
  if ((!source_Accessor) || (source_Accessor->getAccessorType() != requestedType)) {
    source_Accessor = CreationSourceEnum::create(requestedType);
    if (!source_Accessor) {
      throw uci::base::UCIException("Error in enableSource(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *source_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::clearSource() noexcept {
  source_Accessor.reset();
  return *this;
}

uci::type::ComparableRankingType& DMPI_MDT::getRanking_() const {
  if (ranking_Accessor) {
    return *ranking_Accessor;
  }
  throw uci::base::UCIException("Error in getRanking(): An attempt was made to get an optional field that was not enabled, call hasRanking() to determine if it is safe to call getRanking()");
}

const uci::type::ComparableRankingType& DMPI_MDT::getRanking() const {
  return getRanking_();
}

uci::type::ComparableRankingType& DMPI_MDT::getRanking() {
  return getRanking_();
}

uci::type::DMPI_MDT& DMPI_MDT::setRanking(const uci::type::ComparableRankingType& accessor) {
  enableRanking();
  if (&accessor != ranking_Accessor.get()) {
    ranking_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool DMPI_MDT::hasRanking() const noexcept {
  return static_cast<bool>(ranking_Accessor);
}

uci::type::ComparableRankingType& DMPI_MDT::enableRanking(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::comparableRankingType : type};
  if ((!ranking_Accessor) || (ranking_Accessor->getAccessorType() != requestedType)) {
    ranking_Accessor = ComparableRankingType::create(requestedType);
    if (!ranking_Accessor) {
      throw uci::base::UCIException("Error in enableRanking(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *ranking_Accessor;
}

uci::type::DMPI_MDT& DMPI_MDT::clearRanking() noexcept {
  ranking_Accessor.reset();
  return *this;
}

std::unique_ptr<DMPI_MDT> DMPI_MDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dMPI_MDT : type};
  return (requestedType == uci::type::accessorType::dMPI_MDT) ? boost::make_unique<DMPI_MDT>() : nullptr;
}

/**  */
namespace DMPI_MDT_Names {

constexpr const char* Extern_Type_Name{"DMPI_MDT"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* Target_Name{"Target"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* Remarks_Name{"Remarks"};
constexpr const char* Weaponeering_Name{"Weaponeering"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Ranking_Name{"Ranking"};

} // namespace DMPI_MDT_Names

void DMPI_MDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_MDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_MDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::DMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.getDMPI_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::Target_Name) {
      DMPI_TargetType::deserialize(valueType.second, accessor.getTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::Traceability_Name) {
      DMPI_TraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::Remarks_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableRemarks(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::Weaponeering_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWeaponeering(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_MDT_Names::Ranking_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.enableRanking(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string DMPI_MDT::serialize(const uci::type::DMPI_MDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? DMPI_MDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_MDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  DMPI_ID_Type::serialize(accessor.getDMPI_ID(), node, DMPI_MDT_Names::DMPI_ID_Name);
  DMPI_TargetType::serialize(accessor.getTarget(), node, DMPI_MDT_Names::Target_Name);
  if (accessor.hasTraceability()) {
    DMPI_TraceabilityType::serialize(accessor.getTraceability(), node, DMPI_MDT_Names::Traceability_Name);
  }
  if (accessor.hasRemarks()) {
    RemarksType::serialize(accessor.getRemarks(), node, DMPI_MDT_Names::Remarks_Name);
  }
  if (accessor.hasWeaponeering()) {
    WeaponeeringType::serialize(accessor.getWeaponeering(), node, DMPI_MDT_Names::Weaponeering_Name);
  }
  if (accessor.hasSource()) {
    CreationSourceEnum::serialize(accessor.getSource(), node, DMPI_MDT_Names::Source_Name, false);
  }
  if (accessor.hasRanking()) {
    ComparableRankingType::serialize(accessor.getRanking(), node, DMPI_MDT_Names::Ranking_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::DMPI_MDT& DMPI_MDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::DMPI_MDT>().release());
}

uci::type::DMPI_MDT& DMPI_MDT::create(const uci::type::DMPI_MDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::DMPI_MDT> newAccessor{boost::make_unique<asb_uci::type::DMPI_MDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void DMPI_MDT::destroy(uci::type::DMPI_MDT& accessor) {
  delete dynamic_cast<asb_uci::type::DMPI_MDT*>(&accessor);
}

} // namespace type

} // namespace uci

