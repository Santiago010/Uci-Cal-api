/** @file PlanningInterfaceDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/PlanningInterfaceDetailsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/ActionPlanProcessType.h"
#include "../../../include/asb_uci/type/ActivityPlanProcessType.h"
#include "../../../include/asb_uci/type/EffectPlanProcessType.h"
#include "../../../include/asb_uci/type/MissionPlanProcessType.h"
#include "../../../include/asb_uci/type/OrbitPlanProcessType.h"
#include "../../../include/asb_uci/type/ResponsePlanProcessType.h"
#include "../../../include/asb_uci/type/RoutePlanProcessType.h"
#include "../../../include/asb_uci/type/TaskPlanProcessType.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActionPlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ActivityPlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EffectPlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/MissionPlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitPlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/PlanningInterfaceDetailsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ResponsePlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/RoutePlanProcessType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/TaskPlanProcessType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PlanningInterfaceDetailsType::PlanningInterfaceDetailsType() = default;

PlanningInterfaceDetailsType::~PlanningInterfaceDetailsType() = default;

void PlanningInterfaceDetailsType::copy(const uci::type::PlanningInterfaceDetailsType& accessor) {
  copyImpl(accessor, false);
}

void PlanningInterfaceDetailsType::copyImpl(const uci::type::PlanningInterfaceDetailsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PlanningInterfaceDetailsType&>(accessor);
    if (accessorImpl.missionPlan_Accessor) {
      setMissionPlan(*(accessorImpl.missionPlan_Accessor));
    } else {
      missionPlan_Accessor.reset();
    }
    if (accessorImpl.taskPlan_Accessor) {
      setTaskPlan(*(accessorImpl.taskPlan_Accessor));
    } else {
      taskPlan_Accessor.reset();
    }
    if (accessorImpl.routePlan_Accessor) {
      setRoutePlan(*(accessorImpl.routePlan_Accessor));
    } else {
      routePlan_Accessor.reset();
    }
    if (accessorImpl.routeActivityPlan_Accessor) {
      setRouteActivityPlan(*(accessorImpl.routeActivityPlan_Accessor));
    } else {
      routeActivityPlan_Accessor.reset();
    }
    if (accessorImpl.activityPlan_Accessor) {
      setActivityPlan(*(accessorImpl.activityPlan_Accessor));
    } else {
      activityPlan_Accessor.reset();
    }
    if (accessorImpl.orbitPlan_Accessor) {
      setOrbitPlan(*(accessorImpl.orbitPlan_Accessor));
    } else {
      orbitPlan_Accessor.reset();
    }
    if (accessorImpl.orbitActivityPlan_Accessor) {
      setOrbitActivityPlan(*(accessorImpl.orbitActivityPlan_Accessor));
    } else {
      orbitActivityPlan_Accessor.reset();
    }
    if (accessorImpl.effectPlan_Accessor) {
      setEffectPlan(*(accessorImpl.effectPlan_Accessor));
    } else {
      effectPlan_Accessor.reset();
    }
    if (accessorImpl.actionPlanProcess_Accessor) {
      setActionPlanProcess(*(accessorImpl.actionPlanProcess_Accessor));
    } else {
      actionPlanProcess_Accessor.reset();
    }
    if (accessorImpl.responsePlanProcess_Accessor) {
      setResponsePlanProcess(*(accessorImpl.responsePlanProcess_Accessor));
    } else {
      responsePlanProcess_Accessor.reset();
    }
  }
}

void PlanningInterfaceDetailsType::reset() noexcept {
  missionPlan_Accessor.reset();
  taskPlan_Accessor.reset();
  routePlan_Accessor.reset();
  routeActivityPlan_Accessor.reset();
  activityPlan_Accessor.reset();
  orbitPlan_Accessor.reset();
  orbitActivityPlan_Accessor.reset();
  effectPlan_Accessor.reset();
  actionPlanProcess_Accessor.reset();
  responsePlanProcess_Accessor.reset();
}

uci::type::MissionPlanProcessType& PlanningInterfaceDetailsType::getMissionPlan_() const {
  if (missionPlan_Accessor) {
    return *missionPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getMissionPlan(): An attempt was made to get an optional field that was not enabled, call hasMissionPlan() to determine if it is safe to call getMissionPlan()");
}

const uci::type::MissionPlanProcessType& PlanningInterfaceDetailsType::getMissionPlan() const {
  return getMissionPlan_();
}

uci::type::MissionPlanProcessType& PlanningInterfaceDetailsType::getMissionPlan() {
  return getMissionPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setMissionPlan(const uci::type::MissionPlanProcessType& accessor) {
  enableMissionPlan();
  if (&accessor != missionPlan_Accessor.get()) {
    missionPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasMissionPlan() const noexcept {
  return static_cast<bool>(missionPlan_Accessor);
}

uci::type::MissionPlanProcessType& PlanningInterfaceDetailsType::enableMissionPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::missionPlanProcessType : type};
  if ((!missionPlan_Accessor) || (missionPlan_Accessor->getAccessorType() != requestedType)) {
    missionPlan_Accessor = MissionPlanProcessType::create(requestedType);
    if (!missionPlan_Accessor) {
      throw uci::base::UCIException("Error in enableMissionPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *missionPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearMissionPlan() noexcept {
  missionPlan_Accessor.reset();
  return *this;
}

uci::type::TaskPlanProcessType& PlanningInterfaceDetailsType::getTaskPlan_() const {
  if (taskPlan_Accessor) {
    return *taskPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getTaskPlan(): An attempt was made to get an optional field that was not enabled, call hasTaskPlan() to determine if it is safe to call getTaskPlan()");
}

const uci::type::TaskPlanProcessType& PlanningInterfaceDetailsType::getTaskPlan() const {
  return getTaskPlan_();
}

uci::type::TaskPlanProcessType& PlanningInterfaceDetailsType::getTaskPlan() {
  return getTaskPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setTaskPlan(const uci::type::TaskPlanProcessType& accessor) {
  enableTaskPlan();
  if (&accessor != taskPlan_Accessor.get()) {
    taskPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasTaskPlan() const noexcept {
  return static_cast<bool>(taskPlan_Accessor);
}

uci::type::TaskPlanProcessType& PlanningInterfaceDetailsType::enableTaskPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::taskPlanProcessType : type};
  if ((!taskPlan_Accessor) || (taskPlan_Accessor->getAccessorType() != requestedType)) {
    taskPlan_Accessor = TaskPlanProcessType::create(requestedType);
    if (!taskPlan_Accessor) {
      throw uci::base::UCIException("Error in enableTaskPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *taskPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearTaskPlan() noexcept {
  taskPlan_Accessor.reset();
  return *this;
}

uci::type::RoutePlanProcessType& PlanningInterfaceDetailsType::getRoutePlan_() const {
  if (routePlan_Accessor) {
    return *routePlan_Accessor;
  }
  throw uci::base::UCIException("Error in getRoutePlan(): An attempt was made to get an optional field that was not enabled, call hasRoutePlan() to determine if it is safe to call getRoutePlan()");
}

const uci::type::RoutePlanProcessType& PlanningInterfaceDetailsType::getRoutePlan() const {
  return getRoutePlan_();
}

uci::type::RoutePlanProcessType& PlanningInterfaceDetailsType::getRoutePlan() {
  return getRoutePlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setRoutePlan(const uci::type::RoutePlanProcessType& accessor) {
  enableRoutePlan();
  if (&accessor != routePlan_Accessor.get()) {
    routePlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasRoutePlan() const noexcept {
  return static_cast<bool>(routePlan_Accessor);
}

uci::type::RoutePlanProcessType& PlanningInterfaceDetailsType::enableRoutePlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::routePlanProcessType : type};
  if ((!routePlan_Accessor) || (routePlan_Accessor->getAccessorType() != requestedType)) {
    routePlan_Accessor = RoutePlanProcessType::create(requestedType);
    if (!routePlan_Accessor) {
      throw uci::base::UCIException("Error in enableRoutePlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routePlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearRoutePlan() noexcept {
  routePlan_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getRouteActivityPlan_() const {
  if (routeActivityPlan_Accessor) {
    return *routeActivityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getRouteActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasRouteActivityPlan() to determine if it is safe to call getRouteActivityPlan()");
}

const uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getRouteActivityPlan() const {
  return getRouteActivityPlan_();
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getRouteActivityPlan() {
  return getRouteActivityPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setRouteActivityPlan(const uci::type::ActivityPlanProcessType& accessor) {
  enableRouteActivityPlan();
  if (&accessor != routeActivityPlan_Accessor.get()) {
    routeActivityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasRouteActivityPlan() const noexcept {
  return static_cast<bool>(routeActivityPlan_Accessor);
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::enableRouteActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanProcessType : type};
  if ((!routeActivityPlan_Accessor) || (routeActivityPlan_Accessor->getAccessorType() != requestedType)) {
    routeActivityPlan_Accessor = ActivityPlanProcessType::create(requestedType);
    if (!routeActivityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableRouteActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *routeActivityPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearRouteActivityPlan() noexcept {
  routeActivityPlan_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getActivityPlan_() const {
  if (activityPlan_Accessor) {
    return *activityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasActivityPlan() to determine if it is safe to call getActivityPlan()");
}

const uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getActivityPlan() const {
  return getActivityPlan_();
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getActivityPlan() {
  return getActivityPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setActivityPlan(const uci::type::ActivityPlanProcessType& accessor) {
  enableActivityPlan();
  if (&accessor != activityPlan_Accessor.get()) {
    activityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasActivityPlan() const noexcept {
  return static_cast<bool>(activityPlan_Accessor);
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::enableActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanProcessType : type};
  if ((!activityPlan_Accessor) || (activityPlan_Accessor->getAccessorType() != requestedType)) {
    activityPlan_Accessor = ActivityPlanProcessType::create(requestedType);
    if (!activityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *activityPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearActivityPlan() noexcept {
  activityPlan_Accessor.reset();
  return *this;
}

uci::type::OrbitPlanProcessType& PlanningInterfaceDetailsType::getOrbitPlan_() const {
  if (orbitPlan_Accessor) {
    return *orbitPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitPlan(): An attempt was made to get an optional field that was not enabled, call hasOrbitPlan() to determine if it is safe to call getOrbitPlan()");
}

const uci::type::OrbitPlanProcessType& PlanningInterfaceDetailsType::getOrbitPlan() const {
  return getOrbitPlan_();
}

uci::type::OrbitPlanProcessType& PlanningInterfaceDetailsType::getOrbitPlan() {
  return getOrbitPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setOrbitPlan(const uci::type::OrbitPlanProcessType& accessor) {
  enableOrbitPlan();
  if (&accessor != orbitPlan_Accessor.get()) {
    orbitPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasOrbitPlan() const noexcept {
  return static_cast<bool>(orbitPlan_Accessor);
}

uci::type::OrbitPlanProcessType& PlanningInterfaceDetailsType::enableOrbitPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitPlanProcessType : type};
  if ((!orbitPlan_Accessor) || (orbitPlan_Accessor->getAccessorType() != requestedType)) {
    orbitPlan_Accessor = OrbitPlanProcessType::create(requestedType);
    if (!orbitPlan_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearOrbitPlan() noexcept {
  orbitPlan_Accessor.reset();
  return *this;
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getOrbitActivityPlan_() const {
  if (orbitActivityPlan_Accessor) {
    return *orbitActivityPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getOrbitActivityPlan(): An attempt was made to get an optional field that was not enabled, call hasOrbitActivityPlan() to determine if it is safe to call getOrbitActivityPlan()");
}

const uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getOrbitActivityPlan() const {
  return getOrbitActivityPlan_();
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::getOrbitActivityPlan() {
  return getOrbitActivityPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setOrbitActivityPlan(const uci::type::ActivityPlanProcessType& accessor) {
  enableOrbitActivityPlan();
  if (&accessor != orbitActivityPlan_Accessor.get()) {
    orbitActivityPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasOrbitActivityPlan() const noexcept {
  return static_cast<bool>(orbitActivityPlan_Accessor);
}

uci::type::ActivityPlanProcessType& PlanningInterfaceDetailsType::enableOrbitActivityPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::activityPlanProcessType : type};
  if ((!orbitActivityPlan_Accessor) || (orbitActivityPlan_Accessor->getAccessorType() != requestedType)) {
    orbitActivityPlan_Accessor = ActivityPlanProcessType::create(requestedType);
    if (!orbitActivityPlan_Accessor) {
      throw uci::base::UCIException("Error in enableOrbitActivityPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *orbitActivityPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearOrbitActivityPlan() noexcept {
  orbitActivityPlan_Accessor.reset();
  return *this;
}

uci::type::EffectPlanProcessType& PlanningInterfaceDetailsType::getEffectPlan_() const {
  if (effectPlan_Accessor) {
    return *effectPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectPlan(): An attempt was made to get an optional field that was not enabled, call hasEffectPlan() to determine if it is safe to call getEffectPlan()");
}

const uci::type::EffectPlanProcessType& PlanningInterfaceDetailsType::getEffectPlan() const {
  return getEffectPlan_();
}

uci::type::EffectPlanProcessType& PlanningInterfaceDetailsType::getEffectPlan() {
  return getEffectPlan_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setEffectPlan(const uci::type::EffectPlanProcessType& accessor) {
  enableEffectPlan();
  if (&accessor != effectPlan_Accessor.get()) {
    effectPlan_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasEffectPlan() const noexcept {
  return static_cast<bool>(effectPlan_Accessor);
}

uci::type::EffectPlanProcessType& PlanningInterfaceDetailsType::enableEffectPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::effectPlanProcessType : type};
  if ((!effectPlan_Accessor) || (effectPlan_Accessor->getAccessorType() != requestedType)) {
    effectPlan_Accessor = EffectPlanProcessType::create(requestedType);
    if (!effectPlan_Accessor) {
      throw uci::base::UCIException("Error in enableEffectPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *effectPlan_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearEffectPlan() noexcept {
  effectPlan_Accessor.reset();
  return *this;
}

uci::type::ActionPlanProcessType& PlanningInterfaceDetailsType::getActionPlanProcess_() const {
  if (actionPlanProcess_Accessor) {
    return *actionPlanProcess_Accessor;
  }
  throw uci::base::UCIException("Error in getActionPlanProcess(): An attempt was made to get an optional field that was not enabled, call hasActionPlanProcess() to determine if it is safe to call getActionPlanProcess()");
}

const uci::type::ActionPlanProcessType& PlanningInterfaceDetailsType::getActionPlanProcess() const {
  return getActionPlanProcess_();
}

uci::type::ActionPlanProcessType& PlanningInterfaceDetailsType::getActionPlanProcess() {
  return getActionPlanProcess_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setActionPlanProcess(const uci::type::ActionPlanProcessType& accessor) {
  enableActionPlanProcess();
  if (&accessor != actionPlanProcess_Accessor.get()) {
    actionPlanProcess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasActionPlanProcess() const noexcept {
  return static_cast<bool>(actionPlanProcess_Accessor);
}

uci::type::ActionPlanProcessType& PlanningInterfaceDetailsType::enableActionPlanProcess(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::actionPlanProcessType : type};
  if ((!actionPlanProcess_Accessor) || (actionPlanProcess_Accessor->getAccessorType() != requestedType)) {
    actionPlanProcess_Accessor = ActionPlanProcessType::create(requestedType);
    if (!actionPlanProcess_Accessor) {
      throw uci::base::UCIException("Error in enableActionPlanProcess(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *actionPlanProcess_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearActionPlanProcess() noexcept {
  actionPlanProcess_Accessor.reset();
  return *this;
}

uci::type::ResponsePlanProcessType& PlanningInterfaceDetailsType::getResponsePlanProcess_() const {
  if (responsePlanProcess_Accessor) {
    return *responsePlanProcess_Accessor;
  }
  throw uci::base::UCIException("Error in getResponsePlanProcess(): An attempt was made to get an optional field that was not enabled, call hasResponsePlanProcess() to determine if it is safe to call getResponsePlanProcess()");
}

const uci::type::ResponsePlanProcessType& PlanningInterfaceDetailsType::getResponsePlanProcess() const {
  return getResponsePlanProcess_();
}

uci::type::ResponsePlanProcessType& PlanningInterfaceDetailsType::getResponsePlanProcess() {
  return getResponsePlanProcess_();
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::setResponsePlanProcess(const uci::type::ResponsePlanProcessType& accessor) {
  enableResponsePlanProcess();
  if (&accessor != responsePlanProcess_Accessor.get()) {
    responsePlanProcess_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PlanningInterfaceDetailsType::hasResponsePlanProcess() const noexcept {
  return static_cast<bool>(responsePlanProcess_Accessor);
}

uci::type::ResponsePlanProcessType& PlanningInterfaceDetailsType::enableResponsePlanProcess(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::responsePlanProcessType : type};
  if ((!responsePlanProcess_Accessor) || (responsePlanProcess_Accessor->getAccessorType() != requestedType)) {
    responsePlanProcess_Accessor = ResponsePlanProcessType::create(requestedType);
    if (!responsePlanProcess_Accessor) {
      throw uci::base::UCIException("Error in enableResponsePlanProcess(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *responsePlanProcess_Accessor;
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::clearResponsePlanProcess() noexcept {
  responsePlanProcess_Accessor.reset();
  return *this;
}

std::unique_ptr<PlanningInterfaceDetailsType> PlanningInterfaceDetailsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::planningInterfaceDetailsType : type};
  return (requestedType == uci::type::accessorType::planningInterfaceDetailsType) ? boost::make_unique<PlanningInterfaceDetailsType>() : nullptr;
}

/**  */
namespace PlanningInterfaceDetailsType_Names {

constexpr const char* Extern_Type_Name{"PlanningInterfaceDetailsType"};
constexpr const char* MissionPlan_Name{"MissionPlan"};
constexpr const char* TaskPlan_Name{"TaskPlan"};
constexpr const char* RoutePlan_Name{"RoutePlan"};
constexpr const char* RouteActivityPlan_Name{"RouteActivityPlan"};
constexpr const char* ActivityPlan_Name{"ActivityPlan"};
constexpr const char* OrbitPlan_Name{"OrbitPlan"};
constexpr const char* OrbitActivityPlan_Name{"OrbitActivityPlan"};
constexpr const char* EffectPlan_Name{"EffectPlan"};
constexpr const char* ActionPlanProcess_Name{"ActionPlanProcess"};
constexpr const char* ResponsePlanProcess_Name{"ResponsePlanProcess"};

} // namespace PlanningInterfaceDetailsType_Names

void PlanningInterfaceDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanningInterfaceDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanningInterfaceDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::MissionPlan_Name) {
      MissionPlanProcessType::deserialize(valueType.second, accessor.enableMissionPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::TaskPlan_Name) {
      TaskPlanProcessType::deserialize(valueType.second, accessor.enableTaskPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::RoutePlan_Name) {
      RoutePlanProcessType::deserialize(valueType.second, accessor.enableRoutePlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::RouteActivityPlan_Name) {
      ActivityPlanProcessType::deserialize(valueType.second, accessor.enableRouteActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::ActivityPlan_Name) {
      ActivityPlanProcessType::deserialize(valueType.second, accessor.enableActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::OrbitPlan_Name) {
      OrbitPlanProcessType::deserialize(valueType.second, accessor.enableOrbitPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::OrbitActivityPlan_Name) {
      ActivityPlanProcessType::deserialize(valueType.second, accessor.enableOrbitActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::EffectPlan_Name) {
      EffectPlanProcessType::deserialize(valueType.second, accessor.enableEffectPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::ActionPlanProcess_Name) {
      ActionPlanProcessType::deserialize(valueType.second, accessor.enableActionPlanProcess(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanningInterfaceDetailsType_Names::ResponsePlanProcess_Name) {
      ResponsePlanProcessType::deserialize(valueType.second, accessor.enableResponsePlanProcess(), nodeName, nsPrefix);
    }
  }
}

std::string PlanningInterfaceDetailsType::serialize(const uci::type::PlanningInterfaceDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PlanningInterfaceDetailsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PlanningInterfaceDetailsType_Names::Extern_Type_Name);
  }
  if (accessor.hasMissionPlan()) {
    MissionPlanProcessType::serialize(accessor.getMissionPlan(), node, PlanningInterfaceDetailsType_Names::MissionPlan_Name);
  }
  if (accessor.hasTaskPlan()) {
    TaskPlanProcessType::serialize(accessor.getTaskPlan(), node, PlanningInterfaceDetailsType_Names::TaskPlan_Name);
  }
  if (accessor.hasRoutePlan()) {
    RoutePlanProcessType::serialize(accessor.getRoutePlan(), node, PlanningInterfaceDetailsType_Names::RoutePlan_Name);
  }
  if (accessor.hasRouteActivityPlan()) {
    ActivityPlanProcessType::serialize(accessor.getRouteActivityPlan(), node, PlanningInterfaceDetailsType_Names::RouteActivityPlan_Name);
  }
  if (accessor.hasActivityPlan()) {
    ActivityPlanProcessType::serialize(accessor.getActivityPlan(), node, PlanningInterfaceDetailsType_Names::ActivityPlan_Name);
  }
  if (accessor.hasOrbitPlan()) {
    OrbitPlanProcessType::serialize(accessor.getOrbitPlan(), node, PlanningInterfaceDetailsType_Names::OrbitPlan_Name);
  }
  if (accessor.hasOrbitActivityPlan()) {
    ActivityPlanProcessType::serialize(accessor.getOrbitActivityPlan(), node, PlanningInterfaceDetailsType_Names::OrbitActivityPlan_Name);
  }
  if (accessor.hasEffectPlan()) {
    EffectPlanProcessType::serialize(accessor.getEffectPlan(), node, PlanningInterfaceDetailsType_Names::EffectPlan_Name);
  }
  if (accessor.hasActionPlanProcess()) {
    ActionPlanProcessType::serialize(accessor.getActionPlanProcess(), node, PlanningInterfaceDetailsType_Names::ActionPlanProcess_Name);
  }
  if (accessor.hasResponsePlanProcess()) {
    ResponsePlanProcessType::serialize(accessor.getResponsePlanProcess(), node, PlanningInterfaceDetailsType_Names::ResponsePlanProcess_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PlanningInterfaceDetailsType>().release());
}

uci::type::PlanningInterfaceDetailsType& PlanningInterfaceDetailsType::create(const uci::type::PlanningInterfaceDetailsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PlanningInterfaceDetailsType> newAccessor{boost::make_unique<asb_uci::type::PlanningInterfaceDetailsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PlanningInterfaceDetailsType::destroy(uci::type::PlanningInterfaceDetailsType& accessor) {
  delete dynamic_cast<asb_uci::type::PlanningInterfaceDetailsType*>(&accessor);
}

} // namespace type

} // namespace uci

