/** @file OrbitAccuracyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/OrbitAccuracyType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/DateTimeRangeType.h"
#include "asb_uci/type/RTN_PositionSigmaType.h"
#include "asb_uci/type/RTN_VelocitySigmaType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/OrbitAccuracyType.h"
#include "uci/type/RTN_PositionSigmaType.h"
#include "uci/type/RTN_VelocitySigmaType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

OrbitAccuracyType::OrbitAccuracyType()
  : positionSigma_Accessor{boost::make_unique<RTN_PositionSigmaType>()},
    velocitySigma_Accessor{boost::make_unique<RTN_VelocitySigmaType>()} {
}

OrbitAccuracyType::~OrbitAccuracyType() = default;

void OrbitAccuracyType::copy(const uci::type::OrbitAccuracyType& accessor) {
  copyImpl(accessor, false);
}

void OrbitAccuracyType::copyImpl(const uci::type::OrbitAccuracyType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const OrbitAccuracyType&>(accessor);
    setPositionSigma(*(accessorImpl.positionSigma_Accessor));
    setVelocitySigma(*(accessorImpl.velocitySigma_Accessor));
    if (accessorImpl.timeValid_Accessor) {
      setTimeValid(*(accessorImpl.timeValid_Accessor));
    } else {
      timeValid_Accessor.reset();
    }
  }
}

void OrbitAccuracyType::reset() noexcept {
  positionSigma_Accessor->reset();
  velocitySigma_Accessor->reset();
  timeValid_Accessor.reset();
}

const uci::type::RTN_PositionSigmaType& OrbitAccuracyType::getPositionSigma() const {
  return *positionSigma_Accessor;
}

uci::type::RTN_PositionSigmaType& OrbitAccuracyType::getPositionSigma() {
  return *positionSigma_Accessor;
}

uci::type::OrbitAccuracyType& OrbitAccuracyType::setPositionSigma(const uci::type::RTN_PositionSigmaType& accessor) {
  if (&accessor != positionSigma_Accessor.get()) {
    positionSigma_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::RTN_VelocitySigmaType& OrbitAccuracyType::getVelocitySigma() const {
  return *velocitySigma_Accessor;
}

uci::type::RTN_VelocitySigmaType& OrbitAccuracyType::getVelocitySigma() {
  return *velocitySigma_Accessor;
}

uci::type::OrbitAccuracyType& OrbitAccuracyType::setVelocitySigma(const uci::type::RTN_VelocitySigmaType& accessor) {
  if (&accessor != velocitySigma_Accessor.get()) {
    velocitySigma_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DateTimeRangeType& OrbitAccuracyType::getTimeValid_() const {
  if (timeValid_Accessor) {
    return *timeValid_Accessor;
  }
  throw uci::base::UCIException("Error in getTimeValid(): An attempt was made to get an optional field that was not enabled, call hasTimeValid() to determine if it is safe to call getTimeValid()");
}

const uci::type::DateTimeRangeType& OrbitAccuracyType::getTimeValid() const {
  return getTimeValid_();
}

uci::type::DateTimeRangeType& OrbitAccuracyType::getTimeValid() {
  return getTimeValid_();
}

uci::type::OrbitAccuracyType& OrbitAccuracyType::setTimeValid(const uci::type::DateTimeRangeType& accessor) {
  enableTimeValid();
  if (&accessor != timeValid_Accessor.get()) {
    timeValid_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool OrbitAccuracyType::hasTimeValid() const noexcept {
  return static_cast<bool>(timeValid_Accessor);
}

uci::type::DateTimeRangeType& OrbitAccuracyType::enableTimeValid(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dateTimeRangeType : type};
  if ((!timeValid_Accessor) || (timeValid_Accessor->getAccessorType() != requestedType)) {
    timeValid_Accessor = DateTimeRangeType::create(requestedType);
    if (!timeValid_Accessor) {
      throw uci::base::UCIException("Error in enableTimeValid(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *timeValid_Accessor;
}

uci::type::OrbitAccuracyType& OrbitAccuracyType::clearTimeValid() noexcept {
  timeValid_Accessor.reset();
  return *this;
}

std::unique_ptr<OrbitAccuracyType> OrbitAccuracyType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitAccuracyType : type};
  return (requestedType == uci::type::accessorType::orbitAccuracyType) ? boost::make_unique<OrbitAccuracyType>() : nullptr;
}

/**  */
namespace OrbitAccuracyType_Names {

constexpr const char* Extern_Type_Name{"OrbitAccuracyType"};
constexpr const char* PositionSigma_Name{"PositionSigma"};
constexpr const char* VelocitySigma_Name{"VelocitySigma"};
constexpr const char* TimeValid_Name{"TimeValid"};

} // namespace OrbitAccuracyType_Names

void OrbitAccuracyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitAccuracyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitAccuracyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitAccuracyType_Names::PositionSigma_Name) {
      RTN_PositionSigmaType::deserialize(valueType.second, accessor.getPositionSigma(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitAccuracyType_Names::VelocitySigma_Name) {
      RTN_VelocitySigmaType::deserialize(valueType.second, accessor.getVelocitySigma(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitAccuracyType_Names::TimeValid_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableTimeValid(), nodeName, nsPrefix);
    }
  }
}

std::string OrbitAccuracyType::serialize(const uci::type::OrbitAccuracyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? OrbitAccuracyType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitAccuracyType_Names::Extern_Type_Name);
  }
  RTN_PositionSigmaType::serialize(accessor.getPositionSigma(), node, OrbitAccuracyType_Names::PositionSigma_Name);
  RTN_VelocitySigmaType::serialize(accessor.getVelocitySigma(), node, OrbitAccuracyType_Names::VelocitySigma_Name);
  if (accessor.hasTimeValid()) {
    DateTimeRangeType::serialize(accessor.getTimeValid(), node, OrbitAccuracyType_Names::TimeValid_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::OrbitAccuracyType& OrbitAccuracyType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::OrbitAccuracyType>().release());
}

uci::type::OrbitAccuracyType& OrbitAccuracyType::create(const uci::type::OrbitAccuracyType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::OrbitAccuracyType> newAccessor{boost::make_unique<asb_uci::type::OrbitAccuracyType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void OrbitAccuracyType::destroy(uci::type::OrbitAccuracyType& accessor) {
  delete dynamic_cast<asb_uci::type::OrbitAccuracyType*>(&accessor);
}

} // namespace type

} // namespace uci

