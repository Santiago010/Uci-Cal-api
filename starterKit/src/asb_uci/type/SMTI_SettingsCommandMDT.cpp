/** @file SMTI_SettingsCommandMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SMTI_SettingsCommandMDT.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilitySettingsCommandBaseType.h"
#include "asb_uci/type/ElectronicProtectionOptionsDefaultType.h"
#include "asb_uci/type/EmconSettingType.h"
#include "asb_uci/type/EmissionBalanceEnum.h"
#include "asb_uci/type/SMTI_MessageOutputsEnum.h"
#include "asb_uci/type/STANAG_4607_PackingPlanPET.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ElectronicProtectionOptionsDefaultType.h"
#include "uci/type/EmconSettingType.h"
#include "uci/type/EmissionBalanceEnum.h"
#include "uci/type/SMTI_MessageOutputsEnum.h"
#include "uci/type/SMTI_SettingsCommandMDT.h"
#include "uci/type/STANAG_4607_PackingPlanPET.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SMTI_SettingsCommandMDT::SMTI_SettingsCommandMDT()
  : messageOutput_Accessor{boost::make_unique<MessageOutput>(0, 4)},
    defaultElectronicProtectionOptions_Accessor{boost::make_unique<DefaultElectronicProtectionOptions>(0, SIZE_MAX)} {
}

SMTI_SettingsCommandMDT::~SMTI_SettingsCommandMDT() = default;

void SMTI_SettingsCommandMDT::copy(const uci::type::SMTI_SettingsCommandMDT& accessor) {
  copyImpl(accessor, false);
}

void SMTI_SettingsCommandMDT::copyImpl(const uci::type::SMTI_SettingsCommandMDT& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    CapabilitySettingsCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const SMTI_SettingsCommandMDT&>(accessor);
    if (accessorImpl.emissionBalanceState_Accessor) {
      setEmissionBalanceState(*(accessorImpl.emissionBalanceState_Accessor));
    } else {
      emissionBalanceState_Accessor.reset();
    }
    setMessageOutput(*(accessorImpl.messageOutput_Accessor));
    if (accessorImpl.defaultPackingPlan_Accessor) {
      setDefaultPackingPlan(*(accessorImpl.defaultPackingPlan_Accessor));
    } else {
      defaultPackingPlan_Accessor.reset();
    }
    if (accessorImpl.hasUnassignAll()) {
      setUnassignAll(accessorImpl.getUnassignAll());
    } else {
      clearUnassignAll();
    }
    if (accessorImpl.defaultEmcon_Accessor) {
      setDefaultEmcon(*(accessorImpl.defaultEmcon_Accessor));
    } else {
      defaultEmcon_Accessor.reset();
    }
    setDefaultElectronicProtectionOptions(*(accessorImpl.defaultElectronicProtectionOptions_Accessor));
  }
}

void SMTI_SettingsCommandMDT::reset() noexcept {
  CapabilitySettingsCommandBaseType::reset();
  emissionBalanceState_Accessor.reset();
  messageOutput_Accessor->reset();
  defaultPackingPlan_Accessor.reset();
  clearUnassignAll();
  defaultEmcon_Accessor.reset();
  defaultElectronicProtectionOptions_Accessor->reset();
}

uci::type::EmissionBalanceEnum& SMTI_SettingsCommandMDT::getEmissionBalanceState_() const {
  if (emissionBalanceState_Accessor) {
    return *emissionBalanceState_Accessor;
  }
  throw uci::base::UCIException("Error in getEmissionBalanceState(): An attempt was made to get an optional field that was not enabled, call hasEmissionBalanceState() to determine if it is safe to call getEmissionBalanceState()");
}

const uci::type::EmissionBalanceEnum& SMTI_SettingsCommandMDT::getEmissionBalanceState() const {
  return getEmissionBalanceState_();
}

uci::type::EmissionBalanceEnum& SMTI_SettingsCommandMDT::getEmissionBalanceState() {
  return getEmissionBalanceState_();
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setEmissionBalanceState(const uci::type::EmissionBalanceEnum& accessor) {
  enableEmissionBalanceState();
  if (&accessor != emissionBalanceState_Accessor.get()) {
    emissionBalanceState_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setEmissionBalanceState(const uci::type::EmissionBalanceEnum::EnumerationItem value) {
  enableEmissionBalanceState().setValue(value);
  return *this;
}

bool SMTI_SettingsCommandMDT::hasEmissionBalanceState() const noexcept {
  return static_cast<bool>(emissionBalanceState_Accessor);
}

uci::type::EmissionBalanceEnum& SMTI_SettingsCommandMDT::enableEmissionBalanceState(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emissionBalanceEnum : type};
  if ((!emissionBalanceState_Accessor) || (emissionBalanceState_Accessor->getAccessorType() != requestedType)) {
    emissionBalanceState_Accessor = EmissionBalanceEnum::create(requestedType);
    if (!emissionBalanceState_Accessor) {
      throw uci::base::UCIException("Error in enableEmissionBalanceState(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *emissionBalanceState_Accessor;
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::clearEmissionBalanceState() noexcept {
  emissionBalanceState_Accessor.reset();
  return *this;
}

const uci::type::SMTI_SettingsCommandMDT::MessageOutput& SMTI_SettingsCommandMDT::getMessageOutput() const {
  return *messageOutput_Accessor;
}

uci::type::SMTI_SettingsCommandMDT::MessageOutput& SMTI_SettingsCommandMDT::getMessageOutput() {
  return *messageOutput_Accessor;
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setMessageOutput(const uci::type::SMTI_SettingsCommandMDT::MessageOutput& accessor) {
  if (&accessor != messageOutput_Accessor.get()) {
    messageOutput_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::STANAG_4607_PackingPlanPET& SMTI_SettingsCommandMDT::getDefaultPackingPlan_() const {
  if (defaultPackingPlan_Accessor) {
    return *defaultPackingPlan_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultPackingPlan(): An attempt was made to get an optional field that was not enabled, call hasDefaultPackingPlan() to determine if it is safe to call getDefaultPackingPlan()");
}

const uci::type::STANAG_4607_PackingPlanPET& SMTI_SettingsCommandMDT::getDefaultPackingPlan() const {
  return getDefaultPackingPlan_();
}

uci::type::STANAG_4607_PackingPlanPET& SMTI_SettingsCommandMDT::getDefaultPackingPlan() {
  return getDefaultPackingPlan_();
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setDefaultPackingPlan(const uci::type::STANAG_4607_PackingPlanPET& accessor) {
  enableDefaultPackingPlan(accessor.getAccessorType());
  if (&accessor != defaultPackingPlan_Accessor.get()) {
    defaultPackingPlan_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

bool SMTI_SettingsCommandMDT::hasDefaultPackingPlan() const noexcept {
  return static_cast<bool>(defaultPackingPlan_Accessor);
}

uci::type::STANAG_4607_PackingPlanPET& SMTI_SettingsCommandMDT::enableDefaultPackingPlan(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sTANAG_4607_PackingPlanPET : type};
  if ((!defaultPackingPlan_Accessor) || (defaultPackingPlan_Accessor->getAccessorType() != requestedType)) {
    defaultPackingPlan_Accessor = STANAG_4607_PackingPlanPET::create(requestedType);
    if (!defaultPackingPlan_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultPackingPlan(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultPackingPlan_Accessor;
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::clearDefaultPackingPlan() noexcept {
  defaultPackingPlan_Accessor.reset();
  return *this;
}

xs::Boolean SMTI_SettingsCommandMDT::getUnassignAll() const {
  if (unassignAll_Accessor) {
    return *unassignAll_Accessor;
  }
  throw uci::base::UCIException("Error in getUnassignAll(): An attempt was made to get an optional field that was not enabled, call hasUnassignAll() to determine if it is safe to call getUnassignAll()");
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setUnassignAll(xs::Boolean value) {
  unassignAll_Accessor = value;
  return *this;
}

bool SMTI_SettingsCommandMDT::hasUnassignAll() const noexcept {
  return unassignAll_Accessor.has_value();
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::clearUnassignAll() noexcept {
  unassignAll_Accessor.reset();
  return *this;
}

uci::type::EmconSettingType& SMTI_SettingsCommandMDT::getDefaultEmcon_() const {
  if (defaultEmcon_Accessor) {
    return *defaultEmcon_Accessor;
  }
  throw uci::base::UCIException("Error in getDefaultEmcon(): An attempt was made to get an optional field that was not enabled, call hasDefaultEmcon() to determine if it is safe to call getDefaultEmcon()");
}

const uci::type::EmconSettingType& SMTI_SettingsCommandMDT::getDefaultEmcon() const {
  return getDefaultEmcon_();
}

uci::type::EmconSettingType& SMTI_SettingsCommandMDT::getDefaultEmcon() {
  return getDefaultEmcon_();
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setDefaultEmcon(const uci::type::EmconSettingType& accessor) {
  enableDefaultEmcon();
  if (&accessor != defaultEmcon_Accessor.get()) {
    defaultEmcon_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SMTI_SettingsCommandMDT::hasDefaultEmcon() const noexcept {
  return static_cast<bool>(defaultEmcon_Accessor);
}

uci::type::EmconSettingType& SMTI_SettingsCommandMDT::enableDefaultEmcon(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::emconSettingType : type};
  if ((!defaultEmcon_Accessor) || (defaultEmcon_Accessor->getAccessorType() != requestedType)) {
    defaultEmcon_Accessor = EmconSettingType::create(requestedType);
    if (!defaultEmcon_Accessor) {
      throw uci::base::UCIException("Error in enableDefaultEmcon(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *defaultEmcon_Accessor;
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::clearDefaultEmcon() noexcept {
  defaultEmcon_Accessor.reset();
  return *this;
}

const uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions& SMTI_SettingsCommandMDT::getDefaultElectronicProtectionOptions() const {
  return *defaultElectronicProtectionOptions_Accessor;
}

uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions& SMTI_SettingsCommandMDT::getDefaultElectronicProtectionOptions() {
  return *defaultElectronicProtectionOptions_Accessor;
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::setDefaultElectronicProtectionOptions(const uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions& accessor) {
  if (&accessor != defaultElectronicProtectionOptions_Accessor.get()) {
    defaultElectronicProtectionOptions_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<SMTI_SettingsCommandMDT> SMTI_SettingsCommandMDT::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sMTI_SettingsCommandMDT : type};
  return (requestedType == uci::type::accessorType::sMTI_SettingsCommandMDT) ? boost::make_unique<SMTI_SettingsCommandMDT>() : nullptr;
}

/**  */
namespace SMTI_SettingsCommandMDT_Names {

constexpr const char* Extern_Type_Name{"SMTI_SettingsCommandMDT"};
constexpr const char* EmissionBalanceState_Name{"EmissionBalanceState"};
constexpr const char* MessageOutput_Name{"MessageOutput"};
constexpr const char* DefaultPackingPlan_Name{"DefaultPackingPlan"};
constexpr const char* UnassignAll_Name{"UnassignAll"};
constexpr const char* DefaultEmcon_Name{"DefaultEmcon"};
constexpr const char* DefaultElectronicProtectionOptions_Name{"DefaultElectronicProtectionOptions"};

} // namespace SMTI_SettingsCommandMDT_Names

void SMTI_SettingsCommandMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SMTI_SettingsCommandMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SMTI_SettingsCommandMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SMTI_SettingsCommandMDT_Names::EmissionBalanceState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEmissionBalanceState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SMTI_SettingsCommandMDT_Names::MessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
        const uci::type::SMTI_SettingsCommandMDT::MessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SMTI_SettingsCommandMDT_Names::DefaultPackingPlan_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDefaultPackingPlan(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_SettingsCommandMDT_Names::UnassignAll_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnassignAll(asb_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SMTI_SettingsCommandMDT_Names::DefaultEmcon_Name) {
      EmconSettingType::deserialize(valueType.second, accessor.enableDefaultEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SMTI_SettingsCommandMDT_Names::DefaultElectronicProtectionOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions& boundedList = accessor.getDefaultElectronicProtectionOptions();
        const uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ElectronicProtectionOptionsDefaultType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CapabilitySettingsCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string SMTI_SettingsCommandMDT::serialize(const uci::type::SMTI_SettingsCommandMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SMTI_SettingsCommandMDT_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SMTI_SettingsCommandMDT_Names::Extern_Type_Name);
  }
  CapabilitySettingsCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasEmissionBalanceState()) {
    EmissionBalanceEnum::serialize(accessor.getEmissionBalanceState(), node, SMTI_SettingsCommandMDT_Names::EmissionBalanceState_Name, false);
  }
  {
    const uci::type::SMTI_SettingsCommandMDT::MessageOutput& boundedList = accessor.getMessageOutput();
    for (uci::type::SMTI_SettingsCommandMDT::MessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SMTI_MessageOutputsEnum::serialize(boundedList.at(i), node, SMTI_SettingsCommandMDT_Names::MessageOutput_Name, false);
    }
  }
  if (accessor.hasDefaultPackingPlan()) {
    STANAG_4607_PackingPlanPET::serialize(accessor.getDefaultPackingPlan(), node, SMTI_SettingsCommandMDT_Names::DefaultPackingPlan_Name);
  }
  if (accessor.hasUnassignAll()) {
    asb_uci::util::SerializationHelpers::serializeBoolean(accessor.getUnassignAll(), node, SMTI_SettingsCommandMDT_Names::UnassignAll_Name);
  }
  if (accessor.hasDefaultEmcon()) {
    EmconSettingType::serialize(accessor.getDefaultEmcon(), node, SMTI_SettingsCommandMDT_Names::DefaultEmcon_Name);
  }
  {
    const uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions& boundedList = accessor.getDefaultElectronicProtectionOptions();
    for (uci::type::SMTI_SettingsCommandMDT::DefaultElectronicProtectionOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ElectronicProtectionOptionsDefaultType::serialize(boundedList.at(i), node, SMTI_SettingsCommandMDT_Names::DefaultElectronicProtectionOptions_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SMTI_SettingsCommandMDT>().release());
}

uci::type::SMTI_SettingsCommandMDT& SMTI_SettingsCommandMDT::create(const uci::type::SMTI_SettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SMTI_SettingsCommandMDT> newAccessor{boost::make_unique<asb_uci::type::SMTI_SettingsCommandMDT>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SMTI_SettingsCommandMDT::destroy(uci::type::SMTI_SettingsCommandMDT& accessor) {
  delete dynamic_cast<asb_uci::type::SMTI_SettingsCommandMDT*>(&accessor);
}

} // namespace type

} // namespace uci

