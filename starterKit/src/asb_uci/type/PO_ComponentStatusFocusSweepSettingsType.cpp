/** @file PO_ComponentStatusFocusSweepSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:14 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/PO_ComponentStatusFocusSweepSettingsType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/PO_ComponentSettingsFocusSweepSettingsStartingPositionType.h"
#include "asb_uci/type/PO_ComponentSettingsFocusSweepSettingsStepIncrementType.h"
#include "asb_uci/type/PO_ComponentSettingsFocusSweepSettingsStepTimeType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsStartingPositionType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsStepIncrementType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsStepTimeType.h"
#include "uci/type/PO_ComponentStatusFocusSweepSettingsType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

PO_ComponentStatusFocusSweepSettingsType::PO_ComponentStatusFocusSweepSettingsType() = default;

PO_ComponentStatusFocusSweepSettingsType::~PO_ComponentStatusFocusSweepSettingsType() = default;

void PO_ComponentStatusFocusSweepSettingsType::copy(const uci::type::PO_ComponentStatusFocusSweepSettingsType& accessor) {
  copyImpl(accessor, false);
}

void PO_ComponentStatusFocusSweepSettingsType::copyImpl(const uci::type::PO_ComponentStatusFocusSweepSettingsType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const PO_ComponentStatusFocusSweepSettingsType&>(accessor);
    setNumberOfStages(accessorImpl.numberOfStages_Accessor);
    if (accessorImpl.stepTime_Accessor) {
      setStepTime(*(accessorImpl.stepTime_Accessor));
    } else {
      stepTime_Accessor.reset();
    }
    if (accessorImpl.startingPosition_Accessor) {
      setStartingPosition(*(accessorImpl.startingPosition_Accessor));
    } else {
      startingPosition_Accessor.reset();
    }
    if (accessorImpl.stepIncrement_Accessor) {
      setStepIncrement(*(accessorImpl.stepIncrement_Accessor));
    } else {
      stepIncrement_Accessor.reset();
    }
  }
}

void PO_ComponentStatusFocusSweepSettingsType::reset() noexcept {
  numberOfStages_Accessor = 0;
  stepTime_Accessor.reset();
  startingPosition_Accessor.reset();
  stepIncrement_Accessor.reset();
}

xs::UnsignedInt PO_ComponentStatusFocusSweepSettingsType::getNumberOfStages() const {
  return numberOfStages_Accessor;
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::setNumberOfStages(xs::UnsignedInt value) {
  numberOfStages_Accessor = value;
  return *this;
}


uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentStatusFocusSweepSettingsType::getStepTime_() const {
  if (stepTime_Accessor) {
    return *stepTime_Accessor;
  }
  throw uci::base::UCIException("Error in getStepTime(): An attempt was made to get an optional field that was not enabled, call hasStepTime() to determine if it is safe to call getStepTime()");
}

const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentStatusFocusSweepSettingsType::getStepTime() const {
  return getStepTime_();
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentStatusFocusSweepSettingsType::getStepTime() {
  return getStepTime_();
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::setStepTime(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& accessor) {
  enableStepTime();
  if (&accessor != stepTime_Accessor.get()) {
    stepTime_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocusSweepSettingsType::hasStepTime() const noexcept {
  return static_cast<bool>(stepTime_Accessor);
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType& PO_ComponentStatusFocusSweepSettingsType::enableStepTime(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepTimeType : type};
  if ((!stepTime_Accessor) || (stepTime_Accessor->getAccessorType() != requestedType)) {
    stepTime_Accessor = PO_ComponentSettingsFocusSweepSettingsStepTimeType::create(requestedType);
    if (!stepTime_Accessor) {
      throw uci::base::UCIException("Error in enableStepTime(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stepTime_Accessor;
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::clearStepTime() noexcept {
  stepTime_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType& PO_ComponentStatusFocusSweepSettingsType::getStartingPosition_() const {
  if (startingPosition_Accessor) {
    return *startingPosition_Accessor;
  }
  throw uci::base::UCIException("Error in getStartingPosition(): An attempt was made to get an optional field that was not enabled, call hasStartingPosition() to determine if it is safe to call getStartingPosition()");
}

const uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType& PO_ComponentStatusFocusSweepSettingsType::getStartingPosition() const {
  return getStartingPosition_();
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType& PO_ComponentStatusFocusSweepSettingsType::getStartingPosition() {
  return getStartingPosition_();
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::setStartingPosition(const uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType& accessor) {
  enableStartingPosition();
  if (&accessor != startingPosition_Accessor.get()) {
    startingPosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocusSweepSettingsType::hasStartingPosition() const noexcept {
  return static_cast<bool>(startingPosition_Accessor);
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType& PO_ComponentStatusFocusSweepSettingsType::enableStartingPosition(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStartingPositionType : type};
  if ((!startingPosition_Accessor) || (startingPosition_Accessor->getAccessorType() != requestedType)) {
    startingPosition_Accessor = PO_ComponentSettingsFocusSweepSettingsStartingPositionType::create(requestedType);
    if (!startingPosition_Accessor) {
      throw uci::base::UCIException("Error in enableStartingPosition(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *startingPosition_Accessor;
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::clearStartingPosition() noexcept {
  startingPosition_Accessor.reset();
  return *this;
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentStatusFocusSweepSettingsType::getStepIncrement_() const {
  if (stepIncrement_Accessor) {
    return *stepIncrement_Accessor;
  }
  throw uci::base::UCIException("Error in getStepIncrement(): An attempt was made to get an optional field that was not enabled, call hasStepIncrement() to determine if it is safe to call getStepIncrement()");
}

const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentStatusFocusSweepSettingsType::getStepIncrement() const {
  return getStepIncrement_();
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentStatusFocusSweepSettingsType::getStepIncrement() {
  return getStepIncrement_();
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::setStepIncrement(const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& accessor) {
  enableStepIncrement();
  if (&accessor != stepIncrement_Accessor.get()) {
    stepIncrement_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool PO_ComponentStatusFocusSweepSettingsType::hasStepIncrement() const noexcept {
  return static_cast<bool>(stepIncrement_Accessor);
}

uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType& PO_ComponentStatusFocusSweepSettingsType::enableStepIncrement(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepIncrementType : type};
  if ((!stepIncrement_Accessor) || (stepIncrement_Accessor->getAccessorType() != requestedType)) {
    stepIncrement_Accessor = PO_ComponentSettingsFocusSweepSettingsStepIncrementType::create(requestedType);
    if (!stepIncrement_Accessor) {
      throw uci::base::UCIException("Error in enableStepIncrement(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *stepIncrement_Accessor;
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::clearStepIncrement() noexcept {
  stepIncrement_Accessor.reset();
  return *this;
}

std::unique_ptr<PO_ComponentStatusFocusSweepSettingsType> PO_ComponentStatusFocusSweepSettingsType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::pO_ComponentStatusFocusSweepSettingsType : type};
  return (requestedType == uci::type::accessorType::pO_ComponentStatusFocusSweepSettingsType) ? boost::make_unique<PO_ComponentStatusFocusSweepSettingsType>() : nullptr;
}

/**  */
namespace PO_ComponentStatusFocusSweepSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusFocusSweepSettingsType"};
constexpr const char* NumberOfStages_Name{"NumberOfStages"};
constexpr const char* StepTime_Name{"StepTime"};
constexpr const char* StartingPosition_Name{"StartingPosition"};
constexpr const char* StepIncrement_Name{"StepIncrement"};

} // namespace PO_ComponentStatusFocusSweepSettingsType_Names

void PO_ComponentStatusFocusSweepSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusFocusSweepSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusFocusSweepSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocusSweepSettingsType_Names::NumberOfStages_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfStages(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocusSweepSettingsType_Names::StepTime_Name) {
      PO_ComponentSettingsFocusSweepSettingsStepTimeType::deserialize(valueType.second, accessor.enableStepTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocusSweepSettingsType_Names::StartingPosition_Name) {
      PO_ComponentSettingsFocusSweepSettingsStartingPositionType::deserialize(valueType.second, accessor.enableStartingPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentStatusFocusSweepSettingsType_Names::StepIncrement_Name) {
      PO_ComponentSettingsFocusSweepSettingsStepIncrementType::deserialize(valueType.second, accessor.enableStepIncrement(), nodeName, nsPrefix);
    }
  }
}

std::string PO_ComponentStatusFocusSweepSettingsType::serialize(const uci::type::PO_ComponentStatusFocusSweepSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? PO_ComponentStatusFocusSweepSettingsType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusFocusSweepSettingsType_Names::Extern_Type_Name);
  }
  asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfStages(), node, PO_ComponentStatusFocusSweepSettingsType_Names::NumberOfStages_Name);
  if (accessor.hasStepTime()) {
    PO_ComponentSettingsFocusSweepSettingsStepTimeType::serialize(accessor.getStepTime(), node, PO_ComponentStatusFocusSweepSettingsType_Names::StepTime_Name);
  }
  if (accessor.hasStartingPosition()) {
    PO_ComponentSettingsFocusSweepSettingsStartingPositionType::serialize(accessor.getStartingPosition(), node, PO_ComponentStatusFocusSweepSettingsType_Names::StartingPosition_Name);
  }
  if (accessor.hasStepIncrement()) {
    PO_ComponentSettingsFocusSweepSettingsStepIncrementType::serialize(accessor.getStepIncrement(), node, PO_ComponentStatusFocusSweepSettingsType_Names::StepIncrement_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::PO_ComponentStatusFocusSweepSettingsType>().release());
}

uci::type::PO_ComponentStatusFocusSweepSettingsType& PO_ComponentStatusFocusSweepSettingsType::create(const uci::type::PO_ComponentStatusFocusSweepSettingsType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::PO_ComponentStatusFocusSweepSettingsType> newAccessor{boost::make_unique<asb_uci::type::PO_ComponentStatusFocusSweepSettingsType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void PO_ComponentStatusFocusSweepSettingsType::destroy(uci::type::PO_ComponentStatusFocusSweepSettingsType& accessor) {
  delete dynamic_cast<asb_uci::type::PO_ComponentStatusFocusSweepSettingsType*>(&accessor);
}

} // namespace type

} // namespace uci

