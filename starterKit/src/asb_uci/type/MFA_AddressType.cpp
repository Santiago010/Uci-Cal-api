/** @file MFA_AddressType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:13 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/MFA_AddressType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AntennaResourceChoiceType.h"
#include "asb_uci/type/SupportCapabilityID_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AntennaResourceChoiceType.h"
#include "uci/type/MFA_AddressType.h"
#include "uci/type/PowerType.h"
#include "uci/type/SupportCapabilityID_Type.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

MFA_AddressType::MFA_AddressType()
  : mFA_SupportCapabilityID_Accessor{boost::make_unique<SupportCapabilityID_Type>()},
    antennaResourceChoice_Accessor{boost::make_unique<AntennaResourceChoiceType>()} {
}

MFA_AddressType::~MFA_AddressType() = default;

void MFA_AddressType::copy(const uci::type::MFA_AddressType& accessor) {
  copyImpl(accessor, false);
}

void MFA_AddressType::copyImpl(const uci::type::MFA_AddressType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const MFA_AddressType&>(accessor);
    setMFA_SupportCapabilityID(*(accessorImpl.mFA_SupportCapabilityID_Accessor));
    setAntennaResourceChoice(*(accessorImpl.antennaResourceChoice_Accessor));
    if (accessorImpl.hasOnAntennaProcessingIndex()) {
      setOnAntennaProcessingIndex(accessorImpl.getOnAntennaProcessingIndex());
    } else {
      clearOnAntennaProcessingIndex();
    }
    if (accessorImpl.hasDeltaInputPowerConsumption()) {
      setDeltaInputPowerConsumption(accessorImpl.getDeltaInputPowerConsumption());
    } else {
      clearDeltaInputPowerConsumption();
    }
  }
}

void MFA_AddressType::reset() noexcept {
  mFA_SupportCapabilityID_Accessor->reset();
  antennaResourceChoice_Accessor->reset();
  clearOnAntennaProcessingIndex();
  clearDeltaInputPowerConsumption();
}

const uci::type::SupportCapabilityID_Type& MFA_AddressType::getMFA_SupportCapabilityID() const {
  return *mFA_SupportCapabilityID_Accessor;
}

uci::type::SupportCapabilityID_Type& MFA_AddressType::getMFA_SupportCapabilityID() {
  return *mFA_SupportCapabilityID_Accessor;
}

uci::type::MFA_AddressType& MFA_AddressType::setMFA_SupportCapabilityID(const uci::type::SupportCapabilityID_Type& accessor) {
  if (&accessor != mFA_SupportCapabilityID_Accessor.get()) {
    mFA_SupportCapabilityID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::AntennaResourceChoiceType& MFA_AddressType::getAntennaResourceChoice() const {
  return *antennaResourceChoice_Accessor;
}

uci::type::AntennaResourceChoiceType& MFA_AddressType::getAntennaResourceChoice() {
  return *antennaResourceChoice_Accessor;
}

uci::type::MFA_AddressType& MFA_AddressType::setAntennaResourceChoice(const uci::type::AntennaResourceChoiceType& accessor) {
  if (&accessor != antennaResourceChoice_Accessor.get()) {
    antennaResourceChoice_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

xs::UnsignedInt MFA_AddressType::getOnAntennaProcessingIndex() const {
  if (onAntennaProcessingIndex_Accessor) {
    return *onAntennaProcessingIndex_Accessor;
  }
  throw uci::base::UCIException("Error in getOnAntennaProcessingIndex(): An attempt was made to get an optional field that was not enabled, call hasOnAntennaProcessingIndex() to determine if it is safe to call getOnAntennaProcessingIndex()");
}

uci::type::MFA_AddressType& MFA_AddressType::setOnAntennaProcessingIndex(xs::UnsignedInt value) {
  onAntennaProcessingIndex_Accessor = value;
  return *this;
}

bool MFA_AddressType::hasOnAntennaProcessingIndex() const noexcept {
  return onAntennaProcessingIndex_Accessor.has_value();
}

uci::type::MFA_AddressType& MFA_AddressType::clearOnAntennaProcessingIndex() noexcept {
  onAntennaProcessingIndex_Accessor.reset();
  return *this;
}

uci::type::PowerTypeValue MFA_AddressType::getDeltaInputPowerConsumption() const {
  if (deltaInputPowerConsumption_Accessor) {
    return *deltaInputPowerConsumption_Accessor;
  }
  throw uci::base::UCIException("Error in getDeltaInputPowerConsumption(): An attempt was made to get an optional field that was not enabled, call hasDeltaInputPowerConsumption() to determine if it is safe to call getDeltaInputPowerConsumption()");
}

uci::type::MFA_AddressType& MFA_AddressType::setDeltaInputPowerConsumption(uci::type::PowerTypeValue value) {
  deltaInputPowerConsumption_Accessor = value;
  return *this;
}

bool MFA_AddressType::hasDeltaInputPowerConsumption() const noexcept {
  return deltaInputPowerConsumption_Accessor.has_value();
}

uci::type::MFA_AddressType& MFA_AddressType::clearDeltaInputPowerConsumption() noexcept {
  deltaInputPowerConsumption_Accessor.reset();
  return *this;
}

std::unique_ptr<MFA_AddressType> MFA_AddressType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::mFA_AddressType : type};
  return (requestedType == uci::type::accessorType::mFA_AddressType) ? boost::make_unique<MFA_AddressType>() : nullptr;
}

/**  */
namespace MFA_AddressType_Names {

constexpr const char* Extern_Type_Name{"MFA_AddressType"};
constexpr const char* MFA_SupportCapabilityID_Name{"MFA_SupportCapabilityID"};
constexpr const char* AntennaResourceChoice_Name{"AntennaResourceChoice"};
constexpr const char* OnAntennaProcessingIndex_Name{"OnAntennaProcessingIndex"};
constexpr const char* DeltaInputPowerConsumption_Name{"DeltaInputPowerConsumption"};

} // namespace MFA_AddressType_Names

void MFA_AddressType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MFA_AddressType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MFA_AddressType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MFA_AddressType_Names::MFA_SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.getMFA_SupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MFA_AddressType_Names::AntennaResourceChoice_Name) {
      AntennaResourceChoiceType::deserialize(valueType.second, accessor.getAntennaResourceChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MFA_AddressType_Names::OnAntennaProcessingIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOnAntennaProcessingIndex(asb_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MFA_AddressType_Names::DeltaInputPowerConsumption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeltaInputPowerConsumption(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string MFA_AddressType::serialize(const uci::type::MFA_AddressType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? MFA_AddressType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, MFA_AddressType_Names::Extern_Type_Name);
  }
  SupportCapabilityID_Type::serialize(accessor.getMFA_SupportCapabilityID(), node, MFA_AddressType_Names::MFA_SupportCapabilityID_Name);
  AntennaResourceChoiceType::serialize(accessor.getAntennaResourceChoice(), node, MFA_AddressType_Names::AntennaResourceChoice_Name);
  if (accessor.hasOnAntennaProcessingIndex()) {
    asb_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getOnAntennaProcessingIndex(), node, MFA_AddressType_Names::OnAntennaProcessingIndex_Name);
  }
  if (accessor.hasDeltaInputPowerConsumption()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getDeltaInputPowerConsumption(), node, MFA_AddressType_Names::DeltaInputPowerConsumption_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::MFA_AddressType& MFA_AddressType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::MFA_AddressType>().release());
}

uci::type::MFA_AddressType& MFA_AddressType::create(const uci::type::MFA_AddressType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::MFA_AddressType> newAccessor{boost::make_unique<asb_uci::type::MFA_AddressType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void MFA_AddressType::destroy(uci::type::MFA_AddressType& accessor) {
  delete dynamic_cast<asb_uci::type::MFA_AddressType*>(&accessor);
}

} // namespace type

} // namespace uci

