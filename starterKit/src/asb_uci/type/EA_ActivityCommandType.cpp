/** @file EA_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/EA_ActivityCommandType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityCommandFrequencyType.h"
#include "asb_uci/type/DependentActivityType.h"
#include "asb_uci/type/EA_ActivityChangeBeamCommandType.h"
#include "asb_uci/type/EA_ChangeLocationAndPowerType.h"
#include "asb_uci/type/ProtectedAssetReturnPowerType.h"
#include "asb_uci/type/SelectAntennaType.h"
#include "asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/DependentActivityType.h"
#include "uci/type/EA_ActivityChangeBeamCommandType.h"
#include "uci/type/EA_ActivityCommandType.h"
#include "uci/type/EA_ChangeLocationAndPowerType.h"
#include "uci/type/ProtectedAssetReturnPowerType.h"
#include "uci/type/SelectAntennaType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

EA_ActivityCommandType::EA_ActivityCommandType()
  : changeBeam_Accessor{boost::make_unique<ChangeBeam>(0, SIZE_MAX)},
    changeProtectedEntityPredictedReturnPower_Accessor{boost::make_unique<ChangeProtectedEntityPredictedReturnPower>(0, SIZE_MAX)} {
}

EA_ActivityCommandType::~EA_ActivityCommandType() = default;

void EA_ActivityCommandType::copy(const uci::type::EA_ActivityCommandType& accessor) {
  copyImpl(accessor, false);
}

void EA_ActivityCommandType::copyImpl(const uci::type::EA_ActivityCommandType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    SharedRF_ApertureActivityCommandBaseType::copyImpl(accessor, false);
    const auto& accessorImpl = dynamic_cast<const EA_ActivityCommandType&>(accessor);
    setChangeBeam(*(accessorImpl.changeBeam_Accessor));
    if (accessorImpl.changeDependentActivity_Accessor) {
      setChangeDependentActivity(*(accessorImpl.changeDependentActivity_Accessor));
    } else {
      changeDependentActivity_Accessor.reset();
    }
    if (accessorImpl.changeReceiveAntenna_Accessor) {
      setChangeReceiveAntenna(*(accessorImpl.changeReceiveAntenna_Accessor));
    } else {
      changeReceiveAntenna_Accessor.reset();
    }
    if (accessorImpl.changeTransmitAntenna_Accessor) {
      setChangeTransmitAntenna(*(accessorImpl.changeTransmitAntenna_Accessor));
    } else {
      changeTransmitAntenna_Accessor.reset();
    }
    if (accessorImpl.changeTarget_Accessor) {
      setChangeTarget(*(accessorImpl.changeTarget_Accessor));
    } else {
      changeTarget_Accessor.reset();
    }
    setChangeProtectedEntityPredictedReturnPower(*(accessorImpl.changeProtectedEntityPredictedReturnPower_Accessor));
    if (accessorImpl.frequency_Accessor) {
      setFrequency(*(accessorImpl.frequency_Accessor));
    } else {
      frequency_Accessor.reset();
    }
  }
}

void EA_ActivityCommandType::reset() noexcept {
  SharedRF_ApertureActivityCommandBaseType::reset();
  changeBeam_Accessor->reset();
  changeDependentActivity_Accessor.reset();
  changeReceiveAntenna_Accessor.reset();
  changeTransmitAntenna_Accessor.reset();
  changeTarget_Accessor.reset();
  changeProtectedEntityPredictedReturnPower_Accessor->reset();
  frequency_Accessor.reset();
}

const uci::type::EA_ActivityCommandType::ChangeBeam& EA_ActivityCommandType::getChangeBeam() const {
  return *changeBeam_Accessor;
}

uci::type::EA_ActivityCommandType::ChangeBeam& EA_ActivityCommandType::getChangeBeam() {
  return *changeBeam_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setChangeBeam(const uci::type::EA_ActivityCommandType::ChangeBeam& accessor) {
  if (&accessor != changeBeam_Accessor.get()) {
    changeBeam_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::DependentActivityType& EA_ActivityCommandType::getChangeDependentActivity_() const {
  if (changeDependentActivity_Accessor) {
    return *changeDependentActivity_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeDependentActivity(): An attempt was made to get an optional field that was not enabled, call hasChangeDependentActivity() to determine if it is safe to call getChangeDependentActivity()");
}

const uci::type::DependentActivityType& EA_ActivityCommandType::getChangeDependentActivity() const {
  return getChangeDependentActivity_();
}

uci::type::DependentActivityType& EA_ActivityCommandType::getChangeDependentActivity() {
  return getChangeDependentActivity_();
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setChangeDependentActivity(const uci::type::DependentActivityType& accessor) {
  enableChangeDependentActivity();
  if (&accessor != changeDependentActivity_Accessor.get()) {
    changeDependentActivity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ActivityCommandType::hasChangeDependentActivity() const noexcept {
  return static_cast<bool>(changeDependentActivity_Accessor);
}

uci::type::DependentActivityType& EA_ActivityCommandType::enableChangeDependentActivity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::dependentActivityType : type};
  if ((!changeDependentActivity_Accessor) || (changeDependentActivity_Accessor->getAccessorType() != requestedType)) {
    changeDependentActivity_Accessor = DependentActivityType::create(requestedType);
    if (!changeDependentActivity_Accessor) {
      throw uci::base::UCIException("Error in enableChangeDependentActivity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeDependentActivity_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::clearChangeDependentActivity() noexcept {
  changeDependentActivity_Accessor.reset();
  return *this;
}

uci::type::SelectAntennaType& EA_ActivityCommandType::getChangeReceiveAntenna_() const {
  if (changeReceiveAntenna_Accessor) {
    return *changeReceiveAntenna_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeReceiveAntenna(): An attempt was made to get an optional field that was not enabled, call hasChangeReceiveAntenna() to determine if it is safe to call getChangeReceiveAntenna()");
}

const uci::type::SelectAntennaType& EA_ActivityCommandType::getChangeReceiveAntenna() const {
  return getChangeReceiveAntenna_();
}

uci::type::SelectAntennaType& EA_ActivityCommandType::getChangeReceiveAntenna() {
  return getChangeReceiveAntenna_();
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setChangeReceiveAntenna(const uci::type::SelectAntennaType& accessor) {
  enableChangeReceiveAntenna();
  if (&accessor != changeReceiveAntenna_Accessor.get()) {
    changeReceiveAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ActivityCommandType::hasChangeReceiveAntenna() const noexcept {
  return static_cast<bool>(changeReceiveAntenna_Accessor);
}

uci::type::SelectAntennaType& EA_ActivityCommandType::enableChangeReceiveAntenna(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectAntennaType : type};
  if ((!changeReceiveAntenna_Accessor) || (changeReceiveAntenna_Accessor->getAccessorType() != requestedType)) {
    changeReceiveAntenna_Accessor = SelectAntennaType::create(requestedType);
    if (!changeReceiveAntenna_Accessor) {
      throw uci::base::UCIException("Error in enableChangeReceiveAntenna(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeReceiveAntenna_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::clearChangeReceiveAntenna() noexcept {
  changeReceiveAntenna_Accessor.reset();
  return *this;
}

uci::type::SelectAntennaType& EA_ActivityCommandType::getChangeTransmitAntenna_() const {
  if (changeTransmitAntenna_Accessor) {
    return *changeTransmitAntenna_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeTransmitAntenna(): An attempt was made to get an optional field that was not enabled, call hasChangeTransmitAntenna() to determine if it is safe to call getChangeTransmitAntenna()");
}

const uci::type::SelectAntennaType& EA_ActivityCommandType::getChangeTransmitAntenna() const {
  return getChangeTransmitAntenna_();
}

uci::type::SelectAntennaType& EA_ActivityCommandType::getChangeTransmitAntenna() {
  return getChangeTransmitAntenna_();
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setChangeTransmitAntenna(const uci::type::SelectAntennaType& accessor) {
  enableChangeTransmitAntenna();
  if (&accessor != changeTransmitAntenna_Accessor.get()) {
    changeTransmitAntenna_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ActivityCommandType::hasChangeTransmitAntenna() const noexcept {
  return static_cast<bool>(changeTransmitAntenna_Accessor);
}

uci::type::SelectAntennaType& EA_ActivityCommandType::enableChangeTransmitAntenna(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::selectAntennaType : type};
  if ((!changeTransmitAntenna_Accessor) || (changeTransmitAntenna_Accessor->getAccessorType() != requestedType)) {
    changeTransmitAntenna_Accessor = SelectAntennaType::create(requestedType);
    if (!changeTransmitAntenna_Accessor) {
      throw uci::base::UCIException("Error in enableChangeTransmitAntenna(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeTransmitAntenna_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::clearChangeTransmitAntenna() noexcept {
  changeTransmitAntenna_Accessor.reset();
  return *this;
}

uci::type::EA_ChangeLocationAndPowerType& EA_ActivityCommandType::getChangeTarget_() const {
  if (changeTarget_Accessor) {
    return *changeTarget_Accessor;
  }
  throw uci::base::UCIException("Error in getChangeTarget(): An attempt was made to get an optional field that was not enabled, call hasChangeTarget() to determine if it is safe to call getChangeTarget()");
}

const uci::type::EA_ChangeLocationAndPowerType& EA_ActivityCommandType::getChangeTarget() const {
  return getChangeTarget_();
}

uci::type::EA_ChangeLocationAndPowerType& EA_ActivityCommandType::getChangeTarget() {
  return getChangeTarget_();
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setChangeTarget(const uci::type::EA_ChangeLocationAndPowerType& accessor) {
  enableChangeTarget();
  if (&accessor != changeTarget_Accessor.get()) {
    changeTarget_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ActivityCommandType::hasChangeTarget() const noexcept {
  return static_cast<bool>(changeTarget_Accessor);
}

uci::type::EA_ChangeLocationAndPowerType& EA_ActivityCommandType::enableChangeTarget(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_ChangeLocationAndPowerType : type};
  if ((!changeTarget_Accessor) || (changeTarget_Accessor->getAccessorType() != requestedType)) {
    changeTarget_Accessor = EA_ChangeLocationAndPowerType::create(requestedType);
    if (!changeTarget_Accessor) {
      throw uci::base::UCIException("Error in enableChangeTarget(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *changeTarget_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::clearChangeTarget() noexcept {
  changeTarget_Accessor.reset();
  return *this;
}

const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& EA_ActivityCommandType::getChangeProtectedEntityPredictedReturnPower() const {
  return *changeProtectedEntityPredictedReturnPower_Accessor;
}

uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& EA_ActivityCommandType::getChangeProtectedEntityPredictedReturnPower() {
  return *changeProtectedEntityPredictedReturnPower_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setChangeProtectedEntityPredictedReturnPower(const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& accessor) {
  if (&accessor != changeProtectedEntityPredictedReturnPower_Accessor.get()) {
    changeProtectedEntityPredictedReturnPower_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityCommandFrequencyType& EA_ActivityCommandType::getFrequency_() const {
  if (frequency_Accessor) {
    return *frequency_Accessor;
  }
  throw uci::base::UCIException("Error in getFrequency(): An attempt was made to get an optional field that was not enabled, call hasFrequency() to determine if it is safe to call getFrequency()");
}

const uci::type::CapabilityCommandFrequencyType& EA_ActivityCommandType::getFrequency() const {
  return getFrequency_();
}

uci::type::CapabilityCommandFrequencyType& EA_ActivityCommandType::getFrequency() {
  return getFrequency_();
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::setFrequency(const uci::type::CapabilityCommandFrequencyType& accessor) {
  enableFrequency();
  if (&accessor != frequency_Accessor.get()) {
    frequency_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool EA_ActivityCommandType::hasFrequency() const noexcept {
  return static_cast<bool>(frequency_Accessor);
}

uci::type::CapabilityCommandFrequencyType& EA_ActivityCommandType::enableFrequency(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityCommandFrequencyType : type};
  if ((!frequency_Accessor) || (frequency_Accessor->getAccessorType() != requestedType)) {
    frequency_Accessor = CapabilityCommandFrequencyType::create(requestedType);
    if (!frequency_Accessor) {
      throw uci::base::UCIException("Error in enableFrequency(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *frequency_Accessor;
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::clearFrequency() noexcept {
  frequency_Accessor.reset();
  return *this;
}

std::unique_ptr<EA_ActivityCommandType> EA_ActivityCommandType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::eA_ActivityCommandType : type};
  return (requestedType == uci::type::accessorType::eA_ActivityCommandType) ? boost::make_unique<EA_ActivityCommandType>() : nullptr;
}

/**  */
namespace EA_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"EA_ActivityCommandType"};
constexpr const char* ChangeBeam_Name{"ChangeBeam"};
constexpr const char* ChangeDependentActivity_Name{"ChangeDependentActivity"};
constexpr const char* ChangeReceiveAntenna_Name{"ChangeReceiveAntenna"};
constexpr const char* ChangeTransmitAntenna_Name{"ChangeTransmitAntenna"};
constexpr const char* ChangeTarget_Name{"ChangeTarget"};
constexpr const char* ChangeProtectedEntityPredictedReturnPower_Name{"ChangeProtectedEntityPredictedReturnPower"};
constexpr const char* Frequency_Name{"Frequency"};

} // namespace EA_ActivityCommandType_Names

void EA_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EA_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EA_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::ChangeBeam_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_ActivityCommandType::ChangeBeam& boundedList = accessor.getChangeBeam();
        const uci::type::EA_ActivityCommandType::ChangeBeam::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::EA_ActivityChangeBeamCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::ChangeDependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableChangeDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::ChangeReceiveAntenna_Name) {
      SelectAntennaType::deserialize(valueType.second, accessor.enableChangeReceiveAntenna(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::ChangeTransmitAntenna_Name) {
      SelectAntennaType::deserialize(valueType.second, accessor.enableChangeTransmitAntenna(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::ChangeTarget_Name) {
      EA_ChangeLocationAndPowerType::deserialize(valueType.second, accessor.enableChangeTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::ChangeProtectedEntityPredictedReturnPower_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& boundedList = accessor.getChangeProtectedEntityPredictedReturnPower();
        const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ProtectedAssetReturnPowerType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EA_ActivityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
}

std::string EA_ActivityCommandType::serialize(const uci::type::EA_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? EA_ActivityCommandType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, EA_ActivityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::EA_ActivityCommandType::ChangeBeam& boundedList = accessor.getChangeBeam();
    for (uci::type::EA_ActivityCommandType::ChangeBeam::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::EA_ActivityChangeBeamCommandType::serialize(boundedList.at(i), node, EA_ActivityCommandType_Names::ChangeBeam_Name);
    }
  }
  if (accessor.hasChangeDependentActivity()) {
    DependentActivityType::serialize(accessor.getChangeDependentActivity(), node, EA_ActivityCommandType_Names::ChangeDependentActivity_Name);
  }
  if (accessor.hasChangeReceiveAntenna()) {
    SelectAntennaType::serialize(accessor.getChangeReceiveAntenna(), node, EA_ActivityCommandType_Names::ChangeReceiveAntenna_Name);
  }
  if (accessor.hasChangeTransmitAntenna()) {
    SelectAntennaType::serialize(accessor.getChangeTransmitAntenna(), node, EA_ActivityCommandType_Names::ChangeTransmitAntenna_Name);
  }
  if (accessor.hasChangeTarget()) {
    EA_ChangeLocationAndPowerType::serialize(accessor.getChangeTarget(), node, EA_ActivityCommandType_Names::ChangeTarget_Name);
  }
  {
    const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& boundedList = accessor.getChangeProtectedEntityPredictedReturnPower();
    for (uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ProtectedAssetReturnPowerType::serialize(boundedList.at(i), node, EA_ActivityCommandType_Names::ChangeProtectedEntityPredictedReturnPower_Name);
    }
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, EA_ActivityCommandType_Names::Frequency_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::EA_ActivityCommandType>().release());
}

uci::type::EA_ActivityCommandType& EA_ActivityCommandType::create(const uci::type::EA_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::EA_ActivityCommandType> newAccessor{boost::make_unique<asb_uci::type::EA_ActivityCommandType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void EA_ActivityCommandType::destroy(uci::type::EA_ActivityCommandType& accessor) {
  delete dynamic_cast<asb_uci::type::EA_ActivityCommandType*>(&accessor);
}

} // namespace type

} // namespace uci

