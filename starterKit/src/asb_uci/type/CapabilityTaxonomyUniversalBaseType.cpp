/** @file CapabilityTaxonomyUniversalBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:12 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/CapabilityTaxonomyUniversalBaseType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/CapabilityID_Type.h"
#include "asb_uci/type/CapabilityTaxonomyType.h"
#include "asb_uci/type/CapabilityTypeEnum.h"
#include "asb_uci/type/ThreatCapabilityEnum.h"
#include "asb_uci/util/DerivedTypesCopier.h"
#include "asb_uci/util/DerivedTypesCreator.h"
#include "asb_uci/util/DerivedTypesDeserializer.h"
#include "asb_uci/util/DerivedTypesSerializer.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CapabilityTaxonomyType.h"
#include "uci/type/CapabilityTaxonomyUniversalBaseType.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/ThreatCapabilityEnum.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

CapabilityTaxonomyUniversalBaseType::CapabilityTaxonomyUniversalBaseType()
  : capability_Accessor{boost::make_unique<Capability>(0, 25)},
    threatCapability_Accessor{boost::make_unique<ThreatCapability>(0, 15)},
    capabilityInstanceID_Accessor{boost::make_unique<CapabilityInstanceID>(0, SIZE_MAX)} {
}

CapabilityTaxonomyUniversalBaseType::~CapabilityTaxonomyUniversalBaseType() = default;

void CapabilityTaxonomyUniversalBaseType::copy(const uci::type::CapabilityTaxonomyUniversalBaseType& accessor) {
  copyImpl(accessor, false);
}

void CapabilityTaxonomyUniversalBaseType::copyImpl(const uci::type::CapabilityTaxonomyUniversalBaseType& accessor, const bool checkIfDerivation) {
  if (&accessor != this) {
    if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityTaxonomyUniversalBaseType)) {
      const auto& accessorImpl = dynamic_cast<const CapabilityTaxonomyUniversalBaseType&>(accessor);
      setCapability(*(accessorImpl.capability_Accessor));
      if (accessorImpl.capabilityDetails_Accessor) {
        setCapabilityDetails(*(accessorImpl.capabilityDetails_Accessor));
      } else {
        capabilityDetails_Accessor.reset();
      }
      setThreatCapability(*(accessorImpl.threatCapability_Accessor));
      setCapabilityInstanceID(*(accessorImpl.capabilityInstanceID_Accessor));
    } else {
      asb_uci::util::DerivedTypesCopier::copy(accessor, *this);
    }
  }
}

void CapabilityTaxonomyUniversalBaseType::reset() noexcept {
  capability_Accessor->reset();
  capabilityDetails_Accessor.reset();
  threatCapability_Accessor->reset();
  capabilityInstanceID_Accessor->reset();
}

const uci::type::CapabilityTaxonomyUniversalBaseType::Capability& CapabilityTaxonomyUniversalBaseType::getCapability() const {
  return *capability_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType::Capability& CapabilityTaxonomyUniversalBaseType::getCapability() {
  return *capability_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::setCapability(const uci::type::CapabilityTaxonomyUniversalBaseType::Capability& accessor) {
  if (&accessor != capability_Accessor.get()) {
    capability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyUniversalBaseType::getCapabilityDetails_() const {
  if (capabilityDetails_Accessor) {
    return *capabilityDetails_Accessor;
  }
  throw uci::base::UCIException("Error in getCapabilityDetails(): An attempt was made to get an optional field that was not enabled, call hasCapabilityDetails() to determine if it is safe to call getCapabilityDetails()");
}

const uci::type::CapabilityTaxonomyType& CapabilityTaxonomyUniversalBaseType::getCapabilityDetails() const {
  return getCapabilityDetails_();
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyUniversalBaseType::getCapabilityDetails() {
  return getCapabilityDetails_();
}

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::setCapabilityDetails(const uci::type::CapabilityTaxonomyType& accessor) {
  enableCapabilityDetails();
  if (&accessor != capabilityDetails_Accessor.get()) {
    capabilityDetails_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool CapabilityTaxonomyUniversalBaseType::hasCapabilityDetails() const noexcept {
  return static_cast<bool>(capabilityDetails_Accessor);
}

uci::type::CapabilityTaxonomyType& CapabilityTaxonomyUniversalBaseType::enableCapabilityDetails(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityTaxonomyType : type};
  if ((!capabilityDetails_Accessor) || (capabilityDetails_Accessor->getAccessorType() != requestedType)) {
    capabilityDetails_Accessor = CapabilityTaxonomyType::create(requestedType);
    if (!capabilityDetails_Accessor) {
      throw uci::base::UCIException("Error in enableCapabilityDetails(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *capabilityDetails_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::clearCapabilityDetails() noexcept {
  capabilityDetails_Accessor.reset();
  return *this;
}

const uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& CapabilityTaxonomyUniversalBaseType::getThreatCapability() const {
  return *threatCapability_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& CapabilityTaxonomyUniversalBaseType::getThreatCapability() {
  return *threatCapability_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::setThreatCapability(const uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& accessor) {
  if (&accessor != threatCapability_Accessor.get()) {
    threatCapability_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& CapabilityTaxonomyUniversalBaseType::getCapabilityInstanceID() const {
  return *capabilityInstanceID_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& CapabilityTaxonomyUniversalBaseType::getCapabilityInstanceID() {
  return *capabilityInstanceID_Accessor;
}

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::setCapabilityInstanceID(const uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& accessor) {
  if (&accessor != capabilityInstanceID_Accessor.get()) {
    capabilityInstanceID_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<CapabilityTaxonomyUniversalBaseType> CapabilityTaxonomyUniversalBaseType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::capabilityTaxonomyUniversalBaseType : type};
  return std::unique_ptr<CapabilityTaxonomyUniversalBaseType>(dynamic_cast<CapabilityTaxonomyUniversalBaseType*>(asb_uci::util::DerivedTypesCreator::create(requestedType)));
}

/**  */
namespace CapabilityTaxonomyUniversalBaseType_Names {

constexpr const char* Extern_Type_Name{"CapabilityTaxonomyUniversalBaseType"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* CapabilityDetails_Name{"CapabilityDetails"};
constexpr const char* ThreatCapability_Name{"ThreatCapability"};
constexpr const char* CapabilityInstanceID_Name{"CapabilityInstanceID"};

} // namespace CapabilityTaxonomyUniversalBaseType_Names

void CapabilityTaxonomyUniversalBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityTaxonomyUniversalBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityTaxonomyUniversalBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::Capability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyUniversalBaseType::Capability& boundedList = accessor.getCapability();
        const uci::type::CapabilityTaxonomyUniversalBaseType::Capability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::CapabilityDetails_Name) {
      CapabilityTaxonomyType::deserialize(valueType.second, accessor.enableCapabilityDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::ThreatCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& boundedList = accessor.getThreatCapability();
        const uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::CapabilityInstanceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& boundedList = accessor.getCapabilityInstanceID();
        const uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string CapabilityTaxonomyUniversalBaseType::serialize(const uci::type::CapabilityTaxonomyUniversalBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? CapabilityTaxonomyUniversalBaseType_Names::Extern_Type_Name : nodeName)};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityTaxonomyUniversalBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      asb_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityTaxonomyUniversalBaseType_Names::Extern_Type_Name);
    }
    {
      const uci::type::CapabilityTaxonomyUniversalBaseType::Capability& boundedList = accessor.getCapability();
      for (uci::type::CapabilityTaxonomyUniversalBaseType::Capability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        CapabilityTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyUniversalBaseType_Names::Capability_Name, false);
      }
    }
    if (accessor.hasCapabilityDetails()) {
      CapabilityTaxonomyType::serialize(accessor.getCapabilityDetails(), node, CapabilityTaxonomyUniversalBaseType_Names::CapabilityDetails_Name);
    }
    {
      const uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& boundedList = accessor.getThreatCapability();
      for (uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ThreatCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyUniversalBaseType_Names::ThreatCapability_Name, false);
      }
    }
    {
      const uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& boundedList = accessor.getCapabilityInstanceID();
      for (uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        asb_uci::type::CapabilityID_Type::serialize(boundedList.at(i), node, CapabilityTaxonomyUniversalBaseType_Names::CapabilityInstanceID_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    asb_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::CapabilityTaxonomyUniversalBaseType>().release());
}

uci::type::CapabilityTaxonomyUniversalBaseType& CapabilityTaxonomyUniversalBaseType::create(const uci::type::CapabilityTaxonomyUniversalBaseType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::CapabilityTaxonomyUniversalBaseType> newAccessor{boost::make_unique<asb_uci::type::CapabilityTaxonomyUniversalBaseType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void CapabilityTaxonomyUniversalBaseType::destroy(uci::type::CapabilityTaxonomyUniversalBaseType& accessor) {
  delete dynamic_cast<asb_uci::type::CapabilityTaxonomyUniversalBaseType*>(&accessor);
}

} // namespace type

} // namespace uci

