/** @file ThreatExposureType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/ThreatExposureType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/DateTimeRangeType.h"
#include "../../../include/asb_uci/type/EntityID_Type.h"
#include "../../../include/asb_uci/type/Point2D_RangeType.h"
#include "../../../include/asb_uci/type/ThreatExposureProbabilityType.h"
#include "../../../include/asb_uci/util/DerivedTypesDeserializer.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DateTimeRangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/DurationType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/EntityID_Type.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/Point2D_RangeType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatExposureProbabilityType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/ThreatExposureType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThreatExposureType::ThreatExposureType()
  : entityID_Accessor{boost::make_unique<EntityID_Type>()},
    exposureEvent_Accessor{boost::make_unique<ExposureEvent>(0, SIZE_MAX)},
    exposureEventPosition_Accessor{boost::make_unique<ExposureEventPosition>(0, SIZE_MAX)},
    probabilityMetrics_Accessor{boost::make_unique<ProbabilityMetrics>(0, SIZE_MAX)} {
}

ThreatExposureType::~ThreatExposureType() = default;

void ThreatExposureType::copy(const uci::type::ThreatExposureType& accessor) {
  copyImpl(accessor, false);
}

void ThreatExposureType::copyImpl(const uci::type::ThreatExposureType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThreatExposureType&>(accessor);
    setEntityID(*(accessorImpl.entityID_Accessor));
    setExposureTime(accessorImpl.exposureTime_Accessor);
    setExposureEvent(*(accessorImpl.exposureEvent_Accessor));
    setExposureEventPosition(*(accessorImpl.exposureEventPosition_Accessor));
    setProbabilityMetrics(*(accessorImpl.probabilityMetrics_Accessor));
  }
}

void ThreatExposureType::reset() noexcept {
  if (entityID_Accessor->getAccessorType() != uci::type::accessorType::entityID_Type) {
    entityID_Accessor = boost::make_unique<EntityID_Type>();
  } else {
    entityID_Accessor->reset();
  }
  exposureTime_Accessor = 0;
  exposureEvent_Accessor->reset();
  exposureEventPosition_Accessor->reset();
  probabilityMetrics_Accessor->reset();
}

const uci::type::EntityID_Type& ThreatExposureType::getEntityID() const {
  return *entityID_Accessor;
}

uci::type::EntityID_Type& ThreatExposureType::getEntityID() {
  return *entityID_Accessor;
}

uci::type::ThreatExposureType& ThreatExposureType::setEntityID(const uci::type::EntityID_Type& accessor) {
  enableEntityID(accessor.getAccessorType());
  if (&accessor != entityID_Accessor.get()) {
    entityID_Accessor->copyImpl(accessor, true);
  }
  return *this;
}

uci::type::EntityID_Type& ThreatExposureType::enableEntityID(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::entityID_Type : type};
  if ((!entityID_Accessor) || (entityID_Accessor->getAccessorType() != requestedType)) {
    entityID_Accessor = EntityID_Type::create(requestedType);
    if (!entityID_Accessor) {
      throw uci::base::UCIException("Error in enableEntityID(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *entityID_Accessor;
}

uci::type::DurationTypeValue ThreatExposureType::getExposureTime() const {
  return exposureTime_Accessor;
}

uci::type::ThreatExposureType& ThreatExposureType::setExposureTime(uci::type::DurationTypeValue value) {
  exposureTime_Accessor = value;
  return *this;
}


const uci::type::ThreatExposureType::ExposureEvent& ThreatExposureType::getExposureEvent() const {
  return *exposureEvent_Accessor;
}

uci::type::ThreatExposureType::ExposureEvent& ThreatExposureType::getExposureEvent() {
  return *exposureEvent_Accessor;
}

uci::type::ThreatExposureType& ThreatExposureType::setExposureEvent(const uci::type::ThreatExposureType::ExposureEvent& accessor) {
  if (&accessor != exposureEvent_Accessor.get()) {
    exposureEvent_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ThreatExposureType::ExposureEventPosition& ThreatExposureType::getExposureEventPosition() const {
  return *exposureEventPosition_Accessor;
}

uci::type::ThreatExposureType::ExposureEventPosition& ThreatExposureType::getExposureEventPosition() {
  return *exposureEventPosition_Accessor;
}

uci::type::ThreatExposureType& ThreatExposureType::setExposureEventPosition(const uci::type::ThreatExposureType::ExposureEventPosition& accessor) {
  if (&accessor != exposureEventPosition_Accessor.get()) {
    exposureEventPosition_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

const uci::type::ThreatExposureType::ProbabilityMetrics& ThreatExposureType::getProbabilityMetrics() const {
  return *probabilityMetrics_Accessor;
}

uci::type::ThreatExposureType::ProbabilityMetrics& ThreatExposureType::getProbabilityMetrics() {
  return *probabilityMetrics_Accessor;
}

uci::type::ThreatExposureType& ThreatExposureType::setProbabilityMetrics(const uci::type::ThreatExposureType::ProbabilityMetrics& accessor) {
  if (&accessor != probabilityMetrics_Accessor.get()) {
    probabilityMetrics_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

std::unique_ptr<ThreatExposureType> ThreatExposureType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatExposureType : type};
  return (requestedType == uci::type::accessorType::threatExposureType) ? boost::make_unique<ThreatExposureType>() : nullptr;
}

/**  */
namespace ThreatExposureType_Names {

constexpr const char* Extern_Type_Name{"ThreatExposureType"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* ExposureTime_Name{"ExposureTime"};
constexpr const char* ExposureEvent_Name{"ExposureEvent"};
constexpr const char* ExposureEventPosition_Name{"ExposureEventPosition"};
constexpr const char* ProbabilityMetrics_Name{"ProbabilityMetrics"};

} // namespace ThreatExposureType_Names

void ThreatExposureType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreatExposureType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreatExposureType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThreatExposureType_Names::EntityID_Name) {
      asb_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(asb_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatExposureType_Names::ExposureTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExposureTime(asb_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + ThreatExposureType_Names::ExposureEvent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatExposureType::ExposureEvent& boundedList = accessor.getExposureEvent();
        const uci::type::ThreatExposureType::ExposureEvent::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::DateTimeRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreatExposureType_Names::ExposureEventPosition_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatExposureType::ExposureEventPosition& boundedList = accessor.getExposureEventPosition();
        const uci::type::ThreatExposureType::ExposureEventPosition::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::Point2D_RangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreatExposureType_Names::ProbabilityMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreatExposureType::ProbabilityMetrics& boundedList = accessor.getProbabilityMetrics();
        const uci::type::ThreatExposureType::ProbabilityMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        asb_uci::type::ThreatExposureProbabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
}

std::string ThreatExposureType::serialize(const uci::type::ThreatExposureType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThreatExposureType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThreatExposureType_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, ThreatExposureType_Names::EntityID_Name);
  asb_uci::util::SerializationHelpers::serializeDuration(accessor.getExposureTime(), node, ThreatExposureType_Names::ExposureTime_Name);
  {
    const uci::type::ThreatExposureType::ExposureEvent& boundedList = accessor.getExposureEvent();
    for (uci::type::ThreatExposureType::ExposureEvent::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::DateTimeRangeType::serialize(boundedList.at(i), node, ThreatExposureType_Names::ExposureEvent_Name);
    }
  }
  {
    const uci::type::ThreatExposureType::ExposureEventPosition& boundedList = accessor.getExposureEventPosition();
    for (uci::type::ThreatExposureType::ExposureEventPosition::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::Point2D_RangeType::serialize(boundedList.at(i), node, ThreatExposureType_Names::ExposureEventPosition_Name);
    }
  }
  {
    const uci::type::ThreatExposureType::ProbabilityMetrics& boundedList = accessor.getProbabilityMetrics();
    for (uci::type::ThreatExposureType::ProbabilityMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      asb_uci::type::ThreatExposureProbabilityType::serialize(boundedList.at(i), node, ThreatExposureType_Names::ProbabilityMetrics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThreatExposureType& ThreatExposureType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThreatExposureType>().release());
}

uci::type::ThreatExposureType& ThreatExposureType::create(const uci::type::ThreatExposureType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThreatExposureType> newAccessor{boost::make_unique<asb_uci::type::ThreatExposureType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThreatExposureType::destroy(uci::type::ThreatExposureType& accessor) {
  delete dynamic_cast<asb_uci::type::ThreatExposureType*>(&accessor);
}

} // namespace type

} // namespace uci

