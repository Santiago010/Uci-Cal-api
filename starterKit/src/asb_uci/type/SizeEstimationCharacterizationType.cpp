/** @file SizeEstimationCharacterizationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/type/SizeEstimationCharacterizationType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "../../../include/asb_uci/type/OrbitalSurveillanceSensorMinimumCollectionRequirementsType.h"
#include "../../../include/asb_uci/type/OrbitalSurveillanceSizeDataEnum.h"
#include "../../../include/asb_uci/util/SerializationHelpers.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/accessorType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSensorMinimumCollectionRequirementsType.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/OrbitalSurveillanceSizeDataEnum.h"
#include "../../../../cppInterface/2.3.2/include/uci/type/SizeEstimationCharacterizationType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SizeEstimationCharacterizationType::SizeEstimationCharacterizationType() = default;

SizeEstimationCharacterizationType::~SizeEstimationCharacterizationType() = default;

void SizeEstimationCharacterizationType::copy(const uci::type::SizeEstimationCharacterizationType& accessor) {
  copyImpl(accessor, false);
}

void SizeEstimationCharacterizationType::copyImpl(const uci::type::SizeEstimationCharacterizationType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SizeEstimationCharacterizationType&>(accessor);
    if (accessorImpl.minCollection_Accessor) {
      setMinCollection(*(accessorImpl.minCollection_Accessor));
    } else {
      minCollection_Accessor.reset();
    }
    if (accessorImpl.sizeData_Accessor) {
      setSizeData(*(accessorImpl.sizeData_Accessor));
    } else {
      sizeData_Accessor.reset();
    }
  }
}

void SizeEstimationCharacterizationType::reset() noexcept {
  minCollection_Accessor.reset();
  sizeData_Accessor.reset();
}

uci::type::SizeEstimationCharacterizationType::SizeEstimationCharacterizationTypeChoice SizeEstimationCharacterizationType::getSizeEstimationCharacterizationTypeChoiceOrdinal() const noexcept {
  if (minCollection_Accessor) {
    return SIZEESTIMATIONCHARACTERIZATIONTYPE_CHOICE_MINCOLLECTION;
  }
  if (sizeData_Accessor) {
    return SIZEESTIMATIONCHARACTERIZATIONTYPE_CHOICE_SIZEDATA;
  }
  return SIZEESTIMATIONCHARACTERIZATIONTYPE_CHOICE_NONE;
}

uci::type::SizeEstimationCharacterizationType& SizeEstimationCharacterizationType::setSizeEstimationCharacterizationTypeChoiceOrdinal(uci::type::SizeEstimationCharacterizationType::SizeEstimationCharacterizationTypeChoice ordinal, uci::base::accessorType::AccessorType type) {
  switch (ordinal) {
    case SIZEESTIMATIONCHARACTERIZATIONTYPE_CHOICE_MINCOLLECTION:
      chooseMinCollection("setSizeEstimationCharacterizationTypeChoiceOrdinal", type);
      break;
    case SIZEESTIMATIONCHARACTERIZATIONTYPE_CHOICE_SIZEDATA:
      chooseSizeData("setSizeEstimationCharacterizationTypeChoiceOrdinal", type);
      break;
    default:
      throw uci::base::UCIException("Error in setSizeEstimationCharacterizationTypeChoiceOrdinal(): The provided ordinal is not valid");
      break;
  }
  return *this;
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& SizeEstimationCharacterizationType::getMinCollection_() const {
  if (minCollection_Accessor) {
    return *minCollection_Accessor;
  }
  throw uci::base::UCIException("Error in getMinCollection(): Unable to get MinCollection, field not selected");
}

const uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& SizeEstimationCharacterizationType::getMinCollection() const {
  return getMinCollection_();
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& SizeEstimationCharacterizationType::getMinCollection() {
  return getMinCollection_();
}

uci::type::SizeEstimationCharacterizationType& SizeEstimationCharacterizationType::setMinCollection(const uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& accessor) {
  chooseMinCollection(accessor.getAccessorType());
  if (&accessor != minCollection_Accessor.get()) {
    minCollection_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool SizeEstimationCharacterizationType::isMinCollection() const noexcept {
  return static_cast<bool>(minCollection_Accessor);
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& SizeEstimationCharacterizationType::chooseMinCollection(const std::string& method, uci::base::accessorType::AccessorType type) {
  sizeData_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSensorMinimumCollectionRequirementsType : type};
  if ((!minCollection_Accessor) || (minCollection_Accessor->getAccessorType() != requestedType)) {
    minCollection_Accessor = OrbitalSurveillanceSensorMinimumCollectionRequirementsType::create(type);
    if (!minCollection_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *minCollection_Accessor;
}

uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType& SizeEstimationCharacterizationType::chooseMinCollection(uci::base::accessorType::AccessorType type) {
  return chooseMinCollection("chooseMinCollection", type);
}

uci::type::OrbitalSurveillanceSizeDataEnum& SizeEstimationCharacterizationType::getSizeData_() const {
  if (sizeData_Accessor) {
    return *sizeData_Accessor;
  }
  throw uci::base::UCIException("Error in getSizeData(): Unable to get SizeData, field not selected");
}

const uci::type::OrbitalSurveillanceSizeDataEnum& SizeEstimationCharacterizationType::getSizeData() const {
  return getSizeData_();
}

uci::type::OrbitalSurveillanceSizeDataEnum& SizeEstimationCharacterizationType::getSizeData() {
  return getSizeData_();
}

uci::type::SizeEstimationCharacterizationType& SizeEstimationCharacterizationType::setSizeData(const uci::type::OrbitalSurveillanceSizeDataEnum& accessor) {
  chooseSizeData();
  if (&accessor != sizeData_Accessor.get()) {
    sizeData_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::SizeEstimationCharacterizationType& SizeEstimationCharacterizationType::setSizeData(uci::type::OrbitalSurveillanceSizeDataEnum::EnumerationItem value) {
  chooseSizeData().setValue(value);
  return *this;
}

bool SizeEstimationCharacterizationType::isSizeData() const noexcept {
  return static_cast<bool>(sizeData_Accessor);
}

uci::type::OrbitalSurveillanceSizeDataEnum& SizeEstimationCharacterizationType::chooseSizeData(const std::string& method, uci::base::accessorType::AccessorType type) {
  minCollection_Accessor.reset();
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::orbitalSurveillanceSizeDataEnum : type};
  if ((!sizeData_Accessor) || (sizeData_Accessor->getAccessorType() != requestedType)) {
    sizeData_Accessor = OrbitalSurveillanceSizeDataEnum::create(type);
    if (!sizeData_Accessor) {
      throw uci::base::UCIException("Error in " + method + "(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *sizeData_Accessor;
}

uci::type::OrbitalSurveillanceSizeDataEnum& SizeEstimationCharacterizationType::chooseSizeData(uci::base::accessorType::AccessorType type) {
  return chooseSizeData("chooseSizeData", type);
}

std::unique_ptr<SizeEstimationCharacterizationType> SizeEstimationCharacterizationType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sizeEstimationCharacterizationType : type};
  return (requestedType == uci::type::accessorType::sizeEstimationCharacterizationType) ? boost::make_unique<SizeEstimationCharacterizationType>() : nullptr;
}

/**  */
namespace SizeEstimationCharacterizationType_Names {

constexpr const char* Extern_Type_Name{"SizeEstimationCharacterizationType"};
constexpr const char* MinCollection_Name{"MinCollection"};
constexpr const char* SizeData_Name{"SizeData"};

} // namespace SizeEstimationCharacterizationType_Names

void SizeEstimationCharacterizationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SizeEstimationCharacterizationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SizeEstimationCharacterizationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SizeEstimationCharacterizationType_Names::MinCollection_Name) {
      OrbitalSurveillanceSensorMinimumCollectionRequirementsType::deserialize(valueType.second, accessor.chooseMinCollection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SizeEstimationCharacterizationType_Names::SizeData_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseSizeData().setValueFromName(*value);
      }
    }
  }
}

std::string SizeEstimationCharacterizationType::serialize(const uci::type::SizeEstimationCharacterizationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SizeEstimationCharacterizationType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SizeEstimationCharacterizationType_Names::Extern_Type_Name);
  }
  if (accessor.isMinCollection()) {
    OrbitalSurveillanceSensorMinimumCollectionRequirementsType::serialize(accessor.getMinCollection(), node, SizeEstimationCharacterizationType_Names::MinCollection_Name);
  } else if (accessor.isSizeData()) {
    OrbitalSurveillanceSizeDataEnum::serialize(accessor.getSizeData(), node, SizeEstimationCharacterizationType_Names::SizeData_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SizeEstimationCharacterizationType& SizeEstimationCharacterizationType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SizeEstimationCharacterizationType>().release());
}

uci::type::SizeEstimationCharacterizationType& SizeEstimationCharacterizationType::create(const uci::type::SizeEstimationCharacterizationType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SizeEstimationCharacterizationType> newAccessor{boost::make_unique<asb_uci::type::SizeEstimationCharacterizationType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SizeEstimationCharacterizationType::destroy(uci::type::SizeEstimationCharacterizationType& accessor) {
  delete dynamic_cast<asb_uci::type::SizeEstimationCharacterizationType*>(&accessor);
}

} // namespace type

} // namespace uci

