/** @file SAR_CollectionConstraintsQualityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/SAR_CollectionConstraintsQualityType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/NIIRS_Type.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/NIIRS_Type.h"
#include "uci/type/SAR_CollectionConstraintsQualityType.h"
#include "xs/type/simpleXmlSchemaPrimitives.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

SAR_CollectionConstraintsQualityType::SAR_CollectionConstraintsQualityType() = default;

SAR_CollectionConstraintsQualityType::~SAR_CollectionConstraintsQualityType() = default;

void SAR_CollectionConstraintsQualityType::copy(const uci::type::SAR_CollectionConstraintsQualityType& accessor) {
  copyImpl(accessor, false);
}

void SAR_CollectionConstraintsQualityType::copyImpl(const uci::type::SAR_CollectionConstraintsQualityType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const SAR_CollectionConstraintsQualityType&>(accessor);
    if (accessorImpl.desiredNIIRS_Accessor) {
      setDesiredNIIRS(*(accessorImpl.desiredNIIRS_Accessor));
    } else {
      desiredNIIRS_Accessor.reset();
    }
    if (accessorImpl.minimumNIIRS_Accessor) {
      setMinimumNIIRS(*(accessorImpl.minimumNIIRS_Accessor));
    } else {
      minimumNIIRS_Accessor.reset();
    }
    if (accessorImpl.hasMinimumResolution()) {
      setMinimumResolution(accessorImpl.getMinimumResolution());
    } else {
      clearMinimumResolution();
    }
  }
}

void SAR_CollectionConstraintsQualityType::reset() noexcept {
  desiredNIIRS_Accessor.reset();
  minimumNIIRS_Accessor.reset();
  clearMinimumResolution();
}

uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::getDesiredNIIRS_() const {
  if (desiredNIIRS_Accessor) {
    return *desiredNIIRS_Accessor;
  }
  throw uci::base::UCIException("Error in getDesiredNIIRS(): An attempt was made to get an optional field that was not enabled, call hasDesiredNIIRS() to determine if it is safe to call getDesiredNIIRS()");
}

const uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::getDesiredNIIRS() const {
  return getDesiredNIIRS_();
}

uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::getDesiredNIIRS() {
  return getDesiredNIIRS_();
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setDesiredNIIRS(const uci::type::NIIRS_Type& value) {
  return setDesiredNIIRS(value.c_str());
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setDesiredNIIRS(const std::string& value) {
  return setDesiredNIIRS(value.c_str());
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setDesiredNIIRS(const char* value) {
  enableDesiredNIIRS().setStringValue(value);
  return *this;
}

bool SAR_CollectionConstraintsQualityType::hasDesiredNIIRS() const noexcept {
  return static_cast<bool>(desiredNIIRS_Accessor);
}

uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::enableDesiredNIIRS(uci::base::accessorType::AccessorType type) {
  if (!desiredNIIRS_Accessor) {
    desiredNIIRS_Accessor = NIIRS_Type::create(type);
  }
  return *desiredNIIRS_Accessor;
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::clearDesiredNIIRS() noexcept {
  desiredNIIRS_Accessor.reset();
  return *this;
}

uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::getMinimumNIIRS_() const {
  if (minimumNIIRS_Accessor) {
    return *minimumNIIRS_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumNIIRS(): An attempt was made to get an optional field that was not enabled, call hasMinimumNIIRS() to determine if it is safe to call getMinimumNIIRS()");
}

const uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::getMinimumNIIRS() const {
  return getMinimumNIIRS_();
}

uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::getMinimumNIIRS() {
  return getMinimumNIIRS_();
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setMinimumNIIRS(const uci::type::NIIRS_Type& value) {
  return setMinimumNIIRS(value.c_str());
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setMinimumNIIRS(const std::string& value) {
  return setMinimumNIIRS(value.c_str());
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setMinimumNIIRS(const char* value) {
  enableMinimumNIIRS().setStringValue(value);
  return *this;
}

bool SAR_CollectionConstraintsQualityType::hasMinimumNIIRS() const noexcept {
  return static_cast<bool>(minimumNIIRS_Accessor);
}

uci::type::NIIRS_Type& SAR_CollectionConstraintsQualityType::enableMinimumNIIRS(uci::base::accessorType::AccessorType type) {
  if (!minimumNIIRS_Accessor) {
    minimumNIIRS_Accessor = NIIRS_Type::create(type);
  }
  return *minimumNIIRS_Accessor;
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::clearMinimumNIIRS() noexcept {
  minimumNIIRS_Accessor.reset();
  return *this;
}

xs::Double SAR_CollectionConstraintsQualityType::getMinimumResolution() const {
  if (minimumResolution_Accessor) {
    return *minimumResolution_Accessor;
  }
  throw uci::base::UCIException("Error in getMinimumResolution(): An attempt was made to get an optional field that was not enabled, call hasMinimumResolution() to determine if it is safe to call getMinimumResolution()");
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::setMinimumResolution(xs::Double value) {
  minimumResolution_Accessor = value;
  return *this;
}

bool SAR_CollectionConstraintsQualityType::hasMinimumResolution() const noexcept {
  return minimumResolution_Accessor.has_value();
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::clearMinimumResolution() noexcept {
  minimumResolution_Accessor.reset();
  return *this;
}

std::unique_ptr<SAR_CollectionConstraintsQualityType> SAR_CollectionConstraintsQualityType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::sAR_CollectionConstraintsQualityType : type};
  return (requestedType == uci::type::accessorType::sAR_CollectionConstraintsQualityType) ? boost::make_unique<SAR_CollectionConstraintsQualityType>() : nullptr;
}

/**  */
namespace SAR_CollectionConstraintsQualityType_Names {

constexpr const char* Extern_Type_Name{"SAR_CollectionConstraintsQualityType"};
constexpr const char* DesiredNIIRS_Name{"DesiredNIIRS"};
constexpr const char* MinimumNIIRS_Name{"MinimumNIIRS"};
constexpr const char* MinimumResolution_Name{"MinimumResolution"};

} // namespace SAR_CollectionConstraintsQualityType_Names

void SAR_CollectionConstraintsQualityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CollectionConstraintsQualityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CollectionConstraintsQualityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsQualityType_Names::DesiredNIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDesiredNIIRS(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsQualityType_Names::MinimumNIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumNIIRS(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsQualityType_Names::MinimumResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumResolution(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string SAR_CollectionConstraintsQualityType::serialize(const uci::type::SAR_CollectionConstraintsQualityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? SAR_CollectionConstraintsQualityType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CollectionConstraintsQualityType_Names::Extern_Type_Name);
  }
  if (accessor.hasDesiredNIIRS()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getDesiredNIIRS(), node, SAR_CollectionConstraintsQualityType_Names::DesiredNIIRS_Name);
  }
  if (accessor.hasMinimumNIIRS()) {
    asb_uci::util::SerializationHelpers::serializeString(accessor.getMinimumNIIRS(), node, SAR_CollectionConstraintsQualityType_Names::MinimumNIIRS_Name);
  }
  if (accessor.hasMinimumResolution()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumResolution(), node, SAR_CollectionConstraintsQualityType_Names::MinimumResolution_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::SAR_CollectionConstraintsQualityType>().release());
}

uci::type::SAR_CollectionConstraintsQualityType& SAR_CollectionConstraintsQualityType::create(const uci::type::SAR_CollectionConstraintsQualityType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::SAR_CollectionConstraintsQualityType> newAccessor{boost::make_unique<asb_uci::type::SAR_CollectionConstraintsQualityType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void SAR_CollectionConstraintsQualityType::destroy(uci::type::SAR_CollectionConstraintsQualityType& accessor) {
  delete dynamic_cast<asb_uci::type::SAR_CollectionConstraintsQualityType*>(&accessor);
}

} // namespace type

} // namespace uci

