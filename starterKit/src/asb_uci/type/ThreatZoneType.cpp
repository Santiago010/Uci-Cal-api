/** @file ThreatZoneType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:15 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/type/ThreatZoneType.h"

#include <memory>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/smart_ptr/make_unique.hpp>

#include "asb_uci/type/AreaChoiceType.h"
#include "asb_uci/type/RiskPrioritizationEnum.h"
#include "asb_uci/util/SerializationHelpers.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/AreaChoiceType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RiskPrioritizationEnum.h"
#include "uci/type/ThreatZoneType.h"

/**  */
namespace asb_uci {

/** The namespace in which all generated data types are declared */
namespace type {

ThreatZoneType::ThreatZoneType() = default;

ThreatZoneType::~ThreatZoneType() = default;

void ThreatZoneType::copy(const uci::type::ThreatZoneType& accessor) {
  copyImpl(accessor, false);
}

void ThreatZoneType::copyImpl(const uci::type::ThreatZoneType& accessor, const bool /*checkIfDerivation*/) {
  if (&accessor != this) {
    const auto& accessorImpl = dynamic_cast<const ThreatZoneType&>(accessor);
    if (accessorImpl.threatZoneArea_Accessor) {
      setThreatZoneArea(*(accessorImpl.threatZoneArea_Accessor));
    } else {
      threatZoneArea_Accessor.reset();
    }
    if (accessorImpl.detectionEnvelopeViolationSeverity_Accessor) {
      setDetectionEnvelopeViolationSeverity(*(accessorImpl.detectionEnvelopeViolationSeverity_Accessor));
    } else {
      detectionEnvelopeViolationSeverity_Accessor.reset();
    }
    if (accessorImpl.hasEffectiveProbability()) {
      setEffectiveProbability(accessorImpl.getEffectiveProbability());
    } else {
      clearEffectiveProbability();
    }
  }
}

void ThreatZoneType::reset() noexcept {
  threatZoneArea_Accessor.reset();
  detectionEnvelopeViolationSeverity_Accessor.reset();
  clearEffectiveProbability();
}

uci::type::AreaChoiceType& ThreatZoneType::getThreatZoneArea_() const {
  if (threatZoneArea_Accessor) {
    return *threatZoneArea_Accessor;
  }
  throw uci::base::UCIException("Error in getThreatZoneArea(): An attempt was made to get an optional field that was not enabled, call hasThreatZoneArea() to determine if it is safe to call getThreatZoneArea()");
}

const uci::type::AreaChoiceType& ThreatZoneType::getThreatZoneArea() const {
  return getThreatZoneArea_();
}

uci::type::AreaChoiceType& ThreatZoneType::getThreatZoneArea() {
  return getThreatZoneArea_();
}

uci::type::ThreatZoneType& ThreatZoneType::setThreatZoneArea(const uci::type::AreaChoiceType& accessor) {
  enableThreatZoneArea();
  if (&accessor != threatZoneArea_Accessor.get()) {
    threatZoneArea_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

bool ThreatZoneType::hasThreatZoneArea() const noexcept {
  return static_cast<bool>(threatZoneArea_Accessor);
}

uci::type::AreaChoiceType& ThreatZoneType::enableThreatZoneArea(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::areaChoiceType : type};
  if ((!threatZoneArea_Accessor) || (threatZoneArea_Accessor->getAccessorType() != requestedType)) {
    threatZoneArea_Accessor = AreaChoiceType::create(requestedType);
    if (!threatZoneArea_Accessor) {
      throw uci::base::UCIException("Error in enableThreatZoneArea(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *threatZoneArea_Accessor;
}

uci::type::ThreatZoneType& ThreatZoneType::clearThreatZoneArea() noexcept {
  threatZoneArea_Accessor.reset();
  return *this;
}

uci::type::RiskPrioritizationEnum& ThreatZoneType::getDetectionEnvelopeViolationSeverity_() const {
  if (detectionEnvelopeViolationSeverity_Accessor) {
    return *detectionEnvelopeViolationSeverity_Accessor;
  }
  throw uci::base::UCIException("Error in getDetectionEnvelopeViolationSeverity(): An attempt was made to get an optional field that was not enabled, call hasDetectionEnvelopeViolationSeverity() to determine if it is safe to call getDetectionEnvelopeViolationSeverity()");
}

const uci::type::RiskPrioritizationEnum& ThreatZoneType::getDetectionEnvelopeViolationSeverity() const {
  return getDetectionEnvelopeViolationSeverity_();
}

uci::type::RiskPrioritizationEnum& ThreatZoneType::getDetectionEnvelopeViolationSeverity() {
  return getDetectionEnvelopeViolationSeverity_();
}

uci::type::ThreatZoneType& ThreatZoneType::setDetectionEnvelopeViolationSeverity(const uci::type::RiskPrioritizationEnum& accessor) {
  enableDetectionEnvelopeViolationSeverity();
  if (&accessor != detectionEnvelopeViolationSeverity_Accessor.get()) {
    detectionEnvelopeViolationSeverity_Accessor->copyImpl(accessor, false);
  }
  return *this;
}

uci::type::ThreatZoneType& ThreatZoneType::setDetectionEnvelopeViolationSeverity(const uci::type::RiskPrioritizationEnum::EnumerationItem value) {
  enableDetectionEnvelopeViolationSeverity().setValue(value);
  return *this;
}

bool ThreatZoneType::hasDetectionEnvelopeViolationSeverity() const noexcept {
  return static_cast<bool>(detectionEnvelopeViolationSeverity_Accessor);
}

uci::type::RiskPrioritizationEnum& ThreatZoneType::enableDetectionEnvelopeViolationSeverity(uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::riskPrioritizationEnum : type};
  if ((!detectionEnvelopeViolationSeverity_Accessor) || (detectionEnvelopeViolationSeverity_Accessor->getAccessorType() != requestedType)) {
    detectionEnvelopeViolationSeverity_Accessor = RiskPrioritizationEnum::create(requestedType);
    if (!detectionEnvelopeViolationSeverity_Accessor) {
      throw uci::base::UCIException("Error in enableDetectionEnvelopeViolationSeverity(): Specified type is not equal to nor derived from the native type of object");
    }
  }
  return *detectionEnvelopeViolationSeverity_Accessor;
}

uci::type::ThreatZoneType& ThreatZoneType::clearDetectionEnvelopeViolationSeverity() noexcept {
  detectionEnvelopeViolationSeverity_Accessor.reset();
  return *this;
}

uci::type::PercentTypeValue ThreatZoneType::getEffectiveProbability() const {
  if (effectiveProbability_Accessor) {
    return *effectiveProbability_Accessor;
  }
  throw uci::base::UCIException("Error in getEffectiveProbability(): An attempt was made to get an optional field that was not enabled, call hasEffectiveProbability() to determine if it is safe to call getEffectiveProbability()");
}

uci::type::ThreatZoneType& ThreatZoneType::setEffectiveProbability(uci::type::PercentTypeValue value) {
  effectiveProbability_Accessor = value;
  return *this;
}

bool ThreatZoneType::hasEffectiveProbability() const noexcept {
  return effectiveProbability_Accessor.has_value();
}

uci::type::ThreatZoneType& ThreatZoneType::clearEffectiveProbability() noexcept {
  effectiveProbability_Accessor.reset();
  return *this;
}

std::unique_ptr<ThreatZoneType> ThreatZoneType::create(const uci::base::accessorType::AccessorType type) {
  const uci::base::accessorType::AccessorType requestedType{(type == uci::base::accessorType::null) ? uci::type::accessorType::threatZoneType : type};
  return (requestedType == uci::type::accessorType::threatZoneType) ? boost::make_unique<ThreatZoneType>() : nullptr;
}

/**  */
namespace ThreatZoneType_Names {

constexpr const char* Extern_Type_Name{"ThreatZoneType"};
constexpr const char* ThreatZoneArea_Name{"ThreatZoneArea"};
constexpr const char* DetectionEnvelopeViolationSeverity_Name{"DetectionEnvelopeViolationSeverity"};
constexpr const char* EffectiveProbability_Name{"EffectiveProbability"};

} // namespace ThreatZoneType_Names

void ThreatZoneType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreatZoneType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreatZoneType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = asb_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ThreatZoneType_Names::ThreatZoneArea_Name) {
      AreaChoiceType::deserialize(valueType.second, accessor.enableThreatZoneArea(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreatZoneType_Names::DetectionEnvelopeViolationSeverity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDetectionEnvelopeViolationSeverity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreatZoneType_Names::EffectiveProbability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEffectiveProbability(asb_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
}

std::string ThreatZoneType::serialize(const uci::type::ThreatZoneType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{(nodeName.empty() ? ThreatZoneType_Names::Extern_Type_Name : nodeName)};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    asb_uci::util::SerializationHelpers::addTypeAttribute(node, ThreatZoneType_Names::Extern_Type_Name);
  }
  if (accessor.hasThreatZoneArea()) {
    AreaChoiceType::serialize(accessor.getThreatZoneArea(), node, ThreatZoneType_Names::ThreatZoneArea_Name);
  }
  if (accessor.hasDetectionEnvelopeViolationSeverity()) {
    RiskPrioritizationEnum::serialize(accessor.getDetectionEnvelopeViolationSeverity(), node, ThreatZoneType_Names::DetectionEnvelopeViolationSeverity_Name, false);
  }
  if (accessor.hasEffectiveProbability()) {
    asb_uci::util::SerializationHelpers::serializeDouble(accessor.getEffectiveProbability(), node, ThreatZoneType_Names::EffectiveProbability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

uci::type::ThreatZoneType& ThreatZoneType::create(uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  return *(boost::make_unique<asb_uci::type::ThreatZoneType>().release());
}

uci::type::ThreatZoneType& ThreatZoneType::create(const uci::type::ThreatZoneType& accessor, uci::base::AbstractServiceBusConnection* /*abstractServiceBusConnection*/) {
  std::unique_ptr<asb_uci::type::ThreatZoneType> newAccessor{boost::make_unique<asb_uci::type::ThreatZoneType>()};
  newAccessor->copyImpl(accessor, false);
  return *(newAccessor.release());
}

void ThreatZoneType::destroy(uci::type::ThreatZoneType& accessor) {
  delete dynamic_cast<asb_uci::type::ThreatZoneType*>(&accessor);
}

} // namespace type

} // namespace uci

