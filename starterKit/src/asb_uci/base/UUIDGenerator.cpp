/** @file UUIDGenerator.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/base/UUIDGenerator.h"

#include <chrono>
#include <cstdint>
#include <mutex>
#include <sstream>
#include <string>

#include <boost/random/random_device.hpp>
#include <boost/smart_ptr/make_unique.hpp>
#include <boost/uuid/name_generator_md5.hpp>
#include <boost/uuid/random_generator.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_io.hpp>

#include "../../../include/asb_uci/base/ConfigReader.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UUID.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

UUIDGenerator::UUIDGenerator()
  : configReader{boost::make_unique<ConfigReader>("")} {
}

uci::base::UUID UUIDGenerator::createVersion3UUID(const uci::base::UUID& nspace, const std::string& name) {
  std::stringstream uuidNamespaceStream{nspace.toString()};
  boost::uuids::uuid namespaceUUID{};
  uuidNamespaceStream >> namespaceUUID;
  const boost::uuids::name_generator_md5 uuidNameGenerator{namespaceUUID};
  const boost::uuids::uuid boostUUID = uuidNameGenerator(name);
  return uci::base::UUID::fromString(boost::uuids::to_string(boostUUID));
}

uci::base::UUID UUIDGenerator::createVersion3UUID(const std::string& name) const {
  std::stringstream uuidNamespaceStream{configReader->getUUIDGenerationNamespaceUUID().toString()};
  boost::uuids::uuid namespaceUUID{};
  uuidNamespaceStream >> namespaceUUID;
  const boost::uuids::name_generator_md5 uuidNameGenerator{namespaceUUID};
  const boost::uuids::uuid boostUUID = uuidNameGenerator(name);
  return uci::base::UUID::fromString(boost::uuids::to_string(boostUUID));
}

uci::base::UUID UUIDGenerator::generateType1UUID() {
  if (uuidClockSequence == 0) {
    uuidClockSequence = static_cast<std::uint16_t>(uuidRandomDevice());
    uuidNodeID = uuidRandomDevice();
    uuidNodeID = (uuidNodeID << 32) | uuidRandomDevice();
  }
  const std::chrono::system_clock::time_point now{std::chrono::system_clock::now()};
  const std::chrono::system_clock::duration duration_since_epoch{now.time_since_epoch()};
  const std::chrono::nanoseconds duration_nanos{std::chrono::duration_cast<std::chrono::nanoseconds>(duration_since_epoch)};
  // calculate number of 100 nanosecond intervals from 15 October 1582 (epoch from chrono is January 1 1970)
  std::uint64_t timestamp{static_cast<std::uint64_t>((duration_nanos.count() / 100) + 0x01B21DD213814000L)};
  if (timestamp != uuidTimestampPrevious) {
    uuidTimestampCount = 0;
    uuidTimestampPrevious = timestamp;
  } else {
    // multiple generations during a single system time interval
    ++uuidTimestampCount;
    timestamp += uuidTimestampCount;
  }

  const std::uint32_t time_low{static_cast<std::uint32_t>(timestamp & 0xffffffff)};
  const std::uint16_t time_mid{static_cast<std::uint16_t>((timestamp >> 32) & 0xffff)};
  std::uint16_t time_hi_version{static_cast<std::uint16_t>((timestamp >> 48) & 0xfff)}; // truncate timestamp to 60 bits

  // version - time based
  time_hi_version |= 0x1000;

  const std::uint8_t clock_seq_low{static_cast<std::uint8_t>(uuidClockSequence & 0xff)};
  std::uint8_t clock_seq_hi_variant{static_cast<std::uint8_t>((uuidClockSequence >> 8) & 0x3f)}; // truncate clock sequence to 14 bits

  // variant - rfc 4122
  clock_seq_hi_variant |= 0x80;

  std::uint16_t clock_seq{0};
  clock_seq = clock_seq_hi_variant << 8;
  clock_seq |= clock_seq_low;

  std::uint16_t node_16{static_cast<std::uint16_t>(uuidNodeID >> 32)};
  const std::uint32_t node_32{static_cast<std::uint32_t>(uuidNodeID)};

  // set multicast bit in generated node id
  node_16 |= 0x0100;

  std::uint64_t upper64bits{0};
  upper64bits = static_cast<uint64_t>(time_low) << 32;
  upper64bits |= static_cast<uint64_t>(time_mid) << 16;
  upper64bits |= static_cast<uint64_t>(time_hi_version);

  std::uint64_t lower64bits{0};
  lower64bits = static_cast<uint64_t>(clock_seq) << 48;
  lower64bits |= static_cast<uint64_t>(node_16) << 32;
  lower64bits |= static_cast<uint64_t>(node_32);

  return {upper64bits, lower64bits};
}

uci::base::UUID UUIDGenerator::generateType4UUID() {
  const boost::uuids::uuid boostUUID = uuidRandomGenerator();
  return uci::base::UUID{uci::base::UUID::fromString(boost::uuids::to_string(boostUUID))};
}

uci::base::UUID UUIDGenerator::generateUUID() {
  const std::lock_guard<std::mutex> guard{uuidGeneratorLock};
  if (configReader->getUUIDGenerationType() == ConfigReader::UUIDGenerationType::TIME) {
    return generateType1UUID();
  }
  return generateType4UUID();
}

ConfigReader& UUIDGenerator::getConfig() const {
  return *configReader;
}

UUIDGenerator& getUUIDGenerator() {
  static UUIDGenerator uuidGenerator;
  return uuidGenerator;
}

} // namespace base

} // namespace asb_uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

UUID UUID::generateUUID() {
  return asb_uci::base::getUUIDGenerator().generateUUID();
}

UUID UUID::getNamespaceUUID() {
  return asb_uci::base::getUUIDGenerator().getConfig().getUUIDGenerationNamespaceUUID();
}

UUID UUID::createVersion3UUID(const uci::base::UUID& nspace, const std::string& name) {
  return asb_uci::base::UUIDGenerator::createVersion3UUID(nspace, name);
}

UUID UUID::createVersion3UUID(const std::string& name) {
  return asb_uci::base::getUUIDGenerator().createVersion3UUID(name);
}

} // namespace base

} // namespace uci

