/** @file ConfigReader.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../include/asb_uci/base/ConfigReader.h"

#include <cstdlib>
#include <exception>
#include <sstream>
#include <string>

#include <boost/none.hpp>
#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>

#include "../../../include/asb_uci/base/UUIDGenerator.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UUID.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

void ConfigReader::parseConfig(const std::string& serviceIdentifier) {
  if (serviceIdentifier.empty()) {
    parseUUIDs = false;
  }
  const char* xmlFileNameFromEnv{std::getenv("OMS_CAL_CONFIG")};
  std::string xmlFileName;
  if (xmlFileNameFromEnv != nullptr) {
    xmlFileName.append(xmlFileNameFromEnv);
  } else {
    xmlFileName.append("StarterKitCALConfig.xml");
  }

  try {
    boost::property_tree::ptree propTree;
    boost::property_tree::xml_parser::read_xml(xmlFileName, propTree, boost::property_tree::xml_parser::no_comments);
    for (const boost::property_tree::ptree::value_type& calConfig : propTree.get_child("CALConfig")) {
      if (calConfig.first == "Connections") {
        for (const boost::property_tree::ptree::value_type& connection : calConfig.second) {
          if (connection.first == "Connection") {
            boost::optional<std::string> name;
            boost::optional<std::string> url;
            for (const boost::property_tree::ptree::value_type& connectionValue : connection.second) {
              if (connectionValue.first == "Name") {
                name = connectionValue.second.get_value_optional<std::string>();
              } else if (connectionValue.first == "URL") {
                url = connectionValue.second.get_value_optional<std::string>();
              }
            }
            if (name && url) {
              connections.insert({*name, *url});
            }
          }
        }
      } else if (calConfig.first == "DefaultQoS") {
        for (const boost::property_tree::ptree::value_type& defaultQoS : calConfig.second) {
          if (const boost::optional<std::string> value = defaultQoS.second.get_value_optional<std::string>()) {
            qosParams.insert({defaultQoS.first, *value});
          }
        }
      } else if (calConfig.first == "Externalizers") {
        for (const boost::property_tree::ptree::value_type& externalizer : calConfig.second) {
          if (externalizer.first == "Externalizer") {
            boost::optional<std::string> encoding;
            boost::optional<std::string> library;
            for (const boost::property_tree::ptree::value_type& externalizerValue : externalizer.second) {
              if (externalizerValue.first == "Encoding") {
                encoding = externalizerValue.second.get_value_optional<std::string>();
              } else if (externalizerValue.first == "Library") {
                library = externalizerValue.second.get_value_optional<std::string>();
              }
            }
            if (encoding && library) {
              externalizers.insert({*encoding, *library});
            }
          }
        }
      } else if (calConfig.first == "Services") {
        for (const boost::property_tree::ptree::value_type& service : calConfig.second) {
          if (service.first == "Service") {
            boost::optional<std::string> idValue;
            for (const boost::property_tree::ptree::value_type& serviceValue : service.second) {
              if (serviceValue.first == "<xmlattr>") {
                for (const boost::property_tree::ptree::value_type& attr : serviceValue.second) {
                  if (attr.first == "id") {
                    idValue = attr.second.get_value_optional<std::string>();
                  }
                }
              } else if (serviceValue.first == "Capabilities") {
                for (const boost::property_tree::ptree::value_type& capability : serviceValue.second) {
                  if (capability.first == "Capability") {
                    boost::optional<std::string> name;
                    uci::base::UUID capabilityUUID;
                    bool capabilityUUIDfound{false};
                    for (const boost::property_tree::ptree::value_type& capabilityValue : capability.second) {
                      if (capabilityValue.first == "Name") {
                        name = capabilityValue.second.get_value_optional<std::string>();
                      } else if (capabilityValue.first == "CapabilityUUID") {
                        if (boost::optional<uci::base::UUID> value = parseConfigUUID(capabilityValue.second)) {
                          capabilityUUID = *value;
                          capabilityUUIDfound = true;
                        }
                      }
                    }
                    if (name && capabilityUUIDfound) {
                      capabilityIds.insert({*name, capabilityUUID});
                    }
                  }
                }
              } else if (serviceValue.first == "Components") {
                for (const boost::property_tree::ptree::value_type& component : serviceValue.second) {
                  if (component.first == "Component") {
                    boost::optional<std::string> name;
                    uci::base::UUID componentUUID;
                    bool componentUUIDfound{false};
                    for (const boost::property_tree::ptree::value_type& componentValue : component.second) {
                      if (componentValue.first == "Name") {
                        name = componentValue.second.get_value_optional<std::string>();
                      } else if (componentValue.first == "ComponentUUID") {
                        if (boost::optional<uci::base::UUID> value = parseConfigUUID(componentValue.second)) {
                          componentUUID = *value;
                          componentUUIDfound = true;
                        }
                      }
                    }
                    if (name && componentUUIDfound) {
                      componentIds.insert({*name, componentUUID});
                    }
                  }
                }
              } else if (serviceValue.first == "ServiceUUID") {
                if (boost::optional<uci::base::UUID> value = parseConfigUUID(serviceValue.second)) {
                  serviceId = *value;
                }
              } else if (serviceValue.first == "SubSystemUUID") {
                if (boost::optional<uci::base::UUID> value = parseConfigUUID(serviceValue.second)) {
                  subsystemId = *value;
                }
              } else if (serviceValue.first == "Topics") {
                for (const boost::property_tree::ptree::value_type& topic : serviceValue.second) {
                  if (topic.first == "DefaultConnection") {
                    if (boost::optional<std::string> defaultConnectionValue = topic.second.get_value_optional<std::string>()) {
                      defaultConnection = *defaultConnectionValue;
                    }
                  } else if (topic.first == "Topic") {
                    boost::optional<std::string> name;
                    boost::optional<std::string> connection;
                    for (const boost::property_tree::ptree::value_type& topicValue : topic.second) {
                      if (topicValue.first == "Name") {
                        name = topicValue.second.get_value_optional<std::string>();
                      } else if (topicValue.first == "Connection") {
                        connection = topicValue.second.get_value_optional<std::string>();
                      }
                    }
                    if (name && connection) {
                      topics.insert({*name, *connection});
                    }
                  }
                }
              }
              if (!idValue || (*idValue != serviceIdentifier)) {
                break;
              }
            }
          }
        }
      } else if (calConfig.first == "SystemLabel") {
        if (const boost::optional<std::string> value = calConfig.second.get_value_optional<std::string>()) {
          systemLabel = *value;
        }
      } else if (calConfig.first == "SystemUUID") {
        if (boost::optional<uci::base::UUID> value = parseConfigUUID(calConfig.second)) {
          systemId = *value;
        }
      } else if (calConfig.first == "UUIDGenerationNamespace") {
        for (const boost::property_tree::ptree::value_type& uuidGenerationNamespace : calConfig.second) {
          if (uuidGenerationNamespace.first == "ID") {
            if (boost::optional<std::string> uuidGenerationNamespaceValue = uuidGenerationNamespace.second.get_value_optional<std::string>()) {
              uuidGenerationNamespaceID = *uuidGenerationNamespaceValue;
            }
          } else if (uuidGenerationNamespace.first == "Name") {
            if (boost::optional<std::string> uuidGenerationNamespaceValue = uuidGenerationNamespace.second.get_value_optional<std::string>()) {
              uuidGenerationNamespaceName = *uuidGenerationNamespaceValue;
            }
          }
        }
      } else if (calConfig.first == "UUIDGeneratorType") {
        for (const boost::property_tree::ptree::value_type& uuidGeneratorType : calConfig.second) {
          if (uuidGeneratorType.first == "RandomUUIDGenerator") {
            uuidGenerationType = UUIDGenerationType::RANDOM;
          } else if (uuidGeneratorType.first == "TimeBasedUUIDGenerator") {
            uuidGenerationType = UUIDGenerationType::TIME;
            for (const boost::property_tree::ptree::value_type& timeBasedUUIDGenerator : uuidGeneratorType.second) {
              if (timeBasedUUIDGenerator.first == "<xmlattr>") {
                for (const boost::property_tree::ptree::value_type& attr : timeBasedUUIDGenerator.second) {
                  if (attr.first == "clock") {
                    if (boost::optional<std::string> clockValue = attr.second.get_value_optional<std::string>()) {
                      uuidTimeGenerationClock = *clockValue;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (!uuidGenerationNamespaceID.empty() && !uuidGenerationNamespaceName.empty()) {
      const uci::base::UUID uuidFromString{uci::base::UUID::fromString(uuidGenerationNamespaceID)};
      if (uuidFromString.isValid()) {
        uuidGenerationNamespaceUUID = uci::base::UUID::createVersion3UUID(uuidFromString, uuidGenerationNamespaceName);
      } else {
        throw uci::base::UCIException("The provided UUIDGenerationNamespace ID does not conform to IETF RFC 4122 (\""
                          + uuidGenerationNamespaceID + "\")");
      }
    }
  } catch (const std::exception& e) {
    std::ostringstream errMsg;
    errMsg << "An error occurred when processing the configuration file \"" << xmlFileName << "\" (" << e.what() << ")";
    throw uci::base::UCIException(errMsg);
  }
}

boost::optional<uci::base::UUID> ConfigReader::parseConfigUUID(const boost::property_tree::ptree& propTree) const {
  if (parseUUIDs) {
    for (const boost::property_tree::ptree::value_type& valueType : propTree) {
      if (valueType.first == "UUIDName") {
        if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
          return {uci::base::UUID::createVersion3UUID(uci::base::UUID::getNamespaceUUID(), *value)};
        }
      } else if (valueType.first == "UUIDRandom") {
        return {getUUIDGenerator().generateType4UUID()};
      }
    }
  }
  return boost::none;
}

} // namespace base

} // namespace asb_uci

