/** @file ExternalizerLoader.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../asb_uci/base/ExternalizerLoader.h"

#include <string>

#include <boost/smart_ptr/make_unique.hpp>

#include "../../../asb_uci/base/ConfigReader.h"
#include "../../../asb_uci/base/Externalizer.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Externalizer.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/ExternalizerLoader.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

uci::base::Externalizer* ExternalizerLoader::getExternalizer(const std::string& encoding, const std::string& schemaVersion, const std::string& calApiVersion) {
  const ConfigReader::ExternalizerMap& externalizers{getConfig().getExternalizers()};
  const auto externalizer = externalizers.find(encoding);
  if (externalizer != externalizers.end()) {
    return boost::make_unique<asb_uci::base::Externalizer>(externalizer->second, schemaVersion, calApiVersion).release();
  }
  throw uci::base::UCIException("An externalizer using encoding \"" + encoding + "\" was not found in the CAL configuration file");
}

void ExternalizerLoader::destroyExternalizer(uci::base::Externalizer* externalizer) {
  delete dynamic_cast<asb_uci::base::Externalizer*>(externalizer);
}

ExternalizerLoader::ExternalizerLoaderConfig::ExternalizerLoaderConfig() {
  configReader = boost::make_unique<ConfigReader>("");
}

ConfigReader& ExternalizerLoader::getConfig() {
  static const ExternalizerLoader::ExternalizerLoaderConfig config;
  return *(config.configReader);
}

} // namespace base

} // namespace asb_uci

extern "C" {

  uci::base::ExternalizerLoader* uci_getExternalizerLoader() {
    return boost::make_unique<asb_uci::base::ExternalizerLoader>().release();
  }

  void uci_destroyExternalizerLoader(uci::base::ExternalizerLoader* externalizerLoader) {
    delete dynamic_cast<asb_uci::base::ExternalizerLoader*>(externalizerLoader);
  }

}


