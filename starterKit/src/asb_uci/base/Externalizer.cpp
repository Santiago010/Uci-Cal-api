/** @file Externalizer.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "../../../../starterKit/include/asb_uci/base/Externalizer.h"

#include <cstdint>
#include <exception>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <boost/dll/import.hpp>

#include "../../../../cppInterface/2.3.2/include/uci/base/Accessor.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/Externalizer.h"
#include "../../../../cppInterface/2.3.2/include/uci/base/UCIException.h"

/**  */
namespace asb_uci {

/** The namespace in which all base data types are declared */
namespace base {

Externalizer::Externalizer(const std::string& encoding, const std::string& schemaVersion, const std::string& calApiVersion) {
  try {
    plugin = boost::dll::import_symbol<uci::base::Externalizer>(encoding, "pluginExternalizer", (boost::dll::load_mode::append_decorations | boost::dll::load_mode::search_system_folders));
  } catch (const std::exception& e) {
    std::ostringstream errMsg;
    errMsg << "An error occurred when loading the library \"" << encoding << "\" for externalizer encoding \"" << encoding << "\" (" << e.what() << ")";
    throw uci::base::UCIException(errMsg);
  }

  if (plugin->getSchemaVersion() != schemaVersion) {
    throw uci::base::UCIException("The schema version of the externalizer using encoding \"" + encoding + "\" does not match the requested version (found \"" + plugin->getSchemaVersion() + "\", requested \"" + schemaVersion + "\")");
  }
  if (plugin->getCalApiVersion() != calApiVersion) {
    throw uci::base::UCIException("The API version of the externalizer using encoding \"" + encoding + "\" does not match the requested version (found \"" + plugin->getCalApiVersion() + "\", requested \"" + calApiVersion + "\")");
  }
}

void Externalizer::read(std::istream& istream, uci::base::Accessor& accessor) {
  plugin->read(istream, accessor);
}

void Externalizer::read(const std::string& string, uci::base::Accessor& accessor) {
  plugin->read(string, accessor);
}

void Externalizer::read(const std::vector<uint8_t>& vector, uci::base::Accessor& accessor) {
  plugin->read(vector, accessor);
}

void Externalizer::write(const uci::base::Accessor& accessor, std::ostream& ostream) {
  plugin->write(accessor, ostream);
}

void Externalizer::write(const uci::base::Accessor& accessor, std::string& string) {
  plugin->write(accessor, string);
}

void Externalizer::write(const uci::base::Accessor& accessor, std::vector<uint8_t>& vector) {
  plugin->write(accessor, vector);
}

bool Externalizer::messageReadOnly() const {
  return plugin->messageReadOnly();
}

bool Externalizer::messageWriteOnly() const {
  return plugin->messageWriteOnly();
}

bool Externalizer::supportsObjectRead() const {
  return plugin->supportsObjectRead();
}

bool Externalizer::supportsObjectWrite() const {
  return plugin->supportsObjectWrite();
}

std::string Externalizer::getCalApiVersion() const {
  return plugin->getCalApiVersion();
}

std::string Externalizer::getEncoding() const {
  return plugin->getEncoding();
}

std::string Externalizer::getSchemaVersion() const {
  return plugin->getSchemaVersion();
}

std::string Externalizer::getVendor() const {
  return plugin->getVendor();
}

std::string Externalizer::getVendorVersion() const {
  return plugin->getVendorVersion();
}

} // namespace base

} // namespace asb_uci

