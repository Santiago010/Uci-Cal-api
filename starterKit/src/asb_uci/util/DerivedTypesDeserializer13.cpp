/** @file DerivedTypesDeserializer13.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesDeserializer13.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/PO_ActivityCommandType.h"
#include "asb_uci/type/PO_ActivityMT.h"
#include "asb_uci/type/PO_ActivityType.h"
#include "asb_uci/type/PO_ApertureID_Type.h"
#include "asb_uci/type/PO_CapabilityCommandType.h"
#include "asb_uci/type/PO_CapabilityMDT.h"
#include "asb_uci/type/PO_CapabilityMT.h"
#include "asb_uci/type/PO_CapabilityStatusMDT.h"
#include "asb_uci/type/PO_CapabilityStatusMT.h"
#include "asb_uci/type/PO_CapabilityStatusType.h"
#include "asb_uci/type/PO_CapabilityType.h"
#include "asb_uci/type/PO_CollectionConstraintsType.h"
#include "asb_uci/type/PO_CommandMT.h"
#include "asb_uci/type/PO_CommandStatusMDT.h"
#include "asb_uci/type/PO_CommandStatusMT.h"
#include "asb_uci/type/PO_FPA_ChannelID_Type.h"
#include "asb_uci/type/PO_FPA_ID_Type.h"
#include "asb_uci/type/PO_FilterID_Type.h"
#include "asb_uci/type/PO_LensID_Type.h"
#include "asb_uci/type/PO_ProcessingStageID_Type.h"
#include "asb_uci/type/PO_ProductGeneratorID_Type.h"
#include "asb_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "asb_uci/type/PO_ProductOutputCommandImageryType.h"
#include "asb_uci/type/PO_SettingsCommandMDT.h"
#include "asb_uci/type/PO_SettingsCommandMT.h"
#include "asb_uci/type/PO_SettingsCommandStatusMDT.h"
#include "asb_uci/type/PO_SettingsCommandStatusMT.h"
#include "asb_uci/type/PO_TaskBaseType.h"
#include "asb_uci/type/PO_TaskType.h"
#include "asb_uci/type/PO_WindowID_Type.h"
#include "asb_uci/type/PRI_DataBaseType.h"
#include "asb_uci/type/PRI_DataType.h"
#include "asb_uci/type/PlanPartsBaseType.h"
#include "asb_uci/type/PlanPartsType.h"
#include "asb_uci/type/PlanScoresID_Type.h"
#include "asb_uci/type/PlanScoresMT.h"
#include "asb_uci/type/PlanScoresRequestMDT.h"
#include "asb_uci/type/PlanScoresRequestMT.h"
#include "asb_uci/type/PlanScoresRequestStatusMDT.h"
#include "asb_uci/type/PlanScoresRequestStatusMT.h"
#include "asb_uci/type/PlanStatusType.h"
#include "asb_uci/type/PlanValidationInputsBaseType.h"
#include "asb_uci/type/PlanningFunctionID_Type.h"
#include "asb_uci/type/PlanningFunctionMT.h"
#include "asb_uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "asb_uci/type/PlanningFunctionSettingsCommandMT.h"
#include "asb_uci/type/PlanningFunctionSettingsCommandStatusMDT.h"
#include "asb_uci/type/PlanningFunctionSettingsCommandStatusMT.h"
#include "asb_uci/type/PlanningFunctionStatusMT.h"
#include "asb_uci/type/PlanningInterfaceType.h"
#include "asb_uci/type/PlanningInterfacesType.h"
#include "asb_uci/type/PlanningLocationType.h"
#include "asb_uci/type/PlanningProcessID_Type.h"
#include "asb_uci/type/PlansReferenceBaseType.h"
#include "asb_uci/type/PlansReferenceType.h"
#include "asb_uci/type/PlatformIdentityConfidenceType.h"
#include "asb_uci/type/PlatformIdentityType.h"
#include "asb_uci/type/Point2D_ReportedType.h"
#include "asb_uci/type/Point2D_Type.h"
#include "asb_uci/type/Point3D_Type.h"
#include "asb_uci/type/PositionAndVelocityCovarianceType.h"
#include "asb_uci/type/PositionReportDetailedMT.h"
#include "asb_uci/type/PositionReportMT.h"
#include "asb_uci/type/PrioritizationListID_Type.h"
#include "asb_uci/type/PrioritizationListMDT.h"
#include "asb_uci/type/PrioritizationListMT.h"
#include "asb_uci/type/ProcessingConstrainedSubPlanType.h"
#include "asb_uci/type/ProcessingParametersPET.h"
#include "asb_uci/type/ProcessingResultsPET.h"
#include "asb_uci/type/ProductClassificationPlanID_Type.h"
#include "asb_uci/type/ProductClassificationPlanMT.h"
#include "asb_uci/type/ProductClassificationReportID_Type.h"
#include "asb_uci/type/ProductClassificationReportMT.h"
#include "asb_uci/type/ProductClassificationRequestMDT.h"
#include "asb_uci/type/ProductClassificationRequestMT.h"
#include "asb_uci/type/ProductClassificationRequestStatusMDT.h"
#include "asb_uci/type/ProductClassificationRequestStatusMT.h"
#include "asb_uci/type/ProductClassificationTaskMDT.h"
#include "asb_uci/type/ProductClassificationTaskMT.h"
#include "asb_uci/type/ProductClassificationTaskStatusMDT.h"
#include "asb_uci/type/ProductClassificationTaskStatusMT.h"
#include "asb_uci/type/ProductCollectionPathType.h"
#include "asb_uci/type/ProductDisseminationConfigurationID_Type.h"
#include "asb_uci/type/ProductDisseminationConfigurationMDT.h"
#include "asb_uci/type/ProductDisseminationConfigurationMT.h"
#include "asb_uci/type/ProductDisseminationDestinationID_Type.h"
#include "asb_uci/type/ProductDisseminationDestinationMDT.h"
#include "asb_uci/type/ProductDisseminationDestinationMT.h"
#include "asb_uci/type/ProductDisseminationPlanID_Type.h"
#include "asb_uci/type/ProductDisseminationPlanMT.h"
#include "asb_uci/type/ProductDisseminationReportID_Type.h"
#include "asb_uci/type/ProductDisseminationReportMT.h"
#include "asb_uci/type/ProductDisseminationRequestMDT.h"
#include "asb_uci/type/ProductDisseminationRequestMT.h"
#include "asb_uci/type/ProductDisseminationRequestStatusMDT.h"
#include "asb_uci/type/ProductDisseminationRequestStatusMT.h"
#include "asb_uci/type/ProductDisseminationTaskMDT.h"
#include "asb_uci/type/ProductDisseminationTaskMT.h"
#include "asb_uci/type/ProductDisseminationTaskStatusMDT.h"
#include "asb_uci/type/ProductDisseminationTaskStatusMT.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_ActivityCommandType.h"
#include "uci/type/PO_ActivityMT.h"
#include "uci/type/PO_ActivityType.h"
#include "uci/type/PO_ApertureID_Type.h"
#include "uci/type/PO_CapabilityCommandType.h"
#include "uci/type/PO_CapabilityMDT.h"
#include "uci/type/PO_CapabilityMT.h"
#include "uci/type/PO_CapabilityStatusMDT.h"
#include "uci/type/PO_CapabilityStatusMT.h"
#include "uci/type/PO_CapabilityStatusType.h"
#include "uci/type/PO_CapabilityType.h"
#include "uci/type/PO_CollectionConstraintsType.h"
#include "uci/type/PO_CommandMT.h"
#include "uci/type/PO_CommandStatusMDT.h"
#include "uci/type/PO_CommandStatusMT.h"
#include "uci/type/PO_FPA_ChannelID_Type.h"
#include "uci/type/PO_FPA_ID_Type.h"
#include "uci/type/PO_FilterID_Type.h"
#include "uci/type/PO_LensID_Type.h"
#include "uci/type/PO_ProcessingStageID_Type.h"
#include "uci/type/PO_ProductGeneratorID_Type.h"
#include "uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "uci/type/PO_ProductOutputCommandImageryType.h"
#include "uci/type/PO_SettingsCommandMDT.h"
#include "uci/type/PO_SettingsCommandMT.h"
#include "uci/type/PO_SettingsCommandStatusMDT.h"
#include "uci/type/PO_SettingsCommandStatusMT.h"
#include "uci/type/PO_TaskBaseType.h"
#include "uci/type/PO_TaskType.h"
#include "uci/type/PO_WindowID_Type.h"
#include "uci/type/PRI_DataBaseType.h"
#include "uci/type/PRI_DataType.h"
#include "uci/type/PlanPartsBaseType.h"
#include "uci/type/PlanPartsType.h"
#include "uci/type/PlanScoresID_Type.h"
#include "uci/type/PlanScoresMT.h"
#include "uci/type/PlanScoresRequestMDT.h"
#include "uci/type/PlanScoresRequestMT.h"
#include "uci/type/PlanScoresRequestStatusMDT.h"
#include "uci/type/PlanScoresRequestStatusMT.h"
#include "uci/type/PlanStatusType.h"
#include "uci/type/PlanValidationInputsBaseType.h"
#include "uci/type/PlanningFunctionID_Type.h"
#include "uci/type/PlanningFunctionMT.h"
#include "uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "uci/type/PlanningFunctionSettingsCommandMT.h"
#include "uci/type/PlanningFunctionSettingsCommandStatusMDT.h"
#include "uci/type/PlanningFunctionSettingsCommandStatusMT.h"
#include "uci/type/PlanningFunctionStatusMT.h"
#include "uci/type/PlanningInterfaceType.h"
#include "uci/type/PlanningInterfacesType.h"
#include "uci/type/PlanningLocationType.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "uci/type/PlansReferenceBaseType.h"
#include "uci/type/PlansReferenceType.h"
#include "uci/type/PlatformIdentityConfidenceType.h"
#include "uci/type/PlatformIdentityType.h"
#include "uci/type/Point2D_ReportedType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/PositionAndVelocityCovarianceType.h"
#include "uci/type/PositionReportDetailedMT.h"
#include "uci/type/PositionReportMT.h"
#include "uci/type/PrioritizationListID_Type.h"
#include "uci/type/PrioritizationListMDT.h"
#include "uci/type/PrioritizationListMT.h"
#include "uci/type/ProcessingConstrainedSubPlanType.h"
#include "uci/type/ProcessingParametersPET.h"
#include "uci/type/ProcessingResultsPET.h"
#include "uci/type/ProductClassificationPlanID_Type.h"
#include "uci/type/ProductClassificationPlanMT.h"
#include "uci/type/ProductClassificationReportID_Type.h"
#include "uci/type/ProductClassificationReportMT.h"
#include "uci/type/ProductClassificationRequestMDT.h"
#include "uci/type/ProductClassificationRequestMT.h"
#include "uci/type/ProductClassificationRequestStatusMDT.h"
#include "uci/type/ProductClassificationRequestStatusMT.h"
#include "uci/type/ProductClassificationTaskMDT.h"
#include "uci/type/ProductClassificationTaskMT.h"
#include "uci/type/ProductClassificationTaskStatusMDT.h"
#include "uci/type/ProductClassificationTaskStatusMT.h"
#include "uci/type/ProductCollectionPathType.h"
#include "uci/type/ProductDisseminationConfigurationID_Type.h"
#include "uci/type/ProductDisseminationConfigurationMDT.h"
#include "uci/type/ProductDisseminationConfigurationMT.h"
#include "uci/type/ProductDisseminationDestinationID_Type.h"
#include "uci/type/ProductDisseminationDestinationMDT.h"
#include "uci/type/ProductDisseminationDestinationMT.h"
#include "uci/type/ProductDisseminationPlanID_Type.h"
#include "uci/type/ProductDisseminationPlanMT.h"
#include "uci/type/ProductDisseminationReportID_Type.h"
#include "uci/type/ProductDisseminationReportMT.h"
#include "uci/type/ProductDisseminationRequestMDT.h"
#include "uci/type/ProductDisseminationRequestMT.h"
#include "uci/type/ProductDisseminationRequestStatusMDT.h"
#include "uci/type/ProductDisseminationRequestStatusMT.h"
#include "uci/type/ProductDisseminationTaskMDT.h"
#include "uci/type/ProductDisseminationTaskMT.h"
#include "uci/type/ProductDisseminationTaskStatusMDT.h"
#include "uci/type/ProductDisseminationTaskStatusMT.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

bool DerivedTypesDeserializer13::deserialize(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::planningFunctionID_Type:
      asb_uci::type::PlanningFunctionID_Type::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningFunctionMT:
      asb_uci::type::PlanningFunctionMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningFunctionSettingsCommandMDT:
      asb_uci::type::PlanningFunctionSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningFunctionSettingsCommandMT:
      asb_uci::type::PlanningFunctionSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningFunctionSettingsCommandStatusMDT:
      asb_uci::type::PlanningFunctionSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningFunctionSettingsCommandStatusMT:
      asb_uci::type::PlanningFunctionSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningFunctionStatusMT:
      asb_uci::type::PlanningFunctionStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningInterfacesType:
      asb_uci::type::PlanningInterfacesType::deserialize(propTree, dynamic_cast<uci::type::PlanningInterfacesType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningInterfaceType:
      asb_uci::type::PlanningInterfaceType::deserialize(propTree, dynamic_cast<uci::type::PlanningInterfaceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningLocationType:
      asb_uci::type::PlanningLocationType::deserialize(propTree, dynamic_cast<uci::type::PlanningLocationType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planningProcessID_Type:
      asb_uci::type::PlanningProcessID_Type::deserialize(propTree, dynamic_cast<uci::type::PlanningProcessID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planPartsBaseType:
      asb_uci::type::PlanPartsBaseType::deserialize(propTree, dynamic_cast<uci::type::PlanPartsBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planPartsType:
      asb_uci::type::PlanPartsType::deserialize(propTree, dynamic_cast<uci::type::PlanPartsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planScoresID_Type:
      asb_uci::type::PlanScoresID_Type::deserialize(propTree, dynamic_cast<uci::type::PlanScoresID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planScoresMT:
      asb_uci::type::PlanScoresMT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planScoresRequestMDT:
      asb_uci::type::PlanScoresRequestMDT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planScoresRequestMT:
      asb_uci::type::PlanScoresRequestMT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planScoresRequestStatusMDT:
      asb_uci::type::PlanScoresRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planScoresRequestStatusMT:
      asb_uci::type::PlanScoresRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::plansReferenceBaseType:
      asb_uci::type::PlansReferenceBaseType::deserialize(propTree, dynamic_cast<uci::type::PlansReferenceBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::plansReferenceType:
      asb_uci::type::PlansReferenceType::deserialize(propTree, dynamic_cast<uci::type::PlansReferenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planStatusType:
      asb_uci::type::PlanStatusType::deserialize(propTree, dynamic_cast<uci::type::PlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::planValidationInputsBaseType:
      asb_uci::type::PlanValidationInputsBaseType::deserialize(propTree, dynamic_cast<uci::type::PlanValidationInputsBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::platformIdentityConfidenceType:
      asb_uci::type::PlatformIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::PlatformIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::platformIdentityType:
      asb_uci::type::PlatformIdentityType::deserialize(propTree, dynamic_cast<uci::type::PlatformIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ActivityCommandType:
      asb_uci::type::PO_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::PO_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ActivityMT:
      asb_uci::type::PO_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::PO_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ActivityType:
      asb_uci::type::PO_ActivityType::deserialize(propTree, dynamic_cast<uci::type::PO_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ApertureID_Type:
      asb_uci::type::PO_ApertureID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ApertureID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityCommandType:
      asb_uci::type::PO_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityMDT:
      asb_uci::type::PO_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityMT:
      asb_uci::type::PO_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityStatusMDT:
      asb_uci::type::PO_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityStatusMT:
      asb_uci::type::PO_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityStatusType:
      asb_uci::type::PO_CapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CapabilityType:
      asb_uci::type::PO_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CollectionConstraintsType:
      asb_uci::type::PO_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::PO_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CommandMT:
      asb_uci::type::PO_CommandMT::deserialize(propTree, dynamic_cast<uci::type::PO_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CommandStatusMDT:
      asb_uci::type::PO_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PO_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_CommandStatusMT:
      asb_uci::type::PO_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::PO_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_FilterID_Type:
      asb_uci::type::PO_FilterID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_FilterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_FPA_ChannelID_Type:
      asb_uci::type::PO_FPA_ChannelID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_FPA_ChannelID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_FPA_ID_Type:
      asb_uci::type::PO_FPA_ID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_FPA_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_LensID_Type:
      asb_uci::type::PO_LensID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_LensID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ProcessingStageID_Type:
      asb_uci::type::PO_ProcessingStageID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ProcessingStageID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ProductGeneratorID_Type:
      asb_uci::type::PO_ProductGeneratorID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ProductGeneratorID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ProductGeneratorOutputID_Type:
      asb_uci::type::PO_ProductGeneratorOutputID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ProductGeneratorOutputID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_ProductOutputCommandImageryType:
      asb_uci::type::PO_ProductOutputCommandImageryType::deserialize(propTree, dynamic_cast<uci::type::PO_ProductOutputCommandImageryType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_SettingsCommandMDT:
      asb_uci::type::PO_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_SettingsCommandMT:
      asb_uci::type::PO_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_SettingsCommandStatusMDT:
      asb_uci::type::PO_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_SettingsCommandStatusMT:
      asb_uci::type::PO_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_TaskBaseType:
      asb_uci::type::PO_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::PO_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_TaskType:
      asb_uci::type::PO_TaskType::deserialize(propTree, dynamic_cast<uci::type::PO_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pO_WindowID_Type:
      asb_uci::type::PO_WindowID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_WindowID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::point2D_ReportedType:
      asb_uci::type::Point2D_ReportedType::deserialize(propTree, dynamic_cast<uci::type::Point2D_ReportedType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::point2D_Type:
      asb_uci::type::Point2D_Type::deserialize(propTree, dynamic_cast<uci::type::Point2D_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::point3D_Type:
      asb_uci::type::Point3D_Type::deserialize(propTree, dynamic_cast<uci::type::Point3D_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::positionAndVelocityCovarianceType:
      asb_uci::type::PositionAndVelocityCovarianceType::deserialize(propTree, dynamic_cast<uci::type::PositionAndVelocityCovarianceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::positionReportDetailedMT:
      asb_uci::type::PositionReportDetailedMT::deserialize(propTree, dynamic_cast<uci::type::PositionReportDetailedMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::positionReportMT:
      asb_uci::type::PositionReportMT::deserialize(propTree, dynamic_cast<uci::type::PositionReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pRI_DataBaseType:
      asb_uci::type::PRI_DataBaseType::deserialize(propTree, dynamic_cast<uci::type::PRI_DataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::pRI_DataType:
      asb_uci::type::PRI_DataType::deserialize(propTree, dynamic_cast<uci::type::PRI_DataType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::prioritizationListID_Type:
      asb_uci::type::PrioritizationListID_Type::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::prioritizationListMDT:
      asb_uci::type::PrioritizationListMDT::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::prioritizationListMT:
      asb_uci::type::PrioritizationListMT::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::processingConstrainedSubPlanType:
      asb_uci::type::ProcessingConstrainedSubPlanType::deserialize(propTree, dynamic_cast<uci::type::ProcessingConstrainedSubPlanType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::processingParametersPET:
      asb_uci::type::ProcessingParametersPET::deserialize(propTree, dynamic_cast<uci::type::ProcessingParametersPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::processingResultsPET:
      asb_uci::type::ProcessingResultsPET::deserialize(propTree, dynamic_cast<uci::type::ProcessingResultsPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationPlanID_Type:
      asb_uci::type::ProductClassificationPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationPlanMT:
      asb_uci::type::ProductClassificationPlanMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationReportID_Type:
      asb_uci::type::ProductClassificationReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationReportMT:
      asb_uci::type::ProductClassificationReportMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationRequestMDT:
      asb_uci::type::ProductClassificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationRequestMT:
      asb_uci::type::ProductClassificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationRequestStatusMDT:
      asb_uci::type::ProductClassificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationRequestStatusMT:
      asb_uci::type::ProductClassificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationTaskMDT:
      asb_uci::type::ProductClassificationTaskMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationTaskMT:
      asb_uci::type::ProductClassificationTaskMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationTaskStatusMDT:
      asb_uci::type::ProductClassificationTaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productClassificationTaskStatusMT:
      asb_uci::type::ProductClassificationTaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productCollectionPathType:
      asb_uci::type::ProductCollectionPathType::deserialize(propTree, dynamic_cast<uci::type::ProductCollectionPathType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationConfigurationID_Type:
      asb_uci::type::ProductDisseminationConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationConfigurationMDT:
      asb_uci::type::ProductDisseminationConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationConfigurationMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationConfigurationMT:
      asb_uci::type::ProductDisseminationConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationDestinationID_Type:
      asb_uci::type::ProductDisseminationDestinationID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationDestinationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationDestinationMDT:
      asb_uci::type::ProductDisseminationDestinationMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationDestinationMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationDestinationMT:
      asb_uci::type::ProductDisseminationDestinationMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationDestinationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationPlanID_Type:
      asb_uci::type::ProductDisseminationPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationPlanMT:
      asb_uci::type::ProductDisseminationPlanMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationReportID_Type:
      asb_uci::type::ProductDisseminationReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationReportMT:
      asb_uci::type::ProductDisseminationReportMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationRequestMDT:
      asb_uci::type::ProductDisseminationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationRequestMT:
      asb_uci::type::ProductDisseminationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationRequestStatusMDT:
      asb_uci::type::ProductDisseminationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationRequestStatusMT:
      asb_uci::type::ProductDisseminationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationTaskMDT:
      asb_uci::type::ProductDisseminationTaskMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationTaskMT:
      asb_uci::type::ProductDisseminationTaskMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationTaskStatusMDT:
      asb_uci::type::ProductDisseminationTaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::productDisseminationTaskStatusMT:
      asb_uci::type::ProductDisseminationTaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    default:
      return false;
  }
}

} // namespace util

} // namespace asb_uci

