/** @file DerivedTypesSerializer6.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer6.h"

#include <string>

#include <boost/none.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/DLZ_ID_Type.h"
#include "asb_uci/type/DLZ_MT.h"
#include "asb_uci/type/DLZ_RequestMDT.h"
#include "asb_uci/type/DLZ_RequestMT.h"
#include "asb_uci/type/DLZ_RequestStatusMDT.h"
#include "asb_uci/type/DLZ_RequestStatusMT.h"
#include "asb_uci/type/DMPI_AchievabilityAssessmentRequestType.h"
#include "asb_uci/type/DMPI_AchievabilityAssessmentType.h"
#include "asb_uci/type/DMPI_CancelCommandMDT.h"
#include "asb_uci/type/DMPI_CancelCommandMT.h"
#include "asb_uci/type/DMPI_CancelCommandStatusMDT.h"
#include "asb_uci/type/DMPI_CancelCommandStatusMT.h"
#include "asb_uci/type/DMPI_DesignationID_Type.h"
#include "asb_uci/type/DMPI_DesignationMDT.h"
#include "asb_uci/type/DMPI_DesignationMT.h"
#include "asb_uci/type/DMPI_DesignationRequestMDT.h"
#include "asb_uci/type/DMPI_DesignationRequestMT.h"
#include "asb_uci/type/DMPI_DesignationRequestStatusMDT.h"
#include "asb_uci/type/DMPI_DesignationRequestStatusMT.h"
#include "asb_uci/type/DMPI_ID_Type.h"
#include "asb_uci/type/DMPI_MDT.h"
#include "asb_uci/type/DMPI_MT.h"
#include "asb_uci/type/DMPI_PatternID_Type.h"
#include "asb_uci/type/DMPI_PatternMDT.h"
#include "asb_uci/type/DMPI_PatternMT.h"
#include "asb_uci/type/DMPI_PatternType.h"
#include "asb_uci/type/DMPI_RadialPatternType.h"
#include "asb_uci/type/DMPI_StatusMT.h"
#include "asb_uci/type/DMPI_XbyY_PatternType.h"
#include "asb_uci/type/DVR_ProcessingParametersType.h"
#include "asb_uci/type/DataPlanOverrideRequestStatusMDT.h"
#include "asb_uci/type/DataPlanOverrideRequestStatusMT.h"
#include "asb_uci/type/DataPlanOverrideRequestType.h"
#include "asb_uci/type/DataRateDataType.h"
#include "asb_uci/type/DataRecordBaseType.h"
#include "asb_uci/type/DataRecordInstanceID_Type.h"
#include "asb_uci/type/DataRecordListBaseType.h"
#include "asb_uci/type/DataRecordListID_Type.h"
#include "asb_uci/type/DataRecordListManagementRequestMDT.h"
#include "asb_uci/type/DataRecordListManagementRequestMT.h"
#include "asb_uci/type/DataRecordListManagementRequestStatusMDT.h"
#include "asb_uci/type/DataRecordListManagementRequestStatusMT.h"
#include "asb_uci/type/DataRecordManagementRequestMDT.h"
#include "asb_uci/type/DataRecordManagementRequestMT.h"
#include "asb_uci/type/DataRecordManagementRequestStatusMDT.h"
#include "asb_uci/type/DataRecordManagementRequestStatusMT.h"
#include "asb_uci/type/DataStorageUtilizationRequestMDT.h"
#include "asb_uci/type/DataStorageUtilizationRequestMT.h"
#include "asb_uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "asb_uci/type/DataStorageUtilizationRequestStatusMT.h"
#include "asb_uci/type/DataUpdateRequestMDT.h"
#include "asb_uci/type/DataUpdateRequestMT.h"
#include "asb_uci/type/DataUpdateRequestStatusMDT.h"
#include "asb_uci/type/DataUpdateRequestStatusMT.h"
#include "asb_uci/type/DeploymentDetectionType.h"
#include "asb_uci/type/DesignationID_Type.h"
#include "asb_uci/type/DesignationMT.h"
#include "asb_uci/type/DesignationRequestMDT.h"
#include "asb_uci/type/DesignationRequestMT.h"
#include "asb_uci/type/DesignationRequestStatusMDT.h"
#include "asb_uci/type/DesignationRequestStatusMT.h"
#include "asb_uci/type/DiscreteDataLinkIdentifierType.h"
#include "asb_uci/type/DiscreteStatusMT.h"
#include "asb_uci/type/DisseminationConstrainedSubplanType.h"
#include "asb_uci/type/DisseminationSubplanType.h"
#include "asb_uci/type/DoorCommandMT.h"
#include "asb_uci/type/DoorCommandStatusMDT.h"
#include "asb_uci/type/DoorCommandStatusMT.h"
#include "asb_uci/type/DoorCommandType.h"
#include "asb_uci/type/DoorStatusMT.h"
#include "asb_uci/type/DoorStatusType.h"
#include "asb_uci/type/DwellID_Type.h"
#include "asb_uci/type/EA_ActivityCommandType.h"
#include "asb_uci/type/EA_ActivityMT.h"
#include "asb_uci/type/EA_ActivityType.h"
#include "asb_uci/type/EA_CapabilityCommandType.h"
#include "asb_uci/type/EA_CapabilityMDT.h"
#include "asb_uci/type/EA_CapabilityMT.h"
#include "asb_uci/type/EA_CapabilityStatusMDT.h"
#include "asb_uci/type/EA_CapabilityStatusMT.h"
#include "asb_uci/type/EA_CapabilityType.h"
#include "asb_uci/type/EA_CommandMT.h"
#include "asb_uci/type/EA_CommandStatusMDT.h"
#include "asb_uci/type/EA_CommandStatusMT.h"
#include "asb_uci/type/EA_ConsentRequestMT.h"
#include "asb_uci/type/EA_ConsentRequestStatusMDT.h"
#include "asb_uci/type/EA_ConsentRequestStatusMT.h"
#include "asb_uci/type/EA_ConsentRequestType.h"
#include "asb_uci/type/EA_SettingsCommandMDT.h"
#include "asb_uci/type/EA_SettingsCommandMT.h"
#include "asb_uci/type/EA_SettingsCommandStatusMDT.h"
#include "asb_uci/type/EA_SettingsCommandStatusMT.h"
#include "asb_uci/type/EA_TechniqueIdentifierType.h"
#include "asb_uci/type/ECEF_UnitVectorType.h"
#include "asb_uci/type/EEI_ID_Type.h"
#include "asb_uci/type/EEI_MDT.h"
#include "asb_uci/type/EEI_MT.h"
#include "asb_uci/type/EarthOrientationParametersID_Type.h"
#include "asb_uci/type/EarthOrientationParametersMT.h"
#include "asb_uci/type/EffectActivityMT.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/DLZ_ID_Type.h"
#include "uci/type/DLZ_MT.h"
#include "uci/type/DLZ_RequestMDT.h"
#include "uci/type/DLZ_RequestMT.h"
#include "uci/type/DLZ_RequestStatusMDT.h"
#include "uci/type/DLZ_RequestStatusMT.h"
#include "uci/type/DMPI_AchievabilityAssessmentRequestType.h"
#include "uci/type/DMPI_AchievabilityAssessmentType.h"
#include "uci/type/DMPI_CancelCommandMDT.h"
#include "uci/type/DMPI_CancelCommandMT.h"
#include "uci/type/DMPI_CancelCommandStatusMDT.h"
#include "uci/type/DMPI_CancelCommandStatusMT.h"
#include "uci/type/DMPI_DesignationID_Type.h"
#include "uci/type/DMPI_DesignationMDT.h"
#include "uci/type/DMPI_DesignationMT.h"
#include "uci/type/DMPI_DesignationRequestMDT.h"
#include "uci/type/DMPI_DesignationRequestMT.h"
#include "uci/type/DMPI_DesignationRequestStatusMDT.h"
#include "uci/type/DMPI_DesignationRequestStatusMT.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/DMPI_MDT.h"
#include "uci/type/DMPI_MT.h"
#include "uci/type/DMPI_PatternID_Type.h"
#include "uci/type/DMPI_PatternMDT.h"
#include "uci/type/DMPI_PatternMT.h"
#include "uci/type/DMPI_PatternType.h"
#include "uci/type/DMPI_RadialPatternType.h"
#include "uci/type/DMPI_StatusMT.h"
#include "uci/type/DMPI_XbyY_PatternType.h"
#include "uci/type/DVR_ProcessingParametersType.h"
#include "uci/type/DataPlanOverrideRequestStatusMDT.h"
#include "uci/type/DataPlanOverrideRequestStatusMT.h"
#include "uci/type/DataPlanOverrideRequestType.h"
#include "uci/type/DataRateDataType.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/DataRecordInstanceID_Type.h"
#include "uci/type/DataRecordListBaseType.h"
#include "uci/type/DataRecordListID_Type.h"
#include "uci/type/DataRecordListManagementRequestMDT.h"
#include "uci/type/DataRecordListManagementRequestMT.h"
#include "uci/type/DataRecordListManagementRequestStatusMDT.h"
#include "uci/type/DataRecordListManagementRequestStatusMT.h"
#include "uci/type/DataRecordManagementRequestMDT.h"
#include "uci/type/DataRecordManagementRequestMT.h"
#include "uci/type/DataRecordManagementRequestStatusMDT.h"
#include "uci/type/DataRecordManagementRequestStatusMT.h"
#include "uci/type/DataStorageUtilizationRequestMDT.h"
#include "uci/type/DataStorageUtilizationRequestMT.h"
#include "uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "uci/type/DataStorageUtilizationRequestStatusMT.h"
#include "uci/type/DataUpdateRequestMDT.h"
#include "uci/type/DataUpdateRequestMT.h"
#include "uci/type/DataUpdateRequestStatusMDT.h"
#include "uci/type/DataUpdateRequestStatusMT.h"
#include "uci/type/DeploymentDetectionType.h"
#include "uci/type/DesignationID_Type.h"
#include "uci/type/DesignationMT.h"
#include "uci/type/DesignationRequestMDT.h"
#include "uci/type/DesignationRequestMT.h"
#include "uci/type/DesignationRequestStatusMDT.h"
#include "uci/type/DesignationRequestStatusMT.h"
#include "uci/type/DiscreteDataLinkIdentifierType.h"
#include "uci/type/DiscreteStatusMT.h"
#include "uci/type/DisseminationConstrainedSubplanType.h"
#include "uci/type/DisseminationSubplanType.h"
#include "uci/type/DoorCommandMT.h"
#include "uci/type/DoorCommandStatusMDT.h"
#include "uci/type/DoorCommandStatusMT.h"
#include "uci/type/DoorCommandType.h"
#include "uci/type/DoorStatusMT.h"
#include "uci/type/DoorStatusType.h"
#include "uci/type/DwellID_Type.h"
#include "uci/type/EA_ActivityCommandType.h"
#include "uci/type/EA_ActivityMT.h"
#include "uci/type/EA_ActivityType.h"
#include "uci/type/EA_CapabilityCommandType.h"
#include "uci/type/EA_CapabilityMDT.h"
#include "uci/type/EA_CapabilityMT.h"
#include "uci/type/EA_CapabilityStatusMDT.h"
#include "uci/type/EA_CapabilityStatusMT.h"
#include "uci/type/EA_CapabilityType.h"
#include "uci/type/EA_CommandMT.h"
#include "uci/type/EA_CommandStatusMDT.h"
#include "uci/type/EA_CommandStatusMT.h"
#include "uci/type/EA_ConsentRequestMT.h"
#include "uci/type/EA_ConsentRequestStatusMDT.h"
#include "uci/type/EA_ConsentRequestStatusMT.h"
#include "uci/type/EA_ConsentRequestType.h"
#include "uci/type/EA_SettingsCommandMDT.h"
#include "uci/type/EA_SettingsCommandMT.h"
#include "uci/type/EA_SettingsCommandStatusMDT.h"
#include "uci/type/EA_SettingsCommandStatusMT.h"
#include "uci/type/EA_TechniqueIdentifierType.h"
#include "uci/type/ECEF_UnitVectorType.h"
#include "uci/type/EEI_ID_Type.h"
#include "uci/type/EEI_MDT.h"
#include "uci/type/EEI_MT.h"
#include "uci/type/EarthOrientationParametersID_Type.h"
#include "uci/type/EarthOrientationParametersMT.h"
#include "uci/type/EffectActivityMT.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

boost::optional<std::string> DerivedTypesSerializer6::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::dataPlanOverrideRequestStatusMDT:
      return asb_uci::type::DataPlanOverrideRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataPlanOverrideRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanOverrideRequestStatusMT:
      return asb_uci::type::DataPlanOverrideRequestStatusMT::serialize(dynamic_cast<const uci::type::DataPlanOverrideRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanOverrideRequestType:
      return asb_uci::type::DataPlanOverrideRequestType::serialize(dynamic_cast<const uci::type::DataPlanOverrideRequestType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRateDataType:
      return asb_uci::type::DataRateDataType::serialize(dynamic_cast<const uci::type::DataRateDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordBaseType:
      return asb_uci::type::DataRecordBaseType::serialize(dynamic_cast<const uci::type::DataRecordBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordInstanceID_Type:
      return asb_uci::type::DataRecordInstanceID_Type::serialize(dynamic_cast<const uci::type::DataRecordInstanceID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordListBaseType:
      return asb_uci::type::DataRecordListBaseType::serialize(dynamic_cast<const uci::type::DataRecordListBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordListID_Type:
      return asb_uci::type::DataRecordListID_Type::serialize(dynamic_cast<const uci::type::DataRecordListID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordListManagementRequestMDT:
      return asb_uci::type::DataRecordListManagementRequestMDT::serialize(dynamic_cast<const uci::type::DataRecordListManagementRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordListManagementRequestMT:
      return asb_uci::type::DataRecordListManagementRequestMT::serialize(dynamic_cast<const uci::type::DataRecordListManagementRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordListManagementRequestStatusMDT:
      return asb_uci::type::DataRecordListManagementRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataRecordListManagementRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordListManagementRequestStatusMT:
      return asb_uci::type::DataRecordListManagementRequestStatusMT::serialize(dynamic_cast<const uci::type::DataRecordListManagementRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordManagementRequestMDT:
      return asb_uci::type::DataRecordManagementRequestMDT::serialize(dynamic_cast<const uci::type::DataRecordManagementRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordManagementRequestMT:
      return asb_uci::type::DataRecordManagementRequestMT::serialize(dynamic_cast<const uci::type::DataRecordManagementRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordManagementRequestStatusMDT:
      return asb_uci::type::DataRecordManagementRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataRecordManagementRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataRecordManagementRequestStatusMT:
      return asb_uci::type::DataRecordManagementRequestStatusMT::serialize(dynamic_cast<const uci::type::DataRecordManagementRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataStorageUtilizationRequestMDT:
      return asb_uci::type::DataStorageUtilizationRequestMDT::serialize(dynamic_cast<const uci::type::DataStorageUtilizationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataStorageUtilizationRequestMT:
      return asb_uci::type::DataStorageUtilizationRequestMT::serialize(dynamic_cast<const uci::type::DataStorageUtilizationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataStorageUtilizationRequestStatusMDT:
      return asb_uci::type::DataStorageUtilizationRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataStorageUtilizationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataStorageUtilizationRequestStatusMT:
      return asb_uci::type::DataStorageUtilizationRequestStatusMT::serialize(dynamic_cast<const uci::type::DataStorageUtilizationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataUpdateRequestMDT:
      return asb_uci::type::DataUpdateRequestMDT::serialize(dynamic_cast<const uci::type::DataUpdateRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataUpdateRequestMT:
      return asb_uci::type::DataUpdateRequestMT::serialize(dynamic_cast<const uci::type::DataUpdateRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataUpdateRequestStatusMDT:
      return asb_uci::type::DataUpdateRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataUpdateRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataUpdateRequestStatusMT:
      return asb_uci::type::DataUpdateRequestStatusMT::serialize(dynamic_cast<const uci::type::DataUpdateRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::deploymentDetectionType:
      return asb_uci::type::DeploymentDetectionType::serialize(dynamic_cast<const uci::type::DeploymentDetectionType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::designationID_Type:
      return asb_uci::type::DesignationID_Type::serialize(dynamic_cast<const uci::type::DesignationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::designationMT:
      return asb_uci::type::DesignationMT::serialize(dynamic_cast<const uci::type::DesignationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::designationRequestMDT:
      return asb_uci::type::DesignationRequestMDT::serialize(dynamic_cast<const uci::type::DesignationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::designationRequestMT:
      return asb_uci::type::DesignationRequestMT::serialize(dynamic_cast<const uci::type::DesignationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::designationRequestStatusMDT:
      return asb_uci::type::DesignationRequestStatusMDT::serialize(dynamic_cast<const uci::type::DesignationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::designationRequestStatusMT:
      return asb_uci::type::DesignationRequestStatusMT::serialize(dynamic_cast<const uci::type::DesignationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::discreteDataLinkIdentifierType:
      return asb_uci::type::DiscreteDataLinkIdentifierType::serialize(dynamic_cast<const uci::type::DiscreteDataLinkIdentifierType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::discreteStatusMT:
      return asb_uci::type::DiscreteStatusMT::serialize(dynamic_cast<const uci::type::DiscreteStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::disseminationConstrainedSubplanType:
      return asb_uci::type::DisseminationConstrainedSubplanType::serialize(dynamic_cast<const uci::type::DisseminationConstrainedSubplanType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::disseminationSubplanType:
      return asb_uci::type::DisseminationSubplanType::serialize(dynamic_cast<const uci::type::DisseminationSubplanType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dLZ_ID_Type:
      return asb_uci::type::DLZ_ID_Type::serialize(dynamic_cast<const uci::type::DLZ_ID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dLZ_MT:
      return asb_uci::type::DLZ_MT::serialize(dynamic_cast<const uci::type::DLZ_MT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dLZ_RequestMDT:
      return asb_uci::type::DLZ_RequestMDT::serialize(dynamic_cast<const uci::type::DLZ_RequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dLZ_RequestMT:
      return asb_uci::type::DLZ_RequestMT::serialize(dynamic_cast<const uci::type::DLZ_RequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dLZ_RequestStatusMDT:
      return asb_uci::type::DLZ_RequestStatusMDT::serialize(dynamic_cast<const uci::type::DLZ_RequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dLZ_RequestStatusMT:
      return asb_uci::type::DLZ_RequestStatusMT::serialize(dynamic_cast<const uci::type::DLZ_RequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_AchievabilityAssessmentRequestType:
      return asb_uci::type::DMPI_AchievabilityAssessmentRequestType::serialize(dynamic_cast<const uci::type::DMPI_AchievabilityAssessmentRequestType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_AchievabilityAssessmentType:
      return asb_uci::type::DMPI_AchievabilityAssessmentType::serialize(dynamic_cast<const uci::type::DMPI_AchievabilityAssessmentType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_CancelCommandMDT:
      return asb_uci::type::DMPI_CancelCommandMDT::serialize(dynamic_cast<const uci::type::DMPI_CancelCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_CancelCommandMT:
      return asb_uci::type::DMPI_CancelCommandMT::serialize(dynamic_cast<const uci::type::DMPI_CancelCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_CancelCommandStatusMDT:
      return asb_uci::type::DMPI_CancelCommandStatusMDT::serialize(dynamic_cast<const uci::type::DMPI_CancelCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_CancelCommandStatusMT:
      return asb_uci::type::DMPI_CancelCommandStatusMT::serialize(dynamic_cast<const uci::type::DMPI_CancelCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationID_Type:
      return asb_uci::type::DMPI_DesignationID_Type::serialize(dynamic_cast<const uci::type::DMPI_DesignationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationMDT:
      return asb_uci::type::DMPI_DesignationMDT::serialize(dynamic_cast<const uci::type::DMPI_DesignationMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationMT:
      return asb_uci::type::DMPI_DesignationMT::serialize(dynamic_cast<const uci::type::DMPI_DesignationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationRequestMDT:
      return asb_uci::type::DMPI_DesignationRequestMDT::serialize(dynamic_cast<const uci::type::DMPI_DesignationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationRequestMT:
      return asb_uci::type::DMPI_DesignationRequestMT::serialize(dynamic_cast<const uci::type::DMPI_DesignationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationRequestStatusMDT:
      return asb_uci::type::DMPI_DesignationRequestStatusMDT::serialize(dynamic_cast<const uci::type::DMPI_DesignationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_DesignationRequestStatusMT:
      return asb_uci::type::DMPI_DesignationRequestStatusMT::serialize(dynamic_cast<const uci::type::DMPI_DesignationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_ID_Type:
      return asb_uci::type::DMPI_ID_Type::serialize(dynamic_cast<const uci::type::DMPI_ID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_MDT:
      return asb_uci::type::DMPI_MDT::serialize(dynamic_cast<const uci::type::DMPI_MDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_MT:
      return asb_uci::type::DMPI_MT::serialize(dynamic_cast<const uci::type::DMPI_MT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_PatternID_Type:
      return asb_uci::type::DMPI_PatternID_Type::serialize(dynamic_cast<const uci::type::DMPI_PatternID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_PatternMDT:
      return asb_uci::type::DMPI_PatternMDT::serialize(dynamic_cast<const uci::type::DMPI_PatternMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_PatternMT:
      return asb_uci::type::DMPI_PatternMT::serialize(dynamic_cast<const uci::type::DMPI_PatternMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_PatternType:
      return asb_uci::type::DMPI_PatternType::serialize(dynamic_cast<const uci::type::DMPI_PatternType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_RadialPatternType:
      return asb_uci::type::DMPI_RadialPatternType::serialize(dynamic_cast<const uci::type::DMPI_RadialPatternType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_StatusMT:
      return asb_uci::type::DMPI_StatusMT::serialize(dynamic_cast<const uci::type::DMPI_StatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dMPI_XbyY_PatternType:
      return asb_uci::type::DMPI_XbyY_PatternType::serialize(dynamic_cast<const uci::type::DMPI_XbyY_PatternType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::doorCommandMT:
      return asb_uci::type::DoorCommandMT::serialize(dynamic_cast<const uci::type::DoorCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::doorCommandStatusMDT:
      return asb_uci::type::DoorCommandStatusMDT::serialize(dynamic_cast<const uci::type::DoorCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::doorCommandStatusMT:
      return asb_uci::type::DoorCommandStatusMT::serialize(dynamic_cast<const uci::type::DoorCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::doorCommandType:
      return asb_uci::type::DoorCommandType::serialize(dynamic_cast<const uci::type::DoorCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::doorStatusMT:
      return asb_uci::type::DoorStatusMT::serialize(dynamic_cast<const uci::type::DoorStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::doorStatusType:
      return asb_uci::type::DoorStatusType::serialize(dynamic_cast<const uci::type::DoorStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dVR_ProcessingParametersType:
      return asb_uci::type::DVR_ProcessingParametersType::serialize(dynamic_cast<const uci::type::DVR_ProcessingParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dwellID_Type:
      return asb_uci::type::DwellID_Type::serialize(dynamic_cast<const uci::type::DwellID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ActivityCommandType:
      return asb_uci::type::EA_ActivityCommandType::serialize(dynamic_cast<const uci::type::EA_ActivityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ActivityMT:
      return asb_uci::type::EA_ActivityMT::serialize(dynamic_cast<const uci::type::EA_ActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ActivityType:
      return asb_uci::type::EA_ActivityType::serialize(dynamic_cast<const uci::type::EA_ActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CapabilityCommandType:
      return asb_uci::type::EA_CapabilityCommandType::serialize(dynamic_cast<const uci::type::EA_CapabilityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CapabilityMDT:
      return asb_uci::type::EA_CapabilityMDT::serialize(dynamic_cast<const uci::type::EA_CapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CapabilityMT:
      return asb_uci::type::EA_CapabilityMT::serialize(dynamic_cast<const uci::type::EA_CapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CapabilityStatusMDT:
      return asb_uci::type::EA_CapabilityStatusMDT::serialize(dynamic_cast<const uci::type::EA_CapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CapabilityStatusMT:
      return asb_uci::type::EA_CapabilityStatusMT::serialize(dynamic_cast<const uci::type::EA_CapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CapabilityType:
      return asb_uci::type::EA_CapabilityType::serialize(dynamic_cast<const uci::type::EA_CapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CommandMT:
      return asb_uci::type::EA_CommandMT::serialize(dynamic_cast<const uci::type::EA_CommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CommandStatusMDT:
      return asb_uci::type::EA_CommandStatusMDT::serialize(dynamic_cast<const uci::type::EA_CommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_CommandStatusMT:
      return asb_uci::type::EA_CommandStatusMT::serialize(dynamic_cast<const uci::type::EA_CommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ConsentRequestMT:
      return asb_uci::type::EA_ConsentRequestMT::serialize(dynamic_cast<const uci::type::EA_ConsentRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ConsentRequestStatusMDT:
      return asb_uci::type::EA_ConsentRequestStatusMDT::serialize(dynamic_cast<const uci::type::EA_ConsentRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ConsentRequestStatusMT:
      return asb_uci::type::EA_ConsentRequestStatusMT::serialize(dynamic_cast<const uci::type::EA_ConsentRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_ConsentRequestType:
      return asb_uci::type::EA_ConsentRequestType::serialize(dynamic_cast<const uci::type::EA_ConsentRequestType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_SettingsCommandMDT:
      return asb_uci::type::EA_SettingsCommandMDT::serialize(dynamic_cast<const uci::type::EA_SettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_SettingsCommandMT:
      return asb_uci::type::EA_SettingsCommandMT::serialize(dynamic_cast<const uci::type::EA_SettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_SettingsCommandStatusMDT:
      return asb_uci::type::EA_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::EA_SettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_SettingsCommandStatusMT:
      return asb_uci::type::EA_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::EA_SettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eA_TechniqueIdentifierType:
      return asb_uci::type::EA_TechniqueIdentifierType::serialize(dynamic_cast<const uci::type::EA_TechniqueIdentifierType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::earthOrientationParametersID_Type:
      return asb_uci::type::EarthOrientationParametersID_Type::serialize(dynamic_cast<const uci::type::EarthOrientationParametersID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::earthOrientationParametersMT:
      return asb_uci::type::EarthOrientationParametersMT::serialize(dynamic_cast<const uci::type::EarthOrientationParametersMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eCEF_UnitVectorType:
      return asb_uci::type::ECEF_UnitVectorType::serialize(dynamic_cast<const uci::type::ECEF_UnitVectorType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eEI_ID_Type:
      return asb_uci::type::EEI_ID_Type::serialize(dynamic_cast<const uci::type::EEI_ID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eEI_MDT:
      return asb_uci::type::EEI_MDT::serialize(dynamic_cast<const uci::type::EEI_MDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::eEI_MT:
      return asb_uci::type::EEI_MT::serialize(dynamic_cast<const uci::type::EEI_MT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::effectActivityMT:
      return asb_uci::type::EffectActivityMT::serialize(dynamic_cast<const uci::type::EffectActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    default:
      return boost::none;
  }
}

} // namespace util

} // namespace asb_uci

