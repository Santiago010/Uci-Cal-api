/** @file DerivedTypesSerializer5.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer5.h"

#include <string>

#include <boost/none.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/CS_ActivityDetailType.h"
#include "asb_uci/type/CS_ActivityType.h"
#include "asb_uci/type/CS_AssessmentType.h"
#include "asb_uci/type/CS_CapabilityType.h"
#include "asb_uci/type/ComponentConfigurationType.h"
#include "asb_uci/type/ComponentDetailedStatusInfoType.h"
#include "asb_uci/type/ComponentDetailedStatusType.h"
#include "asb_uci/type/ComponentElementID_Type.h"
#include "asb_uci/type/ComponentExtendedStatusPET.h"
#include "asb_uci/type/ComponentID_Type.h"
#include "asb_uci/type/ComponentSettingsCommandMDT.h"
#include "asb_uci/type/ComponentSettingsCommandMT.h"
#include "asb_uci/type/ComponentSettingsCommandStatusMDT.h"
#include "asb_uci/type/ComponentSettingsCommandStatusMT.h"
#include "asb_uci/type/ComponentStatusDataRequestMDT.h"
#include "asb_uci/type/ComponentStatusDataRequestMT.h"
#include "asb_uci/type/ComponentStatusDataRequestStatusMDT.h"
#include "asb_uci/type/ComponentStatusDataRequestStatusMT.h"
#include "asb_uci/type/ComponentStatusMT.h"
#include "asb_uci/type/ComponentTemperatureType.h"
#include "asb_uci/type/CompressionRatioSettingsType.h"
#include "asb_uci/type/ConstrainingPlanPartsType.h"
#include "asb_uci/type/ControlInterfacesCommandMDT.h"
#include "asb_uci/type/ControlInterfacesCommandMT.h"
#include "asb_uci/type/ControlInterfacesCommandStatusMDT.h"
#include "asb_uci/type/ControlInterfacesCommandStatusMT.h"
#include "asb_uci/type/ControlRequestMDT.h"
#include "asb_uci/type/ControlRequestMT.h"
#include "asb_uci/type/ControlRequestStatusMDT.h"
#include "asb_uci/type/ControlRequestStatusMT.h"
#include "asb_uci/type/ControlSourcesCommandMDT.h"
#include "asb_uci/type/ControlSourcesCommandMT.h"
#include "asb_uci/type/ControlSourcesCommandStatusMDT.h"
#include "asb_uci/type/ControlSourcesCommandStatusMT.h"
#include "asb_uci/type/ControlStatusMT.h"
#include "asb_uci/type/CoordinatedRequirementSetID_Type.h"
#include "asb_uci/type/CoordinatedRequirementSetMT.h"
#include "asb_uci/type/CoordinatedRequirementSetStatusMT.h"
#include "asb_uci/type/CornerPointImageRegionOfInterestType.h"
#include "asb_uci/type/CorrelatedEntityID_Type.h"
#include "asb_uci/type/CounterSpaceActivityMT.h"
#include "asb_uci/type/CounterSpaceCapabilityMDT.h"
#include "asb_uci/type/CounterSpaceCapabilityMT.h"
#include "asb_uci/type/CounterSpaceCapabilityStatusMDT.h"
#include "asb_uci/type/CounterSpaceCapabilityStatusMT.h"
#include "asb_uci/type/CounterSpaceDeconflictionID_Type.h"
#include "asb_uci/type/CounterSpaceDeconflictionMDT.h"
#include "asb_uci/type/CounterSpaceDeconflictionMT.h"
#include "asb_uci/type/CounterSpaceReportID_Type.h"
#include "asb_uci/type/CounterSpaceReportMT.h"
#include "asb_uci/type/CryptoCommandMT.h"
#include "asb_uci/type/CryptoCommandStatusMDT.h"
#include "asb_uci/type/CryptoCommandStatusMT.h"
#include "asb_uci/type/CryptoCommandType.h"
#include "asb_uci/type/CryptoPortID_Type.h"
#include "asb_uci/type/CryptoSlotGroupID_Type.h"
#include "asb_uci/type/CryptoStatusMT.h"
#include "asb_uci/type/CryptoStatusType.h"
#include "asb_uci/type/DamageAssessmentDetailType.h"
#include "asb_uci/type/DamageAssessmentID_Type.h"
#include "asb_uci/type/DamageAssessmentMT.h"
#include "asb_uci/type/DamageAssessmentRequestMDT.h"
#include "asb_uci/type/DamageAssessmentRequestMT.h"
#include "asb_uci/type/DamageAssessmentRequestStatusMDT.h"
#include "asb_uci/type/DamageAssessmentRequestStatusMT.h"
#include "asb_uci/type/DamageEstimateID_Type.h"
#include "asb_uci/type/DamageEstimateMT.h"
#include "asb_uci/type/DamageEstimateRequestMDT.h"
#include "asb_uci/type/DamageEstimateRequestMT.h"
#include "asb_uci/type/DamageEstimateRequestStatusMDT.h"
#include "asb_uci/type/DamageEstimateRequestStatusMT.h"
#include "asb_uci/type/DamageInformationSourceType.h"
#include "asb_uci/type/DamageInformationWeatherSourceType.h"
#include "asb_uci/type/DamageReportDetailType.h"
#include "asb_uci/type/DamageReportID_Type.h"
#include "asb_uci/type/DamageReportMT.h"
#include "asb_uci/type/DamageSummaryID_Type.h"
#include "asb_uci/type/DamageSummaryMT.h"
#include "asb_uci/type/DamagedFunctionType.h"
#include "asb_uci/type/DataDeleteRequestMDT.h"
#include "asb_uci/type/DataDeleteRequestMT.h"
#include "asb_uci/type/DataDeleteRequestStatusMDT.h"
#include "asb_uci/type/DataDeleteRequestStatusMT.h"
#include "asb_uci/type/DataDestinationID_Type.h"
#include "asb_uci/type/DataLinkIdentifierPET.h"
#include "asb_uci/type/DataLinkNativeFilterPET.h"
#include "asb_uci/type/DataLinkNativeFilter_NetworkLinkType.h"
#include "asb_uci/type/DataLinkNativeInfoPET.h"
#include "asb_uci/type/DataManagementRequestMDT.h"
#include "asb_uci/type/DataManagementRequestMT.h"
#include "asb_uci/type/DataManagementRequestStatusMDT.h"
#include "asb_uci/type/DataManagementRequestStatusMT.h"
#include "asb_uci/type/DataPlanActivationCommandMDT.h"
#include "asb_uci/type/DataPlanActivationCommandMT.h"
#include "asb_uci/type/DataPlanActivationCommandStatusMDT.h"
#include "asb_uci/type/DataPlanActivationCommandStatusMT.h"
#include "asb_uci/type/DataPlanActivationStatusMT.h"
#include "asb_uci/type/DataPlanID_Type.h"
#include "asb_uci/type/DataPlanMT.h"
#include "asb_uci/type/DataPlanOverrideRequestMT.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/CS_ActivityDetailType.h"
#include "uci/type/CS_ActivityType.h"
#include "uci/type/CS_AssessmentType.h"
#include "uci/type/CS_CapabilityType.h"
#include "uci/type/ComponentConfigurationType.h"
#include "uci/type/ComponentDetailedStatusInfoType.h"
#include "uci/type/ComponentDetailedStatusType.h"
#include "uci/type/ComponentElementID_Type.h"
#include "uci/type/ComponentExtendedStatusPET.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/ComponentSettingsCommandMDT.h"
#include "uci/type/ComponentSettingsCommandMT.h"
#include "uci/type/ComponentSettingsCommandStatusMDT.h"
#include "uci/type/ComponentSettingsCommandStatusMT.h"
#include "uci/type/ComponentStatusDataRequestMDT.h"
#include "uci/type/ComponentStatusDataRequestMT.h"
#include "uci/type/ComponentStatusDataRequestStatusMDT.h"
#include "uci/type/ComponentStatusDataRequestStatusMT.h"
#include "uci/type/ComponentStatusMT.h"
#include "uci/type/ComponentTemperatureType.h"
#include "uci/type/CompressionRatioSettingsType.h"
#include "uci/type/ConstrainingPlanPartsType.h"
#include "uci/type/ControlInterfacesCommandMDT.h"
#include "uci/type/ControlInterfacesCommandMT.h"
#include "uci/type/ControlInterfacesCommandStatusMDT.h"
#include "uci/type/ControlInterfacesCommandStatusMT.h"
#include "uci/type/ControlRequestMDT.h"
#include "uci/type/ControlRequestMT.h"
#include "uci/type/ControlRequestStatusMDT.h"
#include "uci/type/ControlRequestStatusMT.h"
#include "uci/type/ControlSourcesCommandMDT.h"
#include "uci/type/ControlSourcesCommandMT.h"
#include "uci/type/ControlSourcesCommandStatusMDT.h"
#include "uci/type/ControlSourcesCommandStatusMT.h"
#include "uci/type/ControlStatusMT.h"
#include "uci/type/CoordinatedRequirementSetID_Type.h"
#include "uci/type/CoordinatedRequirementSetMT.h"
#include "uci/type/CoordinatedRequirementSetStatusMT.h"
#include "uci/type/CornerPointImageRegionOfInterestType.h"
#include "uci/type/CorrelatedEntityID_Type.h"
#include "uci/type/CounterSpaceActivityMT.h"
#include "uci/type/CounterSpaceCapabilityMDT.h"
#include "uci/type/CounterSpaceCapabilityMT.h"
#include "uci/type/CounterSpaceCapabilityStatusMDT.h"
#include "uci/type/CounterSpaceCapabilityStatusMT.h"
#include "uci/type/CounterSpaceDeconflictionID_Type.h"
#include "uci/type/CounterSpaceDeconflictionMDT.h"
#include "uci/type/CounterSpaceDeconflictionMT.h"
#include "uci/type/CounterSpaceReportID_Type.h"
#include "uci/type/CounterSpaceReportMT.h"
#include "uci/type/CryptoCommandMT.h"
#include "uci/type/CryptoCommandStatusMDT.h"
#include "uci/type/CryptoCommandStatusMT.h"
#include "uci/type/CryptoCommandType.h"
#include "uci/type/CryptoPortID_Type.h"
#include "uci/type/CryptoSlotGroupID_Type.h"
#include "uci/type/CryptoStatusMT.h"
#include "uci/type/CryptoStatusType.h"
#include "uci/type/DamageAssessmentDetailType.h"
#include "uci/type/DamageAssessmentID_Type.h"
#include "uci/type/DamageAssessmentMT.h"
#include "uci/type/DamageAssessmentRequestMDT.h"
#include "uci/type/DamageAssessmentRequestMT.h"
#include "uci/type/DamageAssessmentRequestStatusMDT.h"
#include "uci/type/DamageAssessmentRequestStatusMT.h"
#include "uci/type/DamageEstimateID_Type.h"
#include "uci/type/DamageEstimateMT.h"
#include "uci/type/DamageEstimateRequestMDT.h"
#include "uci/type/DamageEstimateRequestMT.h"
#include "uci/type/DamageEstimateRequestStatusMDT.h"
#include "uci/type/DamageEstimateRequestStatusMT.h"
#include "uci/type/DamageInformationSourceType.h"
#include "uci/type/DamageInformationWeatherSourceType.h"
#include "uci/type/DamageReportDetailType.h"
#include "uci/type/DamageReportID_Type.h"
#include "uci/type/DamageReportMT.h"
#include "uci/type/DamageSummaryID_Type.h"
#include "uci/type/DamageSummaryMT.h"
#include "uci/type/DamagedFunctionType.h"
#include "uci/type/DataDeleteRequestMDT.h"
#include "uci/type/DataDeleteRequestMT.h"
#include "uci/type/DataDeleteRequestStatusMDT.h"
#include "uci/type/DataDeleteRequestStatusMT.h"
#include "uci/type/DataDestinationID_Type.h"
#include "uci/type/DataLinkIdentifierPET.h"
#include "uci/type/DataLinkNativeFilterPET.h"
#include "uci/type/DataLinkNativeFilter_NetworkLinkType.h"
#include "uci/type/DataLinkNativeInfoPET.h"
#include "uci/type/DataManagementRequestMDT.h"
#include "uci/type/DataManagementRequestMT.h"
#include "uci/type/DataManagementRequestStatusMDT.h"
#include "uci/type/DataManagementRequestStatusMT.h"
#include "uci/type/DataPlanActivationCommandMDT.h"
#include "uci/type/DataPlanActivationCommandMT.h"
#include "uci/type/DataPlanActivationCommandStatusMDT.h"
#include "uci/type/DataPlanActivationCommandStatusMT.h"
#include "uci/type/DataPlanActivationStatusMT.h"
#include "uci/type/DataPlanID_Type.h"
#include "uci/type/DataPlanMT.h"
#include "uci/type/DataPlanOverrideRequestMT.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

boost::optional<std::string> DerivedTypesSerializer5::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::componentConfigurationType:
      return asb_uci::type::ComponentConfigurationType::serialize(dynamic_cast<const uci::type::ComponentConfigurationType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentDetailedStatusInfoType:
      return asb_uci::type::ComponentDetailedStatusInfoType::serialize(dynamic_cast<const uci::type::ComponentDetailedStatusInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentDetailedStatusType:
      return asb_uci::type::ComponentDetailedStatusType::serialize(dynamic_cast<const uci::type::ComponentDetailedStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentElementID_Type:
      return asb_uci::type::ComponentElementID_Type::serialize(dynamic_cast<const uci::type::ComponentElementID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentExtendedStatusPET:
      return asb_uci::type::ComponentExtendedStatusPET::serialize(dynamic_cast<const uci::type::ComponentExtendedStatusPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentID_Type:
      return asb_uci::type::ComponentID_Type::serialize(dynamic_cast<const uci::type::ComponentID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentSettingsCommandMDT:
      return asb_uci::type::ComponentSettingsCommandMDT::serialize(dynamic_cast<const uci::type::ComponentSettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentSettingsCommandMT:
      return asb_uci::type::ComponentSettingsCommandMT::serialize(dynamic_cast<const uci::type::ComponentSettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentSettingsCommandStatusMDT:
      return asb_uci::type::ComponentSettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::ComponentSettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentSettingsCommandStatusMT:
      return asb_uci::type::ComponentSettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::ComponentSettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentStatusDataRequestMDT:
      return asb_uci::type::ComponentStatusDataRequestMDT::serialize(dynamic_cast<const uci::type::ComponentStatusDataRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentStatusDataRequestMT:
      return asb_uci::type::ComponentStatusDataRequestMT::serialize(dynamic_cast<const uci::type::ComponentStatusDataRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentStatusDataRequestStatusMDT:
      return asb_uci::type::ComponentStatusDataRequestStatusMDT::serialize(dynamic_cast<const uci::type::ComponentStatusDataRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentStatusDataRequestStatusMT:
      return asb_uci::type::ComponentStatusDataRequestStatusMT::serialize(dynamic_cast<const uci::type::ComponentStatusDataRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentStatusMT:
      return asb_uci::type::ComponentStatusMT::serialize(dynamic_cast<const uci::type::ComponentStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::componentTemperatureType:
      return asb_uci::type::ComponentTemperatureType::serialize(dynamic_cast<const uci::type::ComponentTemperatureType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::compressionRatioSettingsType:
      return asb_uci::type::CompressionRatioSettingsType::serialize(dynamic_cast<const uci::type::CompressionRatioSettingsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::constrainingPlanPartsType:
      return asb_uci::type::ConstrainingPlanPartsType::serialize(dynamic_cast<const uci::type::ConstrainingPlanPartsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlInterfacesCommandMDT:
      return asb_uci::type::ControlInterfacesCommandMDT::serialize(dynamic_cast<const uci::type::ControlInterfacesCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlInterfacesCommandMT:
      return asb_uci::type::ControlInterfacesCommandMT::serialize(dynamic_cast<const uci::type::ControlInterfacesCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlInterfacesCommandStatusMDT:
      return asb_uci::type::ControlInterfacesCommandStatusMDT::serialize(dynamic_cast<const uci::type::ControlInterfacesCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlInterfacesCommandStatusMT:
      return asb_uci::type::ControlInterfacesCommandStatusMT::serialize(dynamic_cast<const uci::type::ControlInterfacesCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlRequestMDT:
      return asb_uci::type::ControlRequestMDT::serialize(dynamic_cast<const uci::type::ControlRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlRequestMT:
      return asb_uci::type::ControlRequestMT::serialize(dynamic_cast<const uci::type::ControlRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlRequestStatusMDT:
      return asb_uci::type::ControlRequestStatusMDT::serialize(dynamic_cast<const uci::type::ControlRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlRequestStatusMT:
      return asb_uci::type::ControlRequestStatusMT::serialize(dynamic_cast<const uci::type::ControlRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlSourcesCommandMDT:
      return asb_uci::type::ControlSourcesCommandMDT::serialize(dynamic_cast<const uci::type::ControlSourcesCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlSourcesCommandMT:
      return asb_uci::type::ControlSourcesCommandMT::serialize(dynamic_cast<const uci::type::ControlSourcesCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlSourcesCommandStatusMDT:
      return asb_uci::type::ControlSourcesCommandStatusMDT::serialize(dynamic_cast<const uci::type::ControlSourcesCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlSourcesCommandStatusMT:
      return asb_uci::type::ControlSourcesCommandStatusMT::serialize(dynamic_cast<const uci::type::ControlSourcesCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::controlStatusMT:
      return asb_uci::type::ControlStatusMT::serialize(dynamic_cast<const uci::type::ControlStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::coordinatedRequirementSetID_Type:
      return asb_uci::type::CoordinatedRequirementSetID_Type::serialize(dynamic_cast<const uci::type::CoordinatedRequirementSetID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::coordinatedRequirementSetMT:
      return asb_uci::type::CoordinatedRequirementSetMT::serialize(dynamic_cast<const uci::type::CoordinatedRequirementSetMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::coordinatedRequirementSetStatusMT:
      return asb_uci::type::CoordinatedRequirementSetStatusMT::serialize(dynamic_cast<const uci::type::CoordinatedRequirementSetStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cornerPointImageRegionOfInterestType:
      return asb_uci::type::CornerPointImageRegionOfInterestType::serialize(dynamic_cast<const uci::type::CornerPointImageRegionOfInterestType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::correlatedEntityID_Type:
      return asb_uci::type::CorrelatedEntityID_Type::serialize(dynamic_cast<const uci::type::CorrelatedEntityID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceActivityMT:
      return asb_uci::type::CounterSpaceActivityMT::serialize(dynamic_cast<const uci::type::CounterSpaceActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceCapabilityMDT:
      return asb_uci::type::CounterSpaceCapabilityMDT::serialize(dynamic_cast<const uci::type::CounterSpaceCapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceCapabilityMT:
      return asb_uci::type::CounterSpaceCapabilityMT::serialize(dynamic_cast<const uci::type::CounterSpaceCapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceCapabilityStatusMDT:
      return asb_uci::type::CounterSpaceCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::CounterSpaceCapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceCapabilityStatusMT:
      return asb_uci::type::CounterSpaceCapabilityStatusMT::serialize(dynamic_cast<const uci::type::CounterSpaceCapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceDeconflictionID_Type:
      return asb_uci::type::CounterSpaceDeconflictionID_Type::serialize(dynamic_cast<const uci::type::CounterSpaceDeconflictionID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceDeconflictionMDT:
      return asb_uci::type::CounterSpaceDeconflictionMDT::serialize(dynamic_cast<const uci::type::CounterSpaceDeconflictionMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceDeconflictionMT:
      return asb_uci::type::CounterSpaceDeconflictionMT::serialize(dynamic_cast<const uci::type::CounterSpaceDeconflictionMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceReportID_Type:
      return asb_uci::type::CounterSpaceReportID_Type::serialize(dynamic_cast<const uci::type::CounterSpaceReportID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::counterSpaceReportMT:
      return asb_uci::type::CounterSpaceReportMT::serialize(dynamic_cast<const uci::type::CounterSpaceReportMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoCommandMT:
      return asb_uci::type::CryptoCommandMT::serialize(dynamic_cast<const uci::type::CryptoCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoCommandStatusMDT:
      return asb_uci::type::CryptoCommandStatusMDT::serialize(dynamic_cast<const uci::type::CryptoCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoCommandStatusMT:
      return asb_uci::type::CryptoCommandStatusMT::serialize(dynamic_cast<const uci::type::CryptoCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoCommandType:
      return asb_uci::type::CryptoCommandType::serialize(dynamic_cast<const uci::type::CryptoCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoPortID_Type:
      return asb_uci::type::CryptoPortID_Type::serialize(dynamic_cast<const uci::type::CryptoPortID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoSlotGroupID_Type:
      return asb_uci::type::CryptoSlotGroupID_Type::serialize(dynamic_cast<const uci::type::CryptoSlotGroupID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoStatusMT:
      return asb_uci::type::CryptoStatusMT::serialize(dynamic_cast<const uci::type::CryptoStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cryptoStatusType:
      return asb_uci::type::CryptoStatusType::serialize(dynamic_cast<const uci::type::CryptoStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cS_ActivityDetailType:
      return asb_uci::type::CS_ActivityDetailType::serialize(dynamic_cast<const uci::type::CS_ActivityDetailType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cS_ActivityType:
      return asb_uci::type::CS_ActivityType::serialize(dynamic_cast<const uci::type::CS_ActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cS_AssessmentType:
      return asb_uci::type::CS_AssessmentType::serialize(dynamic_cast<const uci::type::CS_AssessmentType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::cS_CapabilityType:
      return asb_uci::type::CS_CapabilityType::serialize(dynamic_cast<const uci::type::CS_CapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentDetailType:
      return asb_uci::type::DamageAssessmentDetailType::serialize(dynamic_cast<const uci::type::DamageAssessmentDetailType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentID_Type:
      return asb_uci::type::DamageAssessmentID_Type::serialize(dynamic_cast<const uci::type::DamageAssessmentID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentMT:
      return asb_uci::type::DamageAssessmentMT::serialize(dynamic_cast<const uci::type::DamageAssessmentMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentRequestMDT:
      return asb_uci::type::DamageAssessmentRequestMDT::serialize(dynamic_cast<const uci::type::DamageAssessmentRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentRequestMT:
      return asb_uci::type::DamageAssessmentRequestMT::serialize(dynamic_cast<const uci::type::DamageAssessmentRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentRequestStatusMDT:
      return asb_uci::type::DamageAssessmentRequestStatusMDT::serialize(dynamic_cast<const uci::type::DamageAssessmentRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageAssessmentRequestStatusMT:
      return asb_uci::type::DamageAssessmentRequestStatusMT::serialize(dynamic_cast<const uci::type::DamageAssessmentRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damagedFunctionType:
      return asb_uci::type::DamagedFunctionType::serialize(dynamic_cast<const uci::type::DamagedFunctionType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageEstimateID_Type:
      return asb_uci::type::DamageEstimateID_Type::serialize(dynamic_cast<const uci::type::DamageEstimateID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageEstimateMT:
      return asb_uci::type::DamageEstimateMT::serialize(dynamic_cast<const uci::type::DamageEstimateMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageEstimateRequestMDT:
      return asb_uci::type::DamageEstimateRequestMDT::serialize(dynamic_cast<const uci::type::DamageEstimateRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageEstimateRequestMT:
      return asb_uci::type::DamageEstimateRequestMT::serialize(dynamic_cast<const uci::type::DamageEstimateRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageEstimateRequestStatusMDT:
      return asb_uci::type::DamageEstimateRequestStatusMDT::serialize(dynamic_cast<const uci::type::DamageEstimateRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageEstimateRequestStatusMT:
      return asb_uci::type::DamageEstimateRequestStatusMT::serialize(dynamic_cast<const uci::type::DamageEstimateRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageInformationSourceType:
      return asb_uci::type::DamageInformationSourceType::serialize(dynamic_cast<const uci::type::DamageInformationSourceType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageInformationWeatherSourceType:
      return asb_uci::type::DamageInformationWeatherSourceType::serialize(dynamic_cast<const uci::type::DamageInformationWeatherSourceType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageReportDetailType:
      return asb_uci::type::DamageReportDetailType::serialize(dynamic_cast<const uci::type::DamageReportDetailType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageReportID_Type:
      return asb_uci::type::DamageReportID_Type::serialize(dynamic_cast<const uci::type::DamageReportID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageReportMT:
      return asb_uci::type::DamageReportMT::serialize(dynamic_cast<const uci::type::DamageReportMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageSummaryID_Type:
      return asb_uci::type::DamageSummaryID_Type::serialize(dynamic_cast<const uci::type::DamageSummaryID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::damageSummaryMT:
      return asb_uci::type::DamageSummaryMT::serialize(dynamic_cast<const uci::type::DamageSummaryMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataDeleteRequestMDT:
      return asb_uci::type::DataDeleteRequestMDT::serialize(dynamic_cast<const uci::type::DataDeleteRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataDeleteRequestMT:
      return asb_uci::type::DataDeleteRequestMT::serialize(dynamic_cast<const uci::type::DataDeleteRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataDeleteRequestStatusMDT:
      return asb_uci::type::DataDeleteRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataDeleteRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataDeleteRequestStatusMT:
      return asb_uci::type::DataDeleteRequestStatusMT::serialize(dynamic_cast<const uci::type::DataDeleteRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataDestinationID_Type:
      return asb_uci::type::DataDestinationID_Type::serialize(dynamic_cast<const uci::type::DataDestinationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataLinkIdentifierPET:
      return asb_uci::type::DataLinkIdentifierPET::serialize(dynamic_cast<const uci::type::DataLinkIdentifierPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataLinkNativeFilter_NetworkLinkType:
      return asb_uci::type::DataLinkNativeFilter_NetworkLinkType::serialize(dynamic_cast<const uci::type::DataLinkNativeFilter_NetworkLinkType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataLinkNativeFilterPET:
      return asb_uci::type::DataLinkNativeFilterPET::serialize(dynamic_cast<const uci::type::DataLinkNativeFilterPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataLinkNativeInfoPET:
      return asb_uci::type::DataLinkNativeInfoPET::serialize(dynamic_cast<const uci::type::DataLinkNativeInfoPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataManagementRequestMDT:
      return asb_uci::type::DataManagementRequestMDT::serialize(dynamic_cast<const uci::type::DataManagementRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataManagementRequestMT:
      return asb_uci::type::DataManagementRequestMT::serialize(dynamic_cast<const uci::type::DataManagementRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataManagementRequestStatusMDT:
      return asb_uci::type::DataManagementRequestStatusMDT::serialize(dynamic_cast<const uci::type::DataManagementRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataManagementRequestStatusMT:
      return asb_uci::type::DataManagementRequestStatusMT::serialize(dynamic_cast<const uci::type::DataManagementRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanActivationCommandMDT:
      return asb_uci::type::DataPlanActivationCommandMDT::serialize(dynamic_cast<const uci::type::DataPlanActivationCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanActivationCommandMT:
      return asb_uci::type::DataPlanActivationCommandMT::serialize(dynamic_cast<const uci::type::DataPlanActivationCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanActivationCommandStatusMDT:
      return asb_uci::type::DataPlanActivationCommandStatusMDT::serialize(dynamic_cast<const uci::type::DataPlanActivationCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanActivationCommandStatusMT:
      return asb_uci::type::DataPlanActivationCommandStatusMT::serialize(dynamic_cast<const uci::type::DataPlanActivationCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanActivationStatusMT:
      return asb_uci::type::DataPlanActivationStatusMT::serialize(dynamic_cast<const uci::type::DataPlanActivationStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanID_Type:
      return asb_uci::type::DataPlanID_Type::serialize(dynamic_cast<const uci::type::DataPlanID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanMT:
      return asb_uci::type::DataPlanMT::serialize(dynamic_cast<const uci::type::DataPlanMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::dataPlanOverrideRequestMT:
      return asb_uci::type::DataPlanOverrideRequestMT::serialize(dynamic_cast<const uci::type::DataPlanOverrideRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    default:
      return boost::none;
  }
}

} // namespace util

} // namespace asb_uci

