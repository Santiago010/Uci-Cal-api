/** @file DerivedTypesSerializer17.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer17.h"

#include <string>

#include <boost/none.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/SAR_TaskAchievabilityAssessmentType.h"
#include "asb_uci/type/SAR_TaskBaseType.h"
#include "asb_uci/type/SAR_TaskType.h"
#include "asb_uci/type/SAR_TwoColorMultiViewParametersType.h"
#include "asb_uci/type/SMTI_ActivityCommandType.h"
#include "asb_uci/type/SMTI_ActivityMT.h"
#include "asb_uci/type/SMTI_ActivityType.h"
#include "asb_uci/type/SMTI_CapabilityCommandType.h"
#include "asb_uci/type/SMTI_CapabilityMDT.h"
#include "asb_uci/type/SMTI_CapabilityMT.h"
#include "asb_uci/type/SMTI_CapabilityStatusMDT.h"
#include "asb_uci/type/SMTI_CapabilityStatusMT.h"
#include "asb_uci/type/SMTI_CapabilityType.h"
#include "asb_uci/type/SMTI_CollectionConstraintsType.h"
#include "asb_uci/type/SMTI_CollectionOptionsType.h"
#include "asb_uci/type/SMTI_CommandMT.h"
#include "asb_uci/type/SMTI_CommandStatusMDT.h"
#include "asb_uci/type/SMTI_CommandStatusMT.h"
#include "asb_uci/type/SMTI_SettingsCommandMDT.h"
#include "asb_uci/type/SMTI_SettingsCommandMT.h"
#include "asb_uci/type/SMTI_SettingsCommandStatusMDT.h"
#include "asb_uci/type/SMTI_SettingsCommandStatusMT.h"
#include "asb_uci/type/SMTI_TaskBaseType.h"
#include "asb_uci/type/SMTI_TaskType.h"
#include "asb_uci/type/SOB_C2_RecordBaseType.h"
#include "asb_uci/type/SOB_C2_RecordID_Type.h"
#include "asb_uci/type/SOB_C2_RecordMDT.h"
#include "asb_uci/type/SOB_C2_RecordMT.h"
#include "asb_uci/type/SOB_C2_RecordType.h"
#include "asb_uci/type/SOB_CorrelationRecordID_Type.h"
#include "asb_uci/type/SOB_CorrelationRecordMDT.h"
#include "asb_uci/type/SOB_CorrelationRecordMT.h"
#include "asb_uci/type/SOB_SatelliteRecordBaseType.h"
#include "asb_uci/type/SOB_SatelliteRecordID_Type.h"
#include "asb_uci/type/SOB_SatelliteRecordMDT.h"
#include "asb_uci/type/SOB_SatelliteRecordMT.h"
#include "asb_uci/type/SOB_SatelliteRecordType.h"
#include "asb_uci/type/SatelliteCharacteristicsID_Type.h"
#include "asb_uci/type/SatelliteCharacteristicsMDT.h"
#include "asb_uci/type/SatelliteCharacteristicsMT.h"
#include "asb_uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "asb_uci/type/ScanDataBaseType.h"
#include "asb_uci/type/ScanDataType.h"
#include "asb_uci/type/ScoringProcessID_Type.h"
#include "asb_uci/type/SectorType.h"
#include "asb_uci/type/SecurityAuditRecordID_Type.h"
#include "asb_uci/type/SecurityAuditRecordMT.h"
#include "asb_uci/type/SegmentCompletedType.h"
#include "asb_uci/type/SegmentEstimateType.h"
#include "asb_uci/type/SegmentID_Type.h"
#include "asb_uci/type/SelectionQuerySpecificDataType.h"
#include "asb_uci/type/SelfDefenseStatusMDT.h"
#include "asb_uci/type/SelfDefenseStatusMT.h"
#include "asb_uci/type/SensorConstraintsBaseType.h"
#include "asb_uci/type/SensorConstraintsType.h"
#include "asb_uci/type/SeparationParametersType.h"
#include "asb_uci/type/ServiceConfigurationChangeRequestMDT.h"
#include "asb_uci/type/ServiceConfigurationChangeRequestMT.h"
#include "asb_uci/type/ServiceConfigurationChangeRequestStatusMDT.h"
#include "asb_uci/type/ServiceConfigurationChangeRequestStatusMT.h"
#include "asb_uci/type/ServiceConfigurationParamsDataRequestMDT.h"
#include "asb_uci/type/ServiceConfigurationParamsDataRequestMT.h"
#include "asb_uci/type/ServiceConfigurationParamsDataRequestStatusMDT.h"
#include "asb_uci/type/ServiceConfigurationParamsDataRequestStatusMT.h"
#include "asb_uci/type/ServiceConfigurationParamsMT.h"
#include "asb_uci/type/ServiceErrorReportID_Type.h"
#include "asb_uci/type/ServiceErrorReportMT.h"
#include "asb_uci/type/ServiceID_Type.h"
#include "asb_uci/type/ServiceLifecycleCommandMDT.h"
#include "asb_uci/type/ServiceLifecycleCommandMT.h"
#include "asb_uci/type/ServiceLifecycleCommandStatusMDT.h"
#include "asb_uci/type/ServiceLifecycleCommandStatusMT.h"
#include "asb_uci/type/ServiceRegistrationRequestMDT.h"
#include "asb_uci/type/ServiceRegistrationRequestMT.h"
#include "asb_uci/type/ServiceRegistrationRequestStatusMDT.h"
#include "asb_uci/type/ServiceRegistrationRequestStatusMT.h"
#include "asb_uci/type/ServiceSettingsCommandMDT.h"
#include "asb_uci/type/ServiceSettingsCommandMT.h"
#include "asb_uci/type/ServiceSettingsCommandStatusMDT.h"
#include "asb_uci/type/ServiceSettingsCommandStatusMT.h"
#include "asb_uci/type/ServiceStatusDataRequestMDT.h"
#include "asb_uci/type/ServiceStatusDataRequestMT.h"
#include "asb_uci/type/ServiceStatusDataRequestStatusMDT.h"
#include "asb_uci/type/ServiceStatusDataRequestStatusMT.h"
#include "asb_uci/type/ServiceStatusMT.h"
#include "asb_uci/type/SharedApertureSupportCapabilityStatusMDT.h"
#include "asb_uci/type/SharedApertureSupportCapabilityStatusMT.h"
#include "asb_uci/type/SharedRF_ApertureActivityBaseType.h"
#include "asb_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "asb_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "asb_uci/type/SignalEmitterKinematicsFixedType.h"
#include "asb_uci/type/SignalID_Type.h"
#include "asb_uci/type/SignalIdentityType.h"
#include "asb_uci/type/SignalPulseWidthBaseType.h"
#include "asb_uci/type/SignalPulseWidthType.h"
#include "asb_uci/type/SignalRelativeType.h"
#include "asb_uci/type/SignalReportID_Type.h"
#include "asb_uci/type/SignalReportMT.h"
#include "asb_uci/type/SpaceWeatherID_Type.h"
#include "asb_uci/type/SpaceWeatherMT.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/SAR_TaskAchievabilityAssessmentType.h"
#include "uci/type/SAR_TaskBaseType.h"
#include "uci/type/SAR_TaskType.h"
#include "uci/type/SAR_TwoColorMultiViewParametersType.h"
#include "uci/type/SMTI_ActivityCommandType.h"
#include "uci/type/SMTI_ActivityMT.h"
#include "uci/type/SMTI_ActivityType.h"
#include "uci/type/SMTI_CapabilityCommandType.h"
#include "uci/type/SMTI_CapabilityMDT.h"
#include "uci/type/SMTI_CapabilityMT.h"
#include "uci/type/SMTI_CapabilityStatusMDT.h"
#include "uci/type/SMTI_CapabilityStatusMT.h"
#include "uci/type/SMTI_CapabilityType.h"
#include "uci/type/SMTI_CollectionConstraintsType.h"
#include "uci/type/SMTI_CollectionOptionsType.h"
#include "uci/type/SMTI_CommandMT.h"
#include "uci/type/SMTI_CommandStatusMDT.h"
#include "uci/type/SMTI_CommandStatusMT.h"
#include "uci/type/SMTI_SettingsCommandMDT.h"
#include "uci/type/SMTI_SettingsCommandMT.h"
#include "uci/type/SMTI_SettingsCommandStatusMDT.h"
#include "uci/type/SMTI_SettingsCommandStatusMT.h"
#include "uci/type/SMTI_TaskBaseType.h"
#include "uci/type/SMTI_TaskType.h"
#include "uci/type/SOB_C2_RecordBaseType.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_C2_RecordMDT.h"
#include "uci/type/SOB_C2_RecordMT.h"
#include "uci/type/SOB_C2_RecordType.h"
#include "uci/type/SOB_CorrelationRecordID_Type.h"
#include "uci/type/SOB_CorrelationRecordMDT.h"
#include "uci/type/SOB_CorrelationRecordMT.h"
#include "uci/type/SOB_SatelliteRecordBaseType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordMDT.h"
#include "uci/type/SOB_SatelliteRecordMT.h"
#include "uci/type/SOB_SatelliteRecordType.h"
#include "uci/type/SatelliteCharacteristicsID_Type.h"
#include "uci/type/SatelliteCharacteristicsMDT.h"
#include "uci/type/SatelliteCharacteristicsMT.h"
#include "uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "uci/type/ScanDataBaseType.h"
#include "uci/type/ScanDataType.h"
#include "uci/type/ScoringProcessID_Type.h"
#include "uci/type/SectorType.h"
#include "uci/type/SecurityAuditRecordID_Type.h"
#include "uci/type/SecurityAuditRecordMT.h"
#include "uci/type/SegmentCompletedType.h"
#include "uci/type/SegmentEstimateType.h"
#include "uci/type/SegmentID_Type.h"
#include "uci/type/SelectionQuerySpecificDataType.h"
#include "uci/type/SelfDefenseStatusMDT.h"
#include "uci/type/SelfDefenseStatusMT.h"
#include "uci/type/SensorConstraintsBaseType.h"
#include "uci/type/SensorConstraintsType.h"
#include "uci/type/SeparationParametersType.h"
#include "uci/type/ServiceConfigurationChangeRequestMDT.h"
#include "uci/type/ServiceConfigurationChangeRequestMT.h"
#include "uci/type/ServiceConfigurationChangeRequestStatusMDT.h"
#include "uci/type/ServiceConfigurationChangeRequestStatusMT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestMDT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestMT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestStatusMDT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestStatusMT.h"
#include "uci/type/ServiceConfigurationParamsMT.h"
#include "uci/type/ServiceErrorReportID_Type.h"
#include "uci/type/ServiceErrorReportMT.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/ServiceLifecycleCommandMDT.h"
#include "uci/type/ServiceLifecycleCommandMT.h"
#include "uci/type/ServiceLifecycleCommandStatusMDT.h"
#include "uci/type/ServiceLifecycleCommandStatusMT.h"
#include "uci/type/ServiceRegistrationRequestMDT.h"
#include "uci/type/ServiceRegistrationRequestMT.h"
#include "uci/type/ServiceRegistrationRequestStatusMDT.h"
#include "uci/type/ServiceRegistrationRequestStatusMT.h"
#include "uci/type/ServiceSettingsCommandMDT.h"
#include "uci/type/ServiceSettingsCommandMT.h"
#include "uci/type/ServiceSettingsCommandStatusMDT.h"
#include "uci/type/ServiceSettingsCommandStatusMT.h"
#include "uci/type/ServiceStatusDataRequestMDT.h"
#include "uci/type/ServiceStatusDataRequestMT.h"
#include "uci/type/ServiceStatusDataRequestStatusMDT.h"
#include "uci/type/ServiceStatusDataRequestStatusMT.h"
#include "uci/type/ServiceStatusMT.h"
#include "uci/type/SharedApertureSupportCapabilityStatusMDT.h"
#include "uci/type/SharedApertureSupportCapabilityStatusMT.h"
#include "uci/type/SharedRF_ApertureActivityBaseType.h"
#include "uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "uci/type/SignalEmitterKinematicsFixedType.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SignalIdentityType.h"
#include "uci/type/SignalPulseWidthBaseType.h"
#include "uci/type/SignalPulseWidthType.h"
#include "uci/type/SignalRelativeType.h"
#include "uci/type/SignalReportID_Type.h"
#include "uci/type/SignalReportMT.h"
#include "uci/type/SpaceWeatherID_Type.h"
#include "uci/type/SpaceWeatherMT.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

boost::optional<std::string> DerivedTypesSerializer17::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::sAR_TaskAchievabilityAssessmentType:
      return asb_uci::type::SAR_TaskAchievabilityAssessmentType::serialize(dynamic_cast<const uci::type::SAR_TaskAchievabilityAssessmentType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_TaskBaseType:
      return asb_uci::type::SAR_TaskBaseType::serialize(dynamic_cast<const uci::type::SAR_TaskBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_TaskType:
      return asb_uci::type::SAR_TaskType::serialize(dynamic_cast<const uci::type::SAR_TaskType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_TwoColorMultiViewParametersType:
      return asb_uci::type::SAR_TwoColorMultiViewParametersType::serialize(dynamic_cast<const uci::type::SAR_TwoColorMultiViewParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::satelliteCharacteristicsID_Type:
      return asb_uci::type::SatelliteCharacteristicsID_Type::serialize(dynamic_cast<const uci::type::SatelliteCharacteristicsID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::satelliteCharacteristicsMDT:
      return asb_uci::type::SatelliteCharacteristicsMDT::serialize(dynamic_cast<const uci::type::SatelliteCharacteristicsMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::satelliteCharacteristicsMT:
      return asb_uci::type::SatelliteCharacteristicsMT::serialize(dynamic_cast<const uci::type::SatelliteCharacteristicsMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::satellitePhysicalConfigurationID_Type:
      return asb_uci::type::SatellitePhysicalConfigurationID_Type::serialize(dynamic_cast<const uci::type::SatellitePhysicalConfigurationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::scanDataBaseType:
      return asb_uci::type::ScanDataBaseType::serialize(dynamic_cast<const uci::type::ScanDataBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::scanDataType:
      return asb_uci::type::ScanDataType::serialize(dynamic_cast<const uci::type::ScanDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::scoringProcessID_Type:
      return asb_uci::type::ScoringProcessID_Type::serialize(dynamic_cast<const uci::type::ScoringProcessID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sectorType:
      return asb_uci::type::SectorType::serialize(dynamic_cast<const uci::type::SectorType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::securityAuditRecordID_Type:
      return asb_uci::type::SecurityAuditRecordID_Type::serialize(dynamic_cast<const uci::type::SecurityAuditRecordID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::securityAuditRecordMT:
      return asb_uci::type::SecurityAuditRecordMT::serialize(dynamic_cast<const uci::type::SecurityAuditRecordMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::segmentCompletedType:
      return asb_uci::type::SegmentCompletedType::serialize(dynamic_cast<const uci::type::SegmentCompletedType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::segmentEstimateType:
      return asb_uci::type::SegmentEstimateType::serialize(dynamic_cast<const uci::type::SegmentEstimateType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::segmentID_Type:
      return asb_uci::type::SegmentID_Type::serialize(dynamic_cast<const uci::type::SegmentID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::selectionQuerySpecificDataType:
      return asb_uci::type::SelectionQuerySpecificDataType::serialize(dynamic_cast<const uci::type::SelectionQuerySpecificDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::selfDefenseStatusMDT:
      return asb_uci::type::SelfDefenseStatusMDT::serialize(dynamic_cast<const uci::type::SelfDefenseStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::selfDefenseStatusMT:
      return asb_uci::type::SelfDefenseStatusMT::serialize(dynamic_cast<const uci::type::SelfDefenseStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sensorConstraintsBaseType:
      return asb_uci::type::SensorConstraintsBaseType::serialize(dynamic_cast<const uci::type::SensorConstraintsBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sensorConstraintsType:
      return asb_uci::type::SensorConstraintsType::serialize(dynamic_cast<const uci::type::SensorConstraintsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::separationParametersType:
      return asb_uci::type::SeparationParametersType::serialize(dynamic_cast<const uci::type::SeparationParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationChangeRequestMDT:
      return asb_uci::type::ServiceConfigurationChangeRequestMDT::serialize(dynamic_cast<const uci::type::ServiceConfigurationChangeRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationChangeRequestMT:
      return asb_uci::type::ServiceConfigurationChangeRequestMT::serialize(dynamic_cast<const uci::type::ServiceConfigurationChangeRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationChangeRequestStatusMDT:
      return asb_uci::type::ServiceConfigurationChangeRequestStatusMDT::serialize(dynamic_cast<const uci::type::ServiceConfigurationChangeRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationChangeRequestStatusMT:
      return asb_uci::type::ServiceConfigurationChangeRequestStatusMT::serialize(dynamic_cast<const uci::type::ServiceConfigurationChangeRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestMDT:
      return asb_uci::type::ServiceConfigurationParamsDataRequestMDT::serialize(dynamic_cast<const uci::type::ServiceConfigurationParamsDataRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestMT:
      return asb_uci::type::ServiceConfigurationParamsDataRequestMT::serialize(dynamic_cast<const uci::type::ServiceConfigurationParamsDataRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMDT:
      return asb_uci::type::ServiceConfigurationParamsDataRequestStatusMDT::serialize(dynamic_cast<const uci::type::ServiceConfigurationParamsDataRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMT:
      return asb_uci::type::ServiceConfigurationParamsDataRequestStatusMT::serialize(dynamic_cast<const uci::type::ServiceConfigurationParamsDataRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceConfigurationParamsMT:
      return asb_uci::type::ServiceConfigurationParamsMT::serialize(dynamic_cast<const uci::type::ServiceConfigurationParamsMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceErrorReportID_Type:
      return asb_uci::type::ServiceErrorReportID_Type::serialize(dynamic_cast<const uci::type::ServiceErrorReportID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceErrorReportMT:
      return asb_uci::type::ServiceErrorReportMT::serialize(dynamic_cast<const uci::type::ServiceErrorReportMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceID_Type:
      return asb_uci::type::ServiceID_Type::serialize(dynamic_cast<const uci::type::ServiceID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceLifecycleCommandMDT:
      return asb_uci::type::ServiceLifecycleCommandMDT::serialize(dynamic_cast<const uci::type::ServiceLifecycleCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceLifecycleCommandMT:
      return asb_uci::type::ServiceLifecycleCommandMT::serialize(dynamic_cast<const uci::type::ServiceLifecycleCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceLifecycleCommandStatusMDT:
      return asb_uci::type::ServiceLifecycleCommandStatusMDT::serialize(dynamic_cast<const uci::type::ServiceLifecycleCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceLifecycleCommandStatusMT:
      return asb_uci::type::ServiceLifecycleCommandStatusMT::serialize(dynamic_cast<const uci::type::ServiceLifecycleCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceRegistrationRequestMDT:
      return asb_uci::type::ServiceRegistrationRequestMDT::serialize(dynamic_cast<const uci::type::ServiceRegistrationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceRegistrationRequestMT:
      return asb_uci::type::ServiceRegistrationRequestMT::serialize(dynamic_cast<const uci::type::ServiceRegistrationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceRegistrationRequestStatusMDT:
      return asb_uci::type::ServiceRegistrationRequestStatusMDT::serialize(dynamic_cast<const uci::type::ServiceRegistrationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceRegistrationRequestStatusMT:
      return asb_uci::type::ServiceRegistrationRequestStatusMT::serialize(dynamic_cast<const uci::type::ServiceRegistrationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceSettingsCommandMDT:
      return asb_uci::type::ServiceSettingsCommandMDT::serialize(dynamic_cast<const uci::type::ServiceSettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceSettingsCommandMT:
      return asb_uci::type::ServiceSettingsCommandMT::serialize(dynamic_cast<const uci::type::ServiceSettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceSettingsCommandStatusMDT:
      return asb_uci::type::ServiceSettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::ServiceSettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceSettingsCommandStatusMT:
      return asb_uci::type::ServiceSettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::ServiceSettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceStatusDataRequestMDT:
      return asb_uci::type::ServiceStatusDataRequestMDT::serialize(dynamic_cast<const uci::type::ServiceStatusDataRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceStatusDataRequestMT:
      return asb_uci::type::ServiceStatusDataRequestMT::serialize(dynamic_cast<const uci::type::ServiceStatusDataRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceStatusDataRequestStatusMDT:
      return asb_uci::type::ServiceStatusDataRequestStatusMDT::serialize(dynamic_cast<const uci::type::ServiceStatusDataRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceStatusDataRequestStatusMT:
      return asb_uci::type::ServiceStatusDataRequestStatusMT::serialize(dynamic_cast<const uci::type::ServiceStatusDataRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::serviceStatusMT:
      return asb_uci::type::ServiceStatusMT::serialize(dynamic_cast<const uci::type::ServiceStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusMDT:
      return asb_uci::type::SharedApertureSupportCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::SharedApertureSupportCapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusMT:
      return asb_uci::type::SharedApertureSupportCapabilityStatusMT::serialize(dynamic_cast<const uci::type::SharedApertureSupportCapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sharedRF_ApertureActivityBaseType:
      return asb_uci::type::SharedRF_ApertureActivityBaseType::serialize(dynamic_cast<const uci::type::SharedRF_ApertureActivityBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sharedRF_ApertureActivityCommandBaseType:
      return asb_uci::type::SharedRF_ApertureActivityCommandBaseType::serialize(dynamic_cast<const uci::type::SharedRF_ApertureActivityCommandBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sharedRF_ApertureCapabilityCommandBaseType:
      return asb_uci::type::SharedRF_ApertureCapabilityCommandBaseType::serialize(dynamic_cast<const uci::type::SharedRF_ApertureCapabilityCommandBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalEmitterKinematicsFixedType:
      return asb_uci::type::SignalEmitterKinematicsFixedType::serialize(dynamic_cast<const uci::type::SignalEmitterKinematicsFixedType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalID_Type:
      return asb_uci::type::SignalID_Type::serialize(dynamic_cast<const uci::type::SignalID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalIdentityType:
      return asb_uci::type::SignalIdentityType::serialize(dynamic_cast<const uci::type::SignalIdentityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalPulseWidthBaseType:
      return asb_uci::type::SignalPulseWidthBaseType::serialize(dynamic_cast<const uci::type::SignalPulseWidthBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalPulseWidthType:
      return asb_uci::type::SignalPulseWidthType::serialize(dynamic_cast<const uci::type::SignalPulseWidthType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalRelativeType:
      return asb_uci::type::SignalRelativeType::serialize(dynamic_cast<const uci::type::SignalRelativeType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalReportID_Type:
      return asb_uci::type::SignalReportID_Type::serialize(dynamic_cast<const uci::type::SignalReportID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::signalReportMT:
      return asb_uci::type::SignalReportMT::serialize(dynamic_cast<const uci::type::SignalReportMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_ActivityCommandType:
      return asb_uci::type::SMTI_ActivityCommandType::serialize(dynamic_cast<const uci::type::SMTI_ActivityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_ActivityMT:
      return asb_uci::type::SMTI_ActivityMT::serialize(dynamic_cast<const uci::type::SMTI_ActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_ActivityType:
      return asb_uci::type::SMTI_ActivityType::serialize(dynamic_cast<const uci::type::SMTI_ActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CapabilityCommandType:
      return asb_uci::type::SMTI_CapabilityCommandType::serialize(dynamic_cast<const uci::type::SMTI_CapabilityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CapabilityMDT:
      return asb_uci::type::SMTI_CapabilityMDT::serialize(dynamic_cast<const uci::type::SMTI_CapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CapabilityMT:
      return asb_uci::type::SMTI_CapabilityMT::serialize(dynamic_cast<const uci::type::SMTI_CapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CapabilityStatusMDT:
      return asb_uci::type::SMTI_CapabilityStatusMDT::serialize(dynamic_cast<const uci::type::SMTI_CapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CapabilityStatusMT:
      return asb_uci::type::SMTI_CapabilityStatusMT::serialize(dynamic_cast<const uci::type::SMTI_CapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CapabilityType:
      return asb_uci::type::SMTI_CapabilityType::serialize(dynamic_cast<const uci::type::SMTI_CapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CollectionConstraintsType:
      return asb_uci::type::SMTI_CollectionConstraintsType::serialize(dynamic_cast<const uci::type::SMTI_CollectionConstraintsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CollectionOptionsType:
      return asb_uci::type::SMTI_CollectionOptionsType::serialize(dynamic_cast<const uci::type::SMTI_CollectionOptionsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CommandMT:
      return asb_uci::type::SMTI_CommandMT::serialize(dynamic_cast<const uci::type::SMTI_CommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CommandStatusMDT:
      return asb_uci::type::SMTI_CommandStatusMDT::serialize(dynamic_cast<const uci::type::SMTI_CommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_CommandStatusMT:
      return asb_uci::type::SMTI_CommandStatusMT::serialize(dynamic_cast<const uci::type::SMTI_CommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_SettingsCommandMDT:
      return asb_uci::type::SMTI_SettingsCommandMDT::serialize(dynamic_cast<const uci::type::SMTI_SettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_SettingsCommandMT:
      return asb_uci::type::SMTI_SettingsCommandMT::serialize(dynamic_cast<const uci::type::SMTI_SettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_SettingsCommandStatusMDT:
      return asb_uci::type::SMTI_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::SMTI_SettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_SettingsCommandStatusMT:
      return asb_uci::type::SMTI_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::SMTI_SettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_TaskBaseType:
      return asb_uci::type::SMTI_TaskBaseType::serialize(dynamic_cast<const uci::type::SMTI_TaskBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sMTI_TaskType:
      return asb_uci::type::SMTI_TaskType::serialize(dynamic_cast<const uci::type::SMTI_TaskType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_C2_RecordBaseType:
      return asb_uci::type::SOB_C2_RecordBaseType::serialize(dynamic_cast<const uci::type::SOB_C2_RecordBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_C2_RecordID_Type:
      return asb_uci::type::SOB_C2_RecordID_Type::serialize(dynamic_cast<const uci::type::SOB_C2_RecordID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_C2_RecordMDT:
      return asb_uci::type::SOB_C2_RecordMDT::serialize(dynamic_cast<const uci::type::SOB_C2_RecordMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_C2_RecordMT:
      return asb_uci::type::SOB_C2_RecordMT::serialize(dynamic_cast<const uci::type::SOB_C2_RecordMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_C2_RecordType:
      return asb_uci::type::SOB_C2_RecordType::serialize(dynamic_cast<const uci::type::SOB_C2_RecordType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_CorrelationRecordID_Type:
      return asb_uci::type::SOB_CorrelationRecordID_Type::serialize(dynamic_cast<const uci::type::SOB_CorrelationRecordID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_CorrelationRecordMDT:
      return asb_uci::type::SOB_CorrelationRecordMDT::serialize(dynamic_cast<const uci::type::SOB_CorrelationRecordMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_CorrelationRecordMT:
      return asb_uci::type::SOB_CorrelationRecordMT::serialize(dynamic_cast<const uci::type::SOB_CorrelationRecordMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_SatelliteRecordBaseType:
      return asb_uci::type::SOB_SatelliteRecordBaseType::serialize(dynamic_cast<const uci::type::SOB_SatelliteRecordBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_SatelliteRecordID_Type:
      return asb_uci::type::SOB_SatelliteRecordID_Type::serialize(dynamic_cast<const uci::type::SOB_SatelliteRecordID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_SatelliteRecordMDT:
      return asb_uci::type::SOB_SatelliteRecordMDT::serialize(dynamic_cast<const uci::type::SOB_SatelliteRecordMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_SatelliteRecordMT:
      return asb_uci::type::SOB_SatelliteRecordMT::serialize(dynamic_cast<const uci::type::SOB_SatelliteRecordMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sOB_SatelliteRecordType:
      return asb_uci::type::SOB_SatelliteRecordType::serialize(dynamic_cast<const uci::type::SOB_SatelliteRecordType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::spaceWeatherID_Type:
      return asb_uci::type::SpaceWeatherID_Type::serialize(dynamic_cast<const uci::type::SpaceWeatherID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::spaceWeatherMT:
      return asb_uci::type::SpaceWeatherMT::serialize(dynamic_cast<const uci::type::SpaceWeatherMT&>(accessor), propTree, nodeName, createNode, true, false);
    default:
      return boost::none;
  }
}

} // namespace util

} // namespace asb_uci

