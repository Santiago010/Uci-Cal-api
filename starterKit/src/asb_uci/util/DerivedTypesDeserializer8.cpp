/** @file DerivedTypesDeserializer8.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesDeserializer8.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/EOB_CorrelationRecordID_Type.h"
#include "asb_uci/type/EOB_CorrelationRecordMDT.h"
#include "asb_uci/type/EOB_CorrelationRecordMT.h"
#include "asb_uci/type/EOB_EmitterID_Type.h"
#include "asb_uci/type/EOB_EmitterModeID_Type.h"
#include "asb_uci/type/EOB_EmitterModeType.h"
#include "asb_uci/type/EOB_EmitterType.h"
#include "asb_uci/type/EOB_EquipmentIdentityType.h"
#include "asb_uci/type/EOB_EquipmentRecordType.h"
#include "asb_uci/type/EOB_EquipmentType.h"
#include "asb_uci/type/EOB_FixedPositionType.h"
#include "asb_uci/type/EOB_IdentityBaseType.h"
#include "asb_uci/type/EOB_RecordID_Type.h"
#include "asb_uci/type/EOB_RecordMarkedType.h"
#include "asb_uci/type/EOB_SignalType.h"
#include "asb_uci/type/EOB_SiteIdentityType.h"
#include "asb_uci/type/EOB_SitePIN_Type.h"
#include "asb_uci/type/ESM_ActivityCommandType.h"
#include "asb_uci/type/ESM_ActivityMT.h"
#include "asb_uci/type/ESM_ActivityType.h"
#include "asb_uci/type/ESM_CapabilityCommandType.h"
#include "asb_uci/type/ESM_CapabilityMDT.h"
#include "asb_uci/type/ESM_CapabilityMT.h"
#include "asb_uci/type/ESM_CapabilityStatusMDT.h"
#include "asb_uci/type/ESM_CapabilityStatusMT.h"
#include "asb_uci/type/ESM_CapabilityType.h"
#include "asb_uci/type/ESM_CommandMT.h"
#include "asb_uci/type/ESM_CommandStatusMDT.h"
#include "asb_uci/type/ESM_CommandStatusMT.h"
#include "asb_uci/type/ESM_ConsentRequestMT.h"
#include "asb_uci/type/ESM_ConsentRequestStatusMDT.h"
#include "asb_uci/type/ESM_ConsentRequestStatusMT.h"
#include "asb_uci/type/ESM_ConsentRequestType.h"
#include "asb_uci/type/ESM_SettingsCommandMDT.h"
#include "asb_uci/type/ESM_SettingsCommandMT.h"
#include "asb_uci/type/ESM_SettingsCommandStatusMDT.h"
#include "asb_uci/type/ESM_SettingsCommandStatusMT.h"
#include "asb_uci/type/ESM_TaskBaseType.h"
#include "asb_uci/type/ESM_TaskType.h"
#include "asb_uci/type/EW_ConfigurationID_Type.h"
#include "asb_uci/type/EW_ConfigurationMT.h"
#include "asb_uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "asb_uci/type/EW_IndexNumberDataLinkIdentifierType.h"
#include "asb_uci/type/ExecutionPlanSetBaseType.h"
#include "asb_uci/type/ExecutionPlanSetID_Type.h"
#include "asb_uci/type/ExecutionSequenceInsertionType.h"
#include "asb_uci/type/ExecutionSequencePlanSetsType.h"
#include "asb_uci/type/ExecutionSequenceType.h"
#include "asb_uci/type/ExternalDataRequestMDT.h"
#include "asb_uci/type/ExternalDataRequestMT.h"
#include "asb_uci/type/ExternalDataRequestStatusMDT.h"
#include "asb_uci/type/ExternalDataRequestStatusMT.h"
#include "asb_uci/type/ExternalRequestedDataID_Type.h"
#include "asb_uci/type/FOV_ActivityType.h"
#include "asb_uci/type/FOV_Type.h"
#include "asb_uci/type/FOV_VolumeType.h"
#include "asb_uci/type/FaultID_Type.h"
#include "asb_uci/type/FaultMDT.h"
#include "asb_uci/type/FaultMT.h"
#include "asb_uci/type/FileLocationID_Type.h"
#include "asb_uci/type/FileLocationMDT.h"
#include "asb_uci/type/FileLocationMT.h"
#include "asb_uci/type/FileMetadataID_Type.h"
#include "asb_uci/type/FileMetadataMDT.h"
#include "asb_uci/type/FileMetadataMT.h"
#include "asb_uci/type/FilterID_Type.h"
#include "asb_uci/type/FixedPositionType.h"
#include "asb_uci/type/FlightActivityMT.h"
#include "asb_uci/type/FlightActivityType.h"
#include "asb_uci/type/FlightCapabilityMDT.h"
#include "asb_uci/type/FlightCapabilityMT.h"
#include "asb_uci/type/FlightCapabilityStatusMDT.h"
#include "asb_uci/type/FlightCapabilityStatusMT.h"
#include "asb_uci/type/FlightCapabilityType.h"
#include "asb_uci/type/FlightTaskBaseType.h"
#include "asb_uci/type/FlightTaskType.h"
#include "asb_uci/type/FloatMinMaxType.h"
#include "asb_uci/type/ForeignKeyMapDRL.h"
#include "asb_uci/type/ForeignKeyMapID_Type.h"
#include "asb_uci/type/ForeignKeyMapMDT.h"
#include "asb_uci/type/ForeignKeyMapML.h"
#include "asb_uci/type/ForeignKeyMapMT.h"
#include "asb_uci/type/ForeignKeyPairDRLE.h"
#include "asb_uci/type/ForeignKeyPairID_Type.h"
#include "asb_uci/type/ForeignKeyPairMDT.h"
#include "asb_uci/type/ForeignKeyPairMT.h"
#include "asb_uci/type/ForeignKeyType.h"
#include "asb_uci/type/FrequencyDataBaseType.h"
#include "asb_uci/type/FrequencyDataType.h"
#include "asb_uci/type/FuelSubsystemExtendedStatusType.h"
#include "asb_uci/type/FuelTankComponentExtendedStatusType.h"
#include "asb_uci/type/FunctionID_Type.h"
#include "asb_uci/type/FunctionalDamageConfidenceType.h"
#include "asb_uci/type/FunctionalDamageProbabilityType.h"
#include "asb_uci/type/FusionSettingsMT.h"
#include "asb_uci/type/FusionSettingsRequestMDT.h"
#include "asb_uci/type/FusionSettingsRequestMT.h"
#include "asb_uci/type/FusionSettingsRequestStatusMDT.h"
#include "asb_uci/type/FusionSettingsRequestStatusMT.h"
#include "asb_uci/type/GatewayActivityCommandType.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_CorrelationRecordID_Type.h"
#include "uci/type/EOB_CorrelationRecordMDT.h"
#include "uci/type/EOB_CorrelationRecordMT.h"
#include "uci/type/EOB_EmitterID_Type.h"
#include "uci/type/EOB_EmitterModeID_Type.h"
#include "uci/type/EOB_EmitterModeType.h"
#include "uci/type/EOB_EmitterType.h"
#include "uci/type/EOB_EquipmentIdentityType.h"
#include "uci/type/EOB_EquipmentRecordType.h"
#include "uci/type/EOB_EquipmentType.h"
#include "uci/type/EOB_FixedPositionType.h"
#include "uci/type/EOB_IdentityBaseType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/EOB_RecordMarkedType.h"
#include "uci/type/EOB_SignalType.h"
#include "uci/type/EOB_SiteIdentityType.h"
#include "uci/type/EOB_SitePIN_Type.h"
#include "uci/type/ESM_ActivityCommandType.h"
#include "uci/type/ESM_ActivityMT.h"
#include "uci/type/ESM_ActivityType.h"
#include "uci/type/ESM_CapabilityCommandType.h"
#include "uci/type/ESM_CapabilityMDT.h"
#include "uci/type/ESM_CapabilityMT.h"
#include "uci/type/ESM_CapabilityStatusMDT.h"
#include "uci/type/ESM_CapabilityStatusMT.h"
#include "uci/type/ESM_CapabilityType.h"
#include "uci/type/ESM_CommandMT.h"
#include "uci/type/ESM_CommandStatusMDT.h"
#include "uci/type/ESM_CommandStatusMT.h"
#include "uci/type/ESM_ConsentRequestMT.h"
#include "uci/type/ESM_ConsentRequestStatusMDT.h"
#include "uci/type/ESM_ConsentRequestStatusMT.h"
#include "uci/type/ESM_ConsentRequestType.h"
#include "uci/type/ESM_SettingsCommandMDT.h"
#include "uci/type/ESM_SettingsCommandMT.h"
#include "uci/type/ESM_SettingsCommandStatusMDT.h"
#include "uci/type/ESM_SettingsCommandStatusMT.h"
#include "uci/type/ESM_TaskBaseType.h"
#include "uci/type/ESM_TaskType.h"
#include "uci/type/EW_ConfigurationID_Type.h"
#include "uci/type/EW_ConfigurationMT.h"
#include "uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "uci/type/EW_IndexNumberDataLinkIdentifierType.h"
#include "uci/type/ExecutionPlanSetBaseType.h"
#include "uci/type/ExecutionPlanSetID_Type.h"
#include "uci/type/ExecutionSequenceInsertionType.h"
#include "uci/type/ExecutionSequencePlanSetsType.h"
#include "uci/type/ExecutionSequenceType.h"
#include "uci/type/ExternalDataRequestMDT.h"
#include "uci/type/ExternalDataRequestMT.h"
#include "uci/type/ExternalDataRequestStatusMDT.h"
#include "uci/type/ExternalDataRequestStatusMT.h"
#include "uci/type/ExternalRequestedDataID_Type.h"
#include "uci/type/FOV_ActivityType.h"
#include "uci/type/FOV_Type.h"
#include "uci/type/FOV_VolumeType.h"
#include "uci/type/FaultID_Type.h"
#include "uci/type/FaultMDT.h"
#include "uci/type/FaultMT.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/FileLocationMDT.h"
#include "uci/type/FileLocationMT.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/FileMetadataMDT.h"
#include "uci/type/FileMetadataMT.h"
#include "uci/type/FilterID_Type.h"
#include "uci/type/FixedPositionType.h"
#include "uci/type/FlightActivityMT.h"
#include "uci/type/FlightActivityType.h"
#include "uci/type/FlightCapabilityMDT.h"
#include "uci/type/FlightCapabilityMT.h"
#include "uci/type/FlightCapabilityStatusMDT.h"
#include "uci/type/FlightCapabilityStatusMT.h"
#include "uci/type/FlightCapabilityType.h"
#include "uci/type/FlightTaskBaseType.h"
#include "uci/type/FlightTaskType.h"
#include "uci/type/FloatMinMaxType.h"
#include "uci/type/ForeignKeyMapDRL.h"
#include "uci/type/ForeignKeyMapID_Type.h"
#include "uci/type/ForeignKeyMapMDT.h"
#include "uci/type/ForeignKeyMapML.h"
#include "uci/type/ForeignKeyMapMT.h"
#include "uci/type/ForeignKeyPairDRLE.h"
#include "uci/type/ForeignKeyPairID_Type.h"
#include "uci/type/ForeignKeyPairMDT.h"
#include "uci/type/ForeignKeyPairMT.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyDataBaseType.h"
#include "uci/type/FrequencyDataType.h"
#include "uci/type/FuelSubsystemExtendedStatusType.h"
#include "uci/type/FuelTankComponentExtendedStatusType.h"
#include "uci/type/FunctionID_Type.h"
#include "uci/type/FunctionalDamageConfidenceType.h"
#include "uci/type/FunctionalDamageProbabilityType.h"
#include "uci/type/FusionSettingsMT.h"
#include "uci/type/FusionSettingsRequestMDT.h"
#include "uci/type/FusionSettingsRequestMT.h"
#include "uci/type/FusionSettingsRequestStatusMDT.h"
#include "uci/type/FusionSettingsRequestStatusMT.h"
#include "uci/type/GatewayActivityCommandType.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

bool DerivedTypesDeserializer8::deserialize(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::eOB_CorrelationRecordID_Type:
      asb_uci::type::EOB_CorrelationRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_CorrelationRecordMDT:
      asb_uci::type::EOB_CorrelationRecordMDT::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_CorrelationRecordMT:
      asb_uci::type::EOB_CorrelationRecordMT::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EmitterID_Type:
      asb_uci::type::EOB_EmitterID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EmitterModeID_Type:
      asb_uci::type::EOB_EmitterModeID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterModeID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EmitterModeType:
      asb_uci::type::EOB_EmitterModeType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterModeType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EmitterType:
      asb_uci::type::EOB_EmitterType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EquipmentIdentityType:
      asb_uci::type::EOB_EquipmentIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EquipmentRecordType:
      asb_uci::type::EOB_EquipmentRecordType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentRecordType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_EquipmentType:
      asb_uci::type::EOB_EquipmentType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_FixedPositionType:
      asb_uci::type::EOB_FixedPositionType::deserialize(propTree, dynamic_cast<uci::type::EOB_FixedPositionType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_IdentityBaseType:
      asb_uci::type::EOB_IdentityBaseType::deserialize(propTree, dynamic_cast<uci::type::EOB_IdentityBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_RecordID_Type:
      asb_uci::type::EOB_RecordID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_RecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_RecordMarkedType:
      asb_uci::type::EOB_RecordMarkedType::deserialize(propTree, dynamic_cast<uci::type::EOB_RecordMarkedType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_SignalType:
      asb_uci::type::EOB_SignalType::deserialize(propTree, dynamic_cast<uci::type::EOB_SignalType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_SiteIdentityType:
      asb_uci::type::EOB_SiteIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_SiteIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eOB_SitePIN_Type:
      asb_uci::type::EOB_SitePIN_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_SitePIN_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ActivityCommandType:
      asb_uci::type::ESM_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ActivityMT:
      asb_uci::type::ESM_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ActivityType:
      asb_uci::type::ESM_ActivityType::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CapabilityCommandType:
      asb_uci::type::ESM_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CapabilityMDT:
      asb_uci::type::ESM_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CapabilityMT:
      asb_uci::type::ESM_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CapabilityStatusMDT:
      asb_uci::type::ESM_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CapabilityStatusMT:
      asb_uci::type::ESM_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CapabilityType:
      asb_uci::type::ESM_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CommandMT:
      asb_uci::type::ESM_CommandMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CommandStatusMDT:
      asb_uci::type::ESM_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_CommandStatusMT:
      asb_uci::type::ESM_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ConsentRequestMT:
      asb_uci::type::ESM_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ConsentRequestStatusMDT:
      asb_uci::type::ESM_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ConsentRequestStatusMT:
      asb_uci::type::ESM_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_ConsentRequestType:
      asb_uci::type::ESM_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_SettingsCommandMDT:
      asb_uci::type::ESM_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_SettingsCommandMT:
      asb_uci::type::ESM_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_SettingsCommandStatusMDT:
      asb_uci::type::ESM_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_SettingsCommandStatusMT:
      asb_uci::type::ESM_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_TaskBaseType:
      asb_uci::type::ESM_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::ESM_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eSM_TaskType:
      asb_uci::type::ESM_TaskType::deserialize(propTree, dynamic_cast<uci::type::ESM_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eW_ConfigurationID_Type:
      asb_uci::type::EW_ConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::EW_ConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eW_ConfigurationMT:
      asb_uci::type::EW_ConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::EW_ConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eW_CoordinationDataLinkIdentifierType:
      asb_uci::type::EW_CoordinationDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EW_CoordinationDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::eW_IndexNumberDataLinkIdentifierType:
      asb_uci::type::EW_IndexNumberDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EW_IndexNumberDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::executionPlanSetBaseType:
      asb_uci::type::ExecutionPlanSetBaseType::deserialize(propTree, dynamic_cast<uci::type::ExecutionPlanSetBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::executionPlanSetID_Type:
      asb_uci::type::ExecutionPlanSetID_Type::deserialize(propTree, dynamic_cast<uci::type::ExecutionPlanSetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::executionSequenceInsertionType:
      asb_uci::type::ExecutionSequenceInsertionType::deserialize(propTree, dynamic_cast<uci::type::ExecutionSequenceInsertionType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::executionSequencePlanSetsType:
      asb_uci::type::ExecutionSequencePlanSetsType::deserialize(propTree, dynamic_cast<uci::type::ExecutionSequencePlanSetsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::executionSequenceType:
      asb_uci::type::ExecutionSequenceType::deserialize(propTree, dynamic_cast<uci::type::ExecutionSequenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::externalDataRequestMDT:
      asb_uci::type::ExternalDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::externalDataRequestMT:
      asb_uci::type::ExternalDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::externalDataRequestStatusMDT:
      asb_uci::type::ExternalDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::externalDataRequestStatusMT:
      asb_uci::type::ExternalDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::externalRequestedDataID_Type:
      asb_uci::type::ExternalRequestedDataID_Type::deserialize(propTree, dynamic_cast<uci::type::ExternalRequestedDataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::faultID_Type:
      asb_uci::type::FaultID_Type::deserialize(propTree, dynamic_cast<uci::type::FaultID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::faultMDT:
      asb_uci::type::FaultMDT::deserialize(propTree, dynamic_cast<uci::type::FaultMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::faultMT:
      asb_uci::type::FaultMT::deserialize(propTree, dynamic_cast<uci::type::FaultMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fileLocationID_Type:
      asb_uci::type::FileLocationID_Type::deserialize(propTree, dynamic_cast<uci::type::FileLocationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fileLocationMDT:
      asb_uci::type::FileLocationMDT::deserialize(propTree, dynamic_cast<uci::type::FileLocationMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fileLocationMT:
      asb_uci::type::FileLocationMT::deserialize(propTree, dynamic_cast<uci::type::FileLocationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fileMetadataID_Type:
      asb_uci::type::FileMetadataID_Type::deserialize(propTree, dynamic_cast<uci::type::FileMetadataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fileMetadataMDT:
      asb_uci::type::FileMetadataMDT::deserialize(propTree, dynamic_cast<uci::type::FileMetadataMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fileMetadataMT:
      asb_uci::type::FileMetadataMT::deserialize(propTree, dynamic_cast<uci::type::FileMetadataMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::filterID_Type:
      asb_uci::type::FilterID_Type::deserialize(propTree, dynamic_cast<uci::type::FilterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fixedPositionType:
      asb_uci::type::FixedPositionType::deserialize(propTree, dynamic_cast<uci::type::FixedPositionType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightActivityMT:
      asb_uci::type::FlightActivityMT::deserialize(propTree, dynamic_cast<uci::type::FlightActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightActivityType:
      asb_uci::type::FlightActivityType::deserialize(propTree, dynamic_cast<uci::type::FlightActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightCapabilityMDT:
      asb_uci::type::FlightCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightCapabilityMT:
      asb_uci::type::FlightCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightCapabilityStatusMDT:
      asb_uci::type::FlightCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightCapabilityStatusMT:
      asb_uci::type::FlightCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightCapabilityType:
      asb_uci::type::FlightCapabilityType::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightTaskBaseType:
      asb_uci::type::FlightTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::FlightTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::flightTaskType:
      asb_uci::type::FlightTaskType::deserialize(propTree, dynamic_cast<uci::type::FlightTaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::floatMinMaxType:
      asb_uci::type::FloatMinMaxType::deserialize(propTree, dynamic_cast<uci::type::FloatMinMaxType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyMapDRL:
      asb_uci::type::ForeignKeyMapDRL::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapDRL&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyMapID_Type:
      asb_uci::type::ForeignKeyMapID_Type::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyMapMDT:
      asb_uci::type::ForeignKeyMapMDT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyMapML:
      asb_uci::type::ForeignKeyMapML::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapML&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyMapMT:
      asb_uci::type::ForeignKeyMapMT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyPairDRLE:
      asb_uci::type::ForeignKeyPairDRLE::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairDRLE&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyPairID_Type:
      asb_uci::type::ForeignKeyPairID_Type::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyPairMDT:
      asb_uci::type::ForeignKeyPairMDT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyPairMT:
      asb_uci::type::ForeignKeyPairMT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::foreignKeyType:
      asb_uci::type::ForeignKeyType::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fOV_ActivityType:
      asb_uci::type::FOV_ActivityType::deserialize(propTree, dynamic_cast<uci::type::FOV_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fOV_Type:
      asb_uci::type::FOV_Type::deserialize(propTree, dynamic_cast<uci::type::FOV_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fOV_VolumeType:
      asb_uci::type::FOV_VolumeType::deserialize(propTree, dynamic_cast<uci::type::FOV_VolumeType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::frequencyDataBaseType:
      asb_uci::type::FrequencyDataBaseType::deserialize(propTree, dynamic_cast<uci::type::FrequencyDataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::frequencyDataType:
      asb_uci::type::FrequencyDataType::deserialize(propTree, dynamic_cast<uci::type::FrequencyDataType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fuelSubsystemExtendedStatusType:
      asb_uci::type::FuelSubsystemExtendedStatusType::deserialize(propTree, dynamic_cast<uci::type::FuelSubsystemExtendedStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fuelTankComponentExtendedStatusType:
      asb_uci::type::FuelTankComponentExtendedStatusType::deserialize(propTree, dynamic_cast<uci::type::FuelTankComponentExtendedStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::functionalDamageConfidenceType:
      asb_uci::type::FunctionalDamageConfidenceType::deserialize(propTree, dynamic_cast<uci::type::FunctionalDamageConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::functionalDamageProbabilityType:
      asb_uci::type::FunctionalDamageProbabilityType::deserialize(propTree, dynamic_cast<uci::type::FunctionalDamageProbabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::functionID_Type:
      asb_uci::type::FunctionID_Type::deserialize(propTree, dynamic_cast<uci::type::FunctionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fusionSettingsMT:
      asb_uci::type::FusionSettingsMT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fusionSettingsRequestMDT:
      asb_uci::type::FusionSettingsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fusionSettingsRequestMT:
      asb_uci::type::FusionSettingsRequestMT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fusionSettingsRequestStatusMDT:
      asb_uci::type::FusionSettingsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::fusionSettingsRequestStatusMT:
      asb_uci::type::FusionSettingsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::gatewayActivityCommandType:
      asb_uci::type::GatewayActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::GatewayActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    default:
      return false;
  }
}

} // namespace util

} // namespace asb_uci

