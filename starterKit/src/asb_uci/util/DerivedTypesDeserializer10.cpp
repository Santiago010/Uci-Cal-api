/** @file DerivedTypesDeserializer10.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesDeserializer10.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "asb_uci/type/LOS_VariableA_Type.h"
#include "asb_uci/type/LOS_VariableB_Type.h"
#include "asb_uci/type/LogMT.h"
#include "asb_uci/type/MDF_ID_Type.h"
#include "asb_uci/type/MDF_SubCategoryFileID_Type.h"
#include "asb_uci/type/MDF_SubCategoryID_Type.h"
#include "asb_uci/type/MTI_ActivityStatusBaseType.h"
#include "asb_uci/type/MTI_ActivityStatusDetailType.h"
#include "asb_uci/type/MTI_OpZoneFilterAreaType.h"
#include "asb_uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "asb_uci/type/ManagedListBaseType.h"
#include "asb_uci/type/MeasurementGroupID_Type.h"
#include "asb_uci/type/MeasurementID_Type.h"
#include "asb_uci/type/MessageConfigurationID_Type.h"
#include "asb_uci/type/MessageTransmissionFilterRecordDRLE.h"
#include "asb_uci/type/MessageTransmissionFilterRecordID_Type.h"
#include "asb_uci/type/MessageTransmissionFilterRecordMDT.h"
#include "asb_uci/type/MessageTransmissionFilterRecordMT.h"
#include "asb_uci/type/MessageTransmissionListDRL.h"
#include "asb_uci/type/MessageTransmissionListID_Type.h"
#include "asb_uci/type/MessageTransmissionListMDT.h"
#include "asb_uci/type/MessageTransmissionListMT.h"
#include "asb_uci/type/MessageType.h"
#include "asb_uci/type/MetadataID_Type.h"
#include "asb_uci/type/MissionActivationRequestMDT.h"
#include "asb_uci/type/MissionActivationRequestMT.h"
#include "asb_uci/type/MissionActivationRequestStatusMDT.h"
#include "asb_uci/type/MissionActivationRequestStatusMT.h"
#include "asb_uci/type/MissionContingencyAlertID_Type.h"
#include "asb_uci/type/MissionContingencyAlertMT.h"
#include "asb_uci/type/MissionDefinitionID_Type.h"
#include "asb_uci/type/MissionDefinitionMDT.h"
#include "asb_uci/type/MissionDefinitionMT.h"
#include "asb_uci/type/MissionEnvironmentObjectActionType.h"
#include "asb_uci/type/MissionEnvironmentObjectBaseType.h"
#include "asb_uci/type/MissionEnvironmentObjectEffectType.h"
#include "asb_uci/type/MissionEnvironmentObjectEntityType.h"
#include "asb_uci/type/MissionEnvironmentObjectOpLineType.h"
#include "asb_uci/type/MissionEnvironmentObjectOpPointType.h"
#include "asb_uci/type/MissionEnvironmentObjectOpVolumeType.h"
#include "asb_uci/type/MissionEnvironmentObjectOpZoneType.h"
#include "asb_uci/type/MissionEnvironmentObjectResponseType.h"
#include "asb_uci/type/MissionEnvironmentObjectSystemType.h"
#include "asb_uci/type/MissionEnvironmentObjectTaskType.h"
#include "asb_uci/type/MissionEnvironmentOverrideID_Type.h"
#include "asb_uci/type/MissionEnvironmentOverrideMDT.h"
#include "asb_uci/type/MissionEnvironmentOverrideMT.h"
#include "asb_uci/type/MissionID_Type.h"
#include "asb_uci/type/MissionPlanActivationApprovalStatusMT.h"
#include "asb_uci/type/MissionPlanActivationCommandID_Type.h"
#include "asb_uci/type/MissionPlanActivationCommandMT.h"
#include "asb_uci/type/MissionPlanActivationCommandStatusMT.h"
#include "asb_uci/type/MissionPlanActivationStatusMT.h"
#include "asb_uci/type/MissionPlanApprovalStatusMT.h"
#include "asb_uci/type/MissionPlanCommandID_Type.h"
#include "asb_uci/type/MissionPlanCommandMT.h"
#include "asb_uci/type/MissionPlanCommandStatusMT.h"
#include "asb_uci/type/MissionPlanExecutionStatusMT.h"
#include "asb_uci/type/MissionPlanID_Type.h"
#include "asb_uci/type/MissionPlanInputsType.h"
#include "asb_uci/type/MissionPlanMT.h"
#include "asb_uci/type/MissionPlanMetricsReportID_Type.h"
#include "asb_uci/type/MissionPlanMetricsReportMT.h"
#include "asb_uci/type/MissionPlanMetricsReportRequestMDT.h"
#include "asb_uci/type/MissionPlanMetricsReportRequestMT.h"
#include "asb_uci/type/MissionPlanMetricsReportRequestStatusMDT.h"
#include "asb_uci/type/MissionPlanMetricsReportRequestStatusMT.h"
#include "asb_uci/type/MissionPlanProcessDescriptionType.h"
#include "asb_uci/type/MissionPlanStatusMT.h"
#include "asb_uci/type/MissionPlanValidationCommandMDT.h"
#include "asb_uci/type/MissionPlanValidationCommandMT.h"
#include "asb_uci/type/MissionPlanValidationCommandStatusMDT.h"
#include "asb_uci/type/MissionPlanValidationCommandStatusMT.h"
#include "asb_uci/type/MissionPlanValidationID_Type.h"
#include "asb_uci/type/MissionPlanValidationInputsType.h"
#include "asb_uci/type/MissionPlanValidationMT.h"
#include "asb_uci/type/MissionPlanningOrchestrationID_Type.h"
#include "asb_uci/type/MissionPlanningOrchestrationMDT.h"
#include "asb_uci/type/MissionPlanningOrchestrationMT.h"
#include "asb_uci/type/MissionRequirementStatusMT.h"
#include "asb_uci/type/ModRateDataType.h"
#include "asb_uci/type/ModulationOnPulseDataBaseType.h"
#include "asb_uci/type/ModulationOnPulseDataType.h"
#include "asb_uci/type/MultiObjectType.h"
#include "asb_uci/type/MultistaticEmitterDataID_Type.h"
#include "asb_uci/type/MultistaticEmitterDataMT.h"
#include "asb_uci/type/MultistaticEmitterID_Type.h"
#include "asb_uci/type/MvAnomalyEventID_Type.h"
#include "asb_uci/type/MvAnomalyEventMDT.h"
#include "asb_uci/type/MvAnomalyEventMT.h"
#include "asb_uci/type/NATO_Link1DataLinkIdentifierType.h"
#include "asb_uci/type/NATO_Link1QuerySpecificDataType.h"
#include "asb_uci/type/NITF_PackingPlanPET.h"
#include "asb_uci/type/NITF_PackingPlanRevA_Type.h"
#include "asb_uci/type/NITF_PackingPlanType.h"
#include "asb_uci/type/NameValuePairType.h"
#include "asb_uci/type/NavigationReportMT.h"
#include "asb_uci/type/NetworkLinkID_Type.h"
#include "asb_uci/type/NotificationBaseType.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "uci/type/LOS_VariableA_Type.h"
#include "uci/type/LOS_VariableB_Type.h"
#include "uci/type/LogMT.h"
#include "uci/type/MDF_ID_Type.h"
#include "uci/type/MDF_SubCategoryFileID_Type.h"
#include "uci/type/MDF_SubCategoryID_Type.h"
#include "uci/type/MTI_ActivityStatusBaseType.h"
#include "uci/type/MTI_ActivityStatusDetailType.h"
#include "uci/type/MTI_OpZoneFilterAreaType.h"
#include "uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "uci/type/ManagedListBaseType.h"
#include "uci/type/MeasurementGroupID_Type.h"
#include "uci/type/MeasurementID_Type.h"
#include "uci/type/MessageConfigurationID_Type.h"
#include "uci/type/MessageTransmissionFilterRecordDRLE.h"
#include "uci/type/MessageTransmissionFilterRecordID_Type.h"
#include "uci/type/MessageTransmissionFilterRecordMDT.h"
#include "uci/type/MessageTransmissionFilterRecordMT.h"
#include "uci/type/MessageTransmissionListDRL.h"
#include "uci/type/MessageTransmissionListID_Type.h"
#include "uci/type/MessageTransmissionListMDT.h"
#include "uci/type/MessageTransmissionListMT.h"
#include "uci/type/MessageType.h"
#include "uci/type/MetadataID_Type.h"
#include "uci/type/MissionActivationRequestMDT.h"
#include "uci/type/MissionActivationRequestMT.h"
#include "uci/type/MissionActivationRequestStatusMDT.h"
#include "uci/type/MissionActivationRequestStatusMT.h"
#include "uci/type/MissionContingencyAlertID_Type.h"
#include "uci/type/MissionContingencyAlertMT.h"
#include "uci/type/MissionDefinitionID_Type.h"
#include "uci/type/MissionDefinitionMDT.h"
#include "uci/type/MissionDefinitionMT.h"
#include "uci/type/MissionEnvironmentObjectActionType.h"
#include "uci/type/MissionEnvironmentObjectBaseType.h"
#include "uci/type/MissionEnvironmentObjectEffectType.h"
#include "uci/type/MissionEnvironmentObjectEntityType.h"
#include "uci/type/MissionEnvironmentObjectOpLineType.h"
#include "uci/type/MissionEnvironmentObjectOpPointType.h"
#include "uci/type/MissionEnvironmentObjectOpVolumeType.h"
#include "uci/type/MissionEnvironmentObjectOpZoneType.h"
#include "uci/type/MissionEnvironmentObjectResponseType.h"
#include "uci/type/MissionEnvironmentObjectSystemType.h"
#include "uci/type/MissionEnvironmentObjectTaskType.h"
#include "uci/type/MissionEnvironmentOverrideID_Type.h"
#include "uci/type/MissionEnvironmentOverrideMDT.h"
#include "uci/type/MissionEnvironmentOverrideMT.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/MissionPlanActivationApprovalStatusMT.h"
#include "uci/type/MissionPlanActivationCommandID_Type.h"
#include "uci/type/MissionPlanActivationCommandMT.h"
#include "uci/type/MissionPlanActivationCommandStatusMT.h"
#include "uci/type/MissionPlanActivationStatusMT.h"
#include "uci/type/MissionPlanApprovalStatusMT.h"
#include "uci/type/MissionPlanCommandID_Type.h"
#include "uci/type/MissionPlanCommandMT.h"
#include "uci/type/MissionPlanCommandStatusMT.h"
#include "uci/type/MissionPlanExecutionStatusMT.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/MissionPlanInputsType.h"
#include "uci/type/MissionPlanMT.h"
#include "uci/type/MissionPlanMetricsReportID_Type.h"
#include "uci/type/MissionPlanMetricsReportMT.h"
#include "uci/type/MissionPlanMetricsReportRequestMDT.h"
#include "uci/type/MissionPlanMetricsReportRequestMT.h"
#include "uci/type/MissionPlanMetricsReportRequestStatusMDT.h"
#include "uci/type/MissionPlanMetricsReportRequestStatusMT.h"
#include "uci/type/MissionPlanProcessDescriptionType.h"
#include "uci/type/MissionPlanStatusMT.h"
#include "uci/type/MissionPlanValidationCommandMDT.h"
#include "uci/type/MissionPlanValidationCommandMT.h"
#include "uci/type/MissionPlanValidationCommandStatusMDT.h"
#include "uci/type/MissionPlanValidationCommandStatusMT.h"
#include "uci/type/MissionPlanValidationID_Type.h"
#include "uci/type/MissionPlanValidationInputsType.h"
#include "uci/type/MissionPlanValidationMT.h"
#include "uci/type/MissionPlanningOrchestrationID_Type.h"
#include "uci/type/MissionPlanningOrchestrationMDT.h"
#include "uci/type/MissionPlanningOrchestrationMT.h"
#include "uci/type/MissionRequirementStatusMT.h"
#include "uci/type/ModRateDataType.h"
#include "uci/type/ModulationOnPulseDataBaseType.h"
#include "uci/type/ModulationOnPulseDataType.h"
#include "uci/type/MultiObjectType.h"
#include "uci/type/MultistaticEmitterDataID_Type.h"
#include "uci/type/MultistaticEmitterDataMT.h"
#include "uci/type/MultistaticEmitterID_Type.h"
#include "uci/type/MvAnomalyEventID_Type.h"
#include "uci/type/MvAnomalyEventMDT.h"
#include "uci/type/MvAnomalyEventMT.h"
#include "uci/type/NATO_Link1DataLinkIdentifierType.h"
#include "uci/type/NATO_Link1QuerySpecificDataType.h"
#include "uci/type/NITF_PackingPlanPET.h"
#include "uci/type/NITF_PackingPlanRevA_Type.h"
#include "uci/type/NITF_PackingPlanType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/NavigationReportMT.h"
#include "uci/type/NetworkLinkID_Type.h"
#include "uci/type/NotificationBaseType.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

bool DerivedTypesDeserializer10::deserialize(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::logMT:
      asb_uci::type::LogMT::deserialize(propTree, dynamic_cast<uci::type::LogMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::lOS_MeasurementWithUncertaintyType:
      asb_uci::type::LOS_MeasurementWithUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::LOS_MeasurementWithUncertaintyType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::lOS_VariableA_Type:
      asb_uci::type::LOS_VariableA_Type::deserialize(propTree, dynamic_cast<uci::type::LOS_VariableA_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::lOS_VariableB_Type:
      asb_uci::type::LOS_VariableB_Type::deserialize(propTree, dynamic_cast<uci::type::LOS_VariableB_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::managedListBaseType:
      asb_uci::type::ManagedListBaseType::deserialize(propTree, dynamic_cast<uci::type::ManagedListBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mDF_ID_Type:
      asb_uci::type::MDF_ID_Type::deserialize(propTree, dynamic_cast<uci::type::MDF_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mDF_SubCategoryFileID_Type:
      asb_uci::type::MDF_SubCategoryFileID_Type::deserialize(propTree, dynamic_cast<uci::type::MDF_SubCategoryFileID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mDF_SubCategoryID_Type:
      asb_uci::type::MDF_SubCategoryID_Type::deserialize(propTree, dynamic_cast<uci::type::MDF_SubCategoryID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::measurementGroupID_Type:
      asb_uci::type::MeasurementGroupID_Type::deserialize(propTree, dynamic_cast<uci::type::MeasurementGroupID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::measurementID_Type:
      asb_uci::type::MeasurementID_Type::deserialize(propTree, dynamic_cast<uci::type::MeasurementID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageConfigurationID_Type:
      asb_uci::type::MessageConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::MessageConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionFilterRecordDRLE:
      asb_uci::type::MessageTransmissionFilterRecordDRLE::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordDRLE&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionFilterRecordID_Type:
      asb_uci::type::MessageTransmissionFilterRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionFilterRecordMDT:
      asb_uci::type::MessageTransmissionFilterRecordMDT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionFilterRecordMT:
      asb_uci::type::MessageTransmissionFilterRecordMT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionListDRL:
      asb_uci::type::MessageTransmissionListDRL::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListDRL&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionListID_Type:
      asb_uci::type::MessageTransmissionListID_Type::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionListMDT:
      asb_uci::type::MessageTransmissionListMDT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageTransmissionListMT:
      asb_uci::type::MessageTransmissionListMT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::messageType:
      asb_uci::type::MessageType::deserialize(propTree, dynamic_cast<uci::type::MessageType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::metadataID_Type:
      asb_uci::type::MetadataID_Type::deserialize(propTree, dynamic_cast<uci::type::MetadataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionActivationRequestMDT:
      asb_uci::type::MissionActivationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionActivationRequestMT:
      asb_uci::type::MissionActivationRequestMT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionActivationRequestStatusMDT:
      asb_uci::type::MissionActivationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionActivationRequestStatusMT:
      asb_uci::type::MissionActivationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionContingencyAlertID_Type:
      asb_uci::type::MissionContingencyAlertID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionContingencyAlertID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionContingencyAlertMT:
      asb_uci::type::MissionContingencyAlertMT::deserialize(propTree, dynamic_cast<uci::type::MissionContingencyAlertMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionDefinitionID_Type:
      asb_uci::type::MissionDefinitionID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionDefinitionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionDefinitionMDT:
      asb_uci::type::MissionDefinitionMDT::deserialize(propTree, dynamic_cast<uci::type::MissionDefinitionMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionDefinitionMT:
      asb_uci::type::MissionDefinitionMT::deserialize(propTree, dynamic_cast<uci::type::MissionDefinitionMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectActionType:
      asb_uci::type::MissionEnvironmentObjectActionType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectActionType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectBaseType:
      asb_uci::type::MissionEnvironmentObjectBaseType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectEffectType:
      asb_uci::type::MissionEnvironmentObjectEffectType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectEffectType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectEntityType:
      asb_uci::type::MissionEnvironmentObjectEntityType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectEntityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectOpLineType:
      asb_uci::type::MissionEnvironmentObjectOpLineType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpLineType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectOpPointType:
      asb_uci::type::MissionEnvironmentObjectOpPointType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpPointType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectOpVolumeType:
      asb_uci::type::MissionEnvironmentObjectOpVolumeType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpVolumeType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectOpZoneType:
      asb_uci::type::MissionEnvironmentObjectOpZoneType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpZoneType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectResponseType:
      asb_uci::type::MissionEnvironmentObjectResponseType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectResponseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectSystemType:
      asb_uci::type::MissionEnvironmentObjectSystemType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectSystemType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentObjectTaskType:
      asb_uci::type::MissionEnvironmentObjectTaskType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectTaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentOverrideID_Type:
      asb_uci::type::MissionEnvironmentOverrideID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentOverrideID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentOverrideMDT:
      asb_uci::type::MissionEnvironmentOverrideMDT::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentOverrideMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionEnvironmentOverrideMT:
      asb_uci::type::MissionEnvironmentOverrideMT::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentOverrideMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionID_Type:
      asb_uci::type::MissionID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanActivationApprovalStatusMT:
      asb_uci::type::MissionPlanActivationApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanActivationCommandID_Type:
      asb_uci::type::MissionPlanActivationCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanActivationCommandMT:
      asb_uci::type::MissionPlanActivationCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanActivationCommandStatusMT:
      asb_uci::type::MissionPlanActivationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanActivationStatusMT:
      asb_uci::type::MissionPlanActivationStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanApprovalStatusMT:
      asb_uci::type::MissionPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanCommandID_Type:
      asb_uci::type::MissionPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanCommandMT:
      asb_uci::type::MissionPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanCommandStatusMT:
      asb_uci::type::MissionPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanExecutionStatusMT:
      asb_uci::type::MissionPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanID_Type:
      asb_uci::type::MissionPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanInputsType:
      asb_uci::type::MissionPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMetricsReportID_Type:
      asb_uci::type::MissionPlanMetricsReportID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMetricsReportMT:
      asb_uci::type::MissionPlanMetricsReportMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMetricsReportRequestMDT:
      asb_uci::type::MissionPlanMetricsReportRequestMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMetricsReportRequestMT:
      asb_uci::type::MissionPlanMetricsReportRequestMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMetricsReportRequestStatusMDT:
      asb_uci::type::MissionPlanMetricsReportRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMetricsReportRequestStatusMT:
      asb_uci::type::MissionPlanMetricsReportRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanMT:
      asb_uci::type::MissionPlanMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanningOrchestrationID_Type:
      asb_uci::type::MissionPlanningOrchestrationID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanningOrchestrationMDT:
      asb_uci::type::MissionPlanningOrchestrationMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanningOrchestrationMT:
      asb_uci::type::MissionPlanningOrchestrationMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanProcessDescriptionType:
      asb_uci::type::MissionPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanStatusMT:
      asb_uci::type::MissionPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationCommandMDT:
      asb_uci::type::MissionPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationCommandMT:
      asb_uci::type::MissionPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationCommandStatusMDT:
      asb_uci::type::MissionPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationCommandStatusMT:
      asb_uci::type::MissionPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationID_Type:
      asb_uci::type::MissionPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationInputsType:
      asb_uci::type::MissionPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionPlanValidationMT:
      asb_uci::type::MissionPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::missionRequirementStatusMT:
      asb_uci::type::MissionRequirementStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionRequirementStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::modRateDataType:
      asb_uci::type::ModRateDataType::deserialize(propTree, dynamic_cast<uci::type::ModRateDataType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::modulationOnPulseDataBaseType:
      asb_uci::type::ModulationOnPulseDataBaseType::deserialize(propTree, dynamic_cast<uci::type::ModulationOnPulseDataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::modulationOnPulseDataType:
      asb_uci::type::ModulationOnPulseDataType::deserialize(propTree, dynamic_cast<uci::type::ModulationOnPulseDataType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mTI_ActivityStatusBaseType:
      asb_uci::type::MTI_ActivityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::MTI_ActivityStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mTI_ActivityStatusDetailType:
      asb_uci::type::MTI_ActivityStatusDetailType::deserialize(propTree, dynamic_cast<uci::type::MTI_ActivityStatusDetailType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mTI_OpZoneFilterAreaType:
      asb_uci::type::MTI_OpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::MTI_OpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mTI_STANAG_4607_OpZoneFilterAreaType:
      asb_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::MTI_STANAG_4607_OpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::multiObjectType:
      asb_uci::type::MultiObjectType::deserialize(propTree, dynamic_cast<uci::type::MultiObjectType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::multistaticEmitterDataID_Type:
      asb_uci::type::MultistaticEmitterDataID_Type::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::multistaticEmitterDataMT:
      asb_uci::type::MultistaticEmitterDataMT::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::multistaticEmitterID_Type:
      asb_uci::type::MultistaticEmitterID_Type::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mvAnomalyEventID_Type:
      asb_uci::type::MvAnomalyEventID_Type::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mvAnomalyEventMDT:
      asb_uci::type::MvAnomalyEventMDT::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::mvAnomalyEventMT:
      asb_uci::type::MvAnomalyEventMT::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::nameValuePairType:
      asb_uci::type::NameValuePairType::deserialize(propTree, dynamic_cast<uci::type::NameValuePairType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::nATO_Link1DataLinkIdentifierType:
      asb_uci::type::NATO_Link1DataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::NATO_Link1DataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::nATO_Link1QuerySpecificDataType:
      asb_uci::type::NATO_Link1QuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::NATO_Link1QuerySpecificDataType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::navigationReportMT:
      asb_uci::type::NavigationReportMT::deserialize(propTree, dynamic_cast<uci::type::NavigationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::networkLinkID_Type:
      asb_uci::type::NetworkLinkID_Type::deserialize(propTree, dynamic_cast<uci::type::NetworkLinkID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::nITF_PackingPlanPET:
      asb_uci::type::NITF_PackingPlanPET::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::nITF_PackingPlanRevA_Type:
      asb_uci::type::NITF_PackingPlanRevA_Type::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanRevA_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::nITF_PackingPlanType:
      asb_uci::type::NITF_PackingPlanType::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::notificationBaseType:
      asb_uci::type::NotificationBaseType::deserialize(propTree, dynamic_cast<uci::type::NotificationBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    default:
      return false;
  }
}

} // namespace util

} // namespace asb_uci

