/** @file DerivedTypesSerializer9.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer9.h"

#include <string>

#include <boost/none.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/GatewayActivityMT.h"
#include "asb_uci/type/GatewayActivityType.h"
#include "asb_uci/type/GatewayCapabilityCommandType.h"
#include "asb_uci/type/GatewayCapabilityMDT.h"
#include "asb_uci/type/GatewayCapabilityMT.h"
#include "asb_uci/type/GatewayCapabilitySettingsCommandBaseType.h"
#include "asb_uci/type/GatewayCapabilityStatusMDT.h"
#include "asb_uci/type/GatewayCapabilityStatusMT.h"
#include "asb_uci/type/GatewayCapabilityStatusType.h"
#include "asb_uci/type/GatewayCapabilityType.h"
#include "asb_uci/type/GatewayCommandMT.h"
#include "asb_uci/type/GatewayCommandStatusMDT.h"
#include "asb_uci/type/GatewayCommandStatusMT.h"
#include "asb_uci/type/GatewayConfigurationPET.h"
#include "asb_uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "asb_uci/type/GatewayLink16ConfigurationCircleType.h"
#include "asb_uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "asb_uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "asb_uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "asb_uci/type/GatewayNativeStatisticsPET.h"
#include "asb_uci/type/GatewaySettingsCommandMDT.h"
#include "asb_uci/type/GatewaySettingsCommandMT.h"
#include "asb_uci/type/GatewaySettingsCommandStatusMDT.h"
#include "asb_uci/type/GatewaySettingsCommandStatusMT.h"
#include "asb_uci/type/GenericDataLinkNativeInfoType.h"
#include "asb_uci/type/GeoFiltersQueryType.h"
#include "asb_uci/type/GimbalAxisID_Type.h"
#include "asb_uci/type/ID_Type.h"
#include "asb_uci/type/IFF_ActivityCommandType.h"
#include "asb_uci/type/IFF_ActivityMT.h"
#include "asb_uci/type/IFF_ActivityTransponderType.h"
#include "asb_uci/type/IFF_ActivityType.h"
#include "asb_uci/type/IFF_CapabilityCommandType.h"
#include "asb_uci/type/IFF_CapabilityMDT.h"
#include "asb_uci/type/IFF_CapabilityMT.h"
#include "asb_uci/type/IFF_CapabilityStatusMDT.h"
#include "asb_uci/type/IFF_CapabilityStatusMT.h"
#include "asb_uci/type/IFF_CapabilityType.h"
#include "asb_uci/type/IFF_CollectionConstraintsType.h"
#include "asb_uci/type/IFF_CommandMT.h"
#include "asb_uci/type/IFF_CommandStatusMDT.h"
#include "asb_uci/type/IFF_CommandStatusMT.h"
#include "asb_uci/type/IFF_ConsentRequestMT.h"
#include "asb_uci/type/IFF_ConsentRequestStatusMDT.h"
#include "asb_uci/type/IFF_ConsentRequestStatusMT.h"
#include "asb_uci/type/IFF_ConsentRequestType.h"
#include "asb_uci/type/IFF_SettingsCommandMDT.h"
#include "asb_uci/type/IFF_SettingsCommandMT.h"
#include "asb_uci/type/IFF_SettingsCommandStatusMDT.h"
#include "asb_uci/type/IFF_SettingsCommandStatusMT.h"
#include "asb_uci/type/IFF_TransponderModeControlType.h"
#include "asb_uci/type/IJMS_DataLinkIdentifierType.h"
#include "asb_uci/type/IJMS_QuerySpecificDataType.h"
#include "asb_uci/type/IO_PortCommandMT.h"
#include "asb_uci/type/IO_PortCommandStatusMDT.h"
#include "asb_uci/type/IO_PortCommandStatusMT.h"
#include "asb_uci/type/IO_PortCommandType.h"
#include "asb_uci/type/IO_PortStatusMT.h"
#include "asb_uci/type/IO_PortStatusType.h"
#include "asb_uci/type/IP_DataLinkNativeInfoType.h"
#include "asb_uci/type/IPv4_DataLinkNativeInfoType.h"
#include "asb_uci/type/IPv6_DataLinkNativeInfoType.h"
#include "asb_uci/type/IdentityConfidenceType.h"
#include "asb_uci/type/IdentityType.h"
#include "asb_uci/type/ImageAugmentationParametersType.h"
#include "asb_uci/type/ImageGeoRegistrationProcessingResultsType.h"
#include "asb_uci/type/ImagePixelGeoLocationProcessingParametersType.h"
#include "asb_uci/type/ImagePixelGeoLocationProcessingResultsType.h"
#include "asb_uci/type/ImageRegionOfInterestPET.h"
#include "asb_uci/type/InertialStateRelativeType.h"
#include "asb_uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "asb_uci/type/LAR_ID_Type.h"
#include "asb_uci/type/LAR_MT.h"
#include "asb_uci/type/LAR_ReportMT.h"
#include "asb_uci/type/LAR_RequestMDT.h"
#include "asb_uci/type/LAR_RequestMT.h"
#include "asb_uci/type/LAR_RequestStatusMDT.h"
#include "asb_uci/type/LAR_RequestStatusMT.h"
#include "asb_uci/type/LaunchObjectID_Type.h"
#include "asb_uci/type/LaunchObservationID_Type.h"
#include "asb_uci/type/LaunchObservationMDT.h"
#include "asb_uci/type/LaunchObservationMT.h"
#include "asb_uci/type/LineDataStatusType.h"
#include "asb_uci/type/LinePoint2D_Type.h"
#include "asb_uci/type/LineTargetType.h"
#include "asb_uci/type/LineType.h"
#include "asb_uci/type/Link11DataLinkIdentifierType.h"
#include "asb_uci/type/Link11QuerySpecificDataType.h"
#include "asb_uci/type/Link16DataLinkIdentifierType.h"
#include "asb_uci/type/Link16DataLinkNativeInfoType.h"
#include "asb_uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "asb_uci/type/Link16EntityMetadataType.h"
#include "asb_uci/type/Link16GatewayConfigurationType.h"
#include "asb_uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "asb_uci/type/Link16SystemMetadataType.h"
#include "asb_uci/type/Link16TN_QuerySpecificDataType.h"
#include "asb_uci/type/LocatedEllipseType.h"
#include "asb_uci/type/LocatedRectangleType.h"
#include "asb_uci/type/LocationAndStatusBaseType.h"
#include "asb_uci/type/LocationAndStatusExpireType.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/GatewayActivityMT.h"
#include "uci/type/GatewayActivityType.h"
#include "uci/type/GatewayCapabilityCommandType.h"
#include "uci/type/GatewayCapabilityMDT.h"
#include "uci/type/GatewayCapabilityMT.h"
#include "uci/type/GatewayCapabilitySettingsCommandBaseType.h"
#include "uci/type/GatewayCapabilityStatusMDT.h"
#include "uci/type/GatewayCapabilityStatusMT.h"
#include "uci/type/GatewayCapabilityStatusType.h"
#include "uci/type/GatewayCapabilityType.h"
#include "uci/type/GatewayCommandMT.h"
#include "uci/type/GatewayCommandStatusMDT.h"
#include "uci/type/GatewayCommandStatusMT.h"
#include "uci/type/GatewayConfigurationPET.h"
#include "uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "uci/type/GatewayLink16ConfigurationCircleType.h"
#include "uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "uci/type/GatewayNativeStatisticsPET.h"
#include "uci/type/GatewaySettingsCommandMDT.h"
#include "uci/type/GatewaySettingsCommandMT.h"
#include "uci/type/GatewaySettingsCommandStatusMDT.h"
#include "uci/type/GatewaySettingsCommandStatusMT.h"
#include "uci/type/GenericDataLinkNativeInfoType.h"
#include "uci/type/GeoFiltersQueryType.h"
#include "uci/type/GimbalAxisID_Type.h"
#include "uci/type/ID_Type.h"
#include "uci/type/IFF_ActivityCommandType.h"
#include "uci/type/IFF_ActivityMT.h"
#include "uci/type/IFF_ActivityTransponderType.h"
#include "uci/type/IFF_ActivityType.h"
#include "uci/type/IFF_CapabilityCommandType.h"
#include "uci/type/IFF_CapabilityMDT.h"
#include "uci/type/IFF_CapabilityMT.h"
#include "uci/type/IFF_CapabilityStatusMDT.h"
#include "uci/type/IFF_CapabilityStatusMT.h"
#include "uci/type/IFF_CapabilityType.h"
#include "uci/type/IFF_CollectionConstraintsType.h"
#include "uci/type/IFF_CommandMT.h"
#include "uci/type/IFF_CommandStatusMDT.h"
#include "uci/type/IFF_CommandStatusMT.h"
#include "uci/type/IFF_ConsentRequestMT.h"
#include "uci/type/IFF_ConsentRequestStatusMDT.h"
#include "uci/type/IFF_ConsentRequestStatusMT.h"
#include "uci/type/IFF_ConsentRequestType.h"
#include "uci/type/IFF_SettingsCommandMDT.h"
#include "uci/type/IFF_SettingsCommandMT.h"
#include "uci/type/IFF_SettingsCommandStatusMDT.h"
#include "uci/type/IFF_SettingsCommandStatusMT.h"
#include "uci/type/IFF_TransponderModeControlType.h"
#include "uci/type/IJMS_DataLinkIdentifierType.h"
#include "uci/type/IJMS_QuerySpecificDataType.h"
#include "uci/type/IO_PortCommandMT.h"
#include "uci/type/IO_PortCommandStatusMDT.h"
#include "uci/type/IO_PortCommandStatusMT.h"
#include "uci/type/IO_PortCommandType.h"
#include "uci/type/IO_PortStatusMT.h"
#include "uci/type/IO_PortStatusType.h"
#include "uci/type/IP_DataLinkNativeInfoType.h"
#include "uci/type/IPv4_DataLinkNativeInfoType.h"
#include "uci/type/IPv6_DataLinkNativeInfoType.h"
#include "uci/type/IdentityConfidenceType.h"
#include "uci/type/IdentityType.h"
#include "uci/type/ImageAugmentationParametersType.h"
#include "uci/type/ImageGeoRegistrationProcessingResultsType.h"
#include "uci/type/ImagePixelGeoLocationProcessingParametersType.h"
#include "uci/type/ImagePixelGeoLocationProcessingResultsType.h"
#include "uci/type/ImageRegionOfInterestPET.h"
#include "uci/type/InertialStateRelativeType.h"
#include "uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "uci/type/LAR_ID_Type.h"
#include "uci/type/LAR_MT.h"
#include "uci/type/LAR_ReportMT.h"
#include "uci/type/LAR_RequestMDT.h"
#include "uci/type/LAR_RequestMT.h"
#include "uci/type/LAR_RequestStatusMDT.h"
#include "uci/type/LAR_RequestStatusMT.h"
#include "uci/type/LaunchObjectID_Type.h"
#include "uci/type/LaunchObservationID_Type.h"
#include "uci/type/LaunchObservationMDT.h"
#include "uci/type/LaunchObservationMT.h"
#include "uci/type/LineDataStatusType.h"
#include "uci/type/LinePoint2D_Type.h"
#include "uci/type/LineTargetType.h"
#include "uci/type/LineType.h"
#include "uci/type/Link11DataLinkIdentifierType.h"
#include "uci/type/Link11QuerySpecificDataType.h"
#include "uci/type/Link16DataLinkIdentifierType.h"
#include "uci/type/Link16DataLinkNativeInfoType.h"
#include "uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "uci/type/Link16EntityMetadataType.h"
#include "uci/type/Link16GatewayConfigurationType.h"
#include "uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "uci/type/Link16SystemMetadataType.h"
#include "uci/type/Link16TN_QuerySpecificDataType.h"
#include "uci/type/LocatedEllipseType.h"
#include "uci/type/LocatedRectangleType.h"
#include "uci/type/LocationAndStatusBaseType.h"
#include "uci/type/LocationAndStatusExpireType.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

boost::optional<std::string> DerivedTypesSerializer9::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::gatewayActivityMT:
      return asb_uci::type::GatewayActivityMT::serialize(dynamic_cast<const uci::type::GatewayActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayActivityType:
      return asb_uci::type::GatewayActivityType::serialize(dynamic_cast<const uci::type::GatewayActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityCommandType:
      return asb_uci::type::GatewayCapabilityCommandType::serialize(dynamic_cast<const uci::type::GatewayCapabilityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityMDT:
      return asb_uci::type::GatewayCapabilityMDT::serialize(dynamic_cast<const uci::type::GatewayCapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityMT:
      return asb_uci::type::GatewayCapabilityMT::serialize(dynamic_cast<const uci::type::GatewayCapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilitySettingsCommandBaseType:
      return asb_uci::type::GatewayCapabilitySettingsCommandBaseType::serialize(dynamic_cast<const uci::type::GatewayCapabilitySettingsCommandBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityStatusMDT:
      return asb_uci::type::GatewayCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::GatewayCapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityStatusMT:
      return asb_uci::type::GatewayCapabilityStatusMT::serialize(dynamic_cast<const uci::type::GatewayCapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityStatusType:
      return asb_uci::type::GatewayCapabilityStatusType::serialize(dynamic_cast<const uci::type::GatewayCapabilityStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCapabilityType:
      return asb_uci::type::GatewayCapabilityType::serialize(dynamic_cast<const uci::type::GatewayCapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCommandMT:
      return asb_uci::type::GatewayCommandMT::serialize(dynamic_cast<const uci::type::GatewayCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCommandStatusMDT:
      return asb_uci::type::GatewayCommandStatusMDT::serialize(dynamic_cast<const uci::type::GatewayCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayCommandStatusMT:
      return asb_uci::type::GatewayCommandStatusMT::serialize(dynamic_cast<const uci::type::GatewayCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayConfigurationPET:
      return asb_uci::type::GatewayConfigurationPET::serialize(dynamic_cast<const uci::type::GatewayConfigurationPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayLink16ConfigurationAnnulusType:
      return asb_uci::type::GatewayLink16ConfigurationAnnulusType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationAnnulusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayLink16ConfigurationCircleType:
      return asb_uci::type::GatewayLink16ConfigurationCircleType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationCircleType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayLink16ConfigurationCircularSectorType:
      return asb_uci::type::GatewayLink16ConfigurationCircularSectorType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationCircularSectorType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayLink16ConfigurationClosedAreaType:
      return asb_uci::type::GatewayLink16ConfigurationClosedAreaType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationClosedAreaType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayLink16ConfigurationRectangleType:
      return asb_uci::type::GatewayLink16ConfigurationRectangleType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationRectangleType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewayNativeStatisticsPET:
      return asb_uci::type::GatewayNativeStatisticsPET::serialize(dynamic_cast<const uci::type::GatewayNativeStatisticsPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewaySettingsCommandMDT:
      return asb_uci::type::GatewaySettingsCommandMDT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewaySettingsCommandMT:
      return asb_uci::type::GatewaySettingsCommandMT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewaySettingsCommandStatusMDT:
      return asb_uci::type::GatewaySettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gatewaySettingsCommandStatusMT:
      return asb_uci::type::GatewaySettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::genericDataLinkNativeInfoType:
      return asb_uci::type::GenericDataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::GenericDataLinkNativeInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::geoFiltersQueryType:
      return asb_uci::type::GeoFiltersQueryType::serialize(dynamic_cast<const uci::type::GeoFiltersQueryType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::gimbalAxisID_Type:
      return asb_uci::type::GimbalAxisID_Type::serialize(dynamic_cast<const uci::type::GimbalAxisID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iD_Type:
      return asb_uci::type::ID_Type::serialize(dynamic_cast<const uci::type::ID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::identityConfidenceType:
      return asb_uci::type::IdentityConfidenceType::serialize(dynamic_cast<const uci::type::IdentityConfidenceType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::identityType:
      return asb_uci::type::IdentityType::serialize(dynamic_cast<const uci::type::IdentityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ActivityCommandType:
      return asb_uci::type::IFF_ActivityCommandType::serialize(dynamic_cast<const uci::type::IFF_ActivityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ActivityMT:
      return asb_uci::type::IFF_ActivityMT::serialize(dynamic_cast<const uci::type::IFF_ActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ActivityTransponderType:
      return asb_uci::type::IFF_ActivityTransponderType::serialize(dynamic_cast<const uci::type::IFF_ActivityTransponderType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ActivityType:
      return asb_uci::type::IFF_ActivityType::serialize(dynamic_cast<const uci::type::IFF_ActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CapabilityCommandType:
      return asb_uci::type::IFF_CapabilityCommandType::serialize(dynamic_cast<const uci::type::IFF_CapabilityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CapabilityMDT:
      return asb_uci::type::IFF_CapabilityMDT::serialize(dynamic_cast<const uci::type::IFF_CapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CapabilityMT:
      return asb_uci::type::IFF_CapabilityMT::serialize(dynamic_cast<const uci::type::IFF_CapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CapabilityStatusMDT:
      return asb_uci::type::IFF_CapabilityStatusMDT::serialize(dynamic_cast<const uci::type::IFF_CapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CapabilityStatusMT:
      return asb_uci::type::IFF_CapabilityStatusMT::serialize(dynamic_cast<const uci::type::IFF_CapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CapabilityType:
      return asb_uci::type::IFF_CapabilityType::serialize(dynamic_cast<const uci::type::IFF_CapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CollectionConstraintsType:
      return asb_uci::type::IFF_CollectionConstraintsType::serialize(dynamic_cast<const uci::type::IFF_CollectionConstraintsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CommandMT:
      return asb_uci::type::IFF_CommandMT::serialize(dynamic_cast<const uci::type::IFF_CommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CommandStatusMDT:
      return asb_uci::type::IFF_CommandStatusMDT::serialize(dynamic_cast<const uci::type::IFF_CommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_CommandStatusMT:
      return asb_uci::type::IFF_CommandStatusMT::serialize(dynamic_cast<const uci::type::IFF_CommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ConsentRequestMT:
      return asb_uci::type::IFF_ConsentRequestMT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ConsentRequestStatusMDT:
      return asb_uci::type::IFF_ConsentRequestStatusMDT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ConsentRequestStatusMT:
      return asb_uci::type::IFF_ConsentRequestStatusMT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_ConsentRequestType:
      return asb_uci::type::IFF_ConsentRequestType::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_SettingsCommandMDT:
      return asb_uci::type::IFF_SettingsCommandMDT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_SettingsCommandMT:
      return asb_uci::type::IFF_SettingsCommandMT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_SettingsCommandStatusMDT:
      return asb_uci::type::IFF_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_SettingsCommandStatusMT:
      return asb_uci::type::IFF_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iFF_TransponderModeControlType:
      return asb_uci::type::IFF_TransponderModeControlType::serialize(dynamic_cast<const uci::type::IFF_TransponderModeControlType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iJMS_DataLinkIdentifierType:
      return asb_uci::type::IJMS_DataLinkIdentifierType::serialize(dynamic_cast<const uci::type::IJMS_DataLinkIdentifierType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iJMS_QuerySpecificDataType:
      return asb_uci::type::IJMS_QuerySpecificDataType::serialize(dynamic_cast<const uci::type::IJMS_QuerySpecificDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::imageAugmentationParametersType:
      return asb_uci::type::ImageAugmentationParametersType::serialize(dynamic_cast<const uci::type::ImageAugmentationParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::imageGeoRegistrationProcessingResultsType:
      return asb_uci::type::ImageGeoRegistrationProcessingResultsType::serialize(dynamic_cast<const uci::type::ImageGeoRegistrationProcessingResultsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::imagePixelGeoLocationProcessingParametersType:
      return asb_uci::type::ImagePixelGeoLocationProcessingParametersType::serialize(dynamic_cast<const uci::type::ImagePixelGeoLocationProcessingParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::imagePixelGeoLocationProcessingResultsType:
      return asb_uci::type::ImagePixelGeoLocationProcessingResultsType::serialize(dynamic_cast<const uci::type::ImagePixelGeoLocationProcessingResultsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::imageRegionOfInterestPET:
      return asb_uci::type::ImageRegionOfInterestPET::serialize(dynamic_cast<const uci::type::ImageRegionOfInterestPET&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::inertialStateRelativeType:
      return asb_uci::type::InertialStateRelativeType::serialize(dynamic_cast<const uci::type::InertialStateRelativeType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iO_PortCommandMT:
      return asb_uci::type::IO_PortCommandMT::serialize(dynamic_cast<const uci::type::IO_PortCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iO_PortCommandStatusMDT:
      return asb_uci::type::IO_PortCommandStatusMDT::serialize(dynamic_cast<const uci::type::IO_PortCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iO_PortCommandStatusMT:
      return asb_uci::type::IO_PortCommandStatusMT::serialize(dynamic_cast<const uci::type::IO_PortCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iO_PortCommandType:
      return asb_uci::type::IO_PortCommandType::serialize(dynamic_cast<const uci::type::IO_PortCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iO_PortStatusMT:
      return asb_uci::type::IO_PortStatusMT::serialize(dynamic_cast<const uci::type::IO_PortStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iO_PortStatusType:
      return asb_uci::type::IO_PortStatusType::serialize(dynamic_cast<const uci::type::IO_PortStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iP_DataLinkNativeInfoType:
      return asb_uci::type::IP_DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::IP_DataLinkNativeInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iPv4_DataLinkNativeInfoType:
      return asb_uci::type::IPv4_DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::IPv4_DataLinkNativeInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::iPv6_DataLinkNativeInfoType:
      return asb_uci::type::IPv6_DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::IPv6_DataLinkNativeInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::jREAP_GatewayNativeStatisticsType:
      return asb_uci::type::JREAP_GatewayNativeStatisticsType::serialize(dynamic_cast<const uci::type::JREAP_GatewayNativeStatisticsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_ID_Type:
      return asb_uci::type::LAR_ID_Type::serialize(dynamic_cast<const uci::type::LAR_ID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_MT:
      return asb_uci::type::LAR_MT::serialize(dynamic_cast<const uci::type::LAR_MT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_ReportMT:
      return asb_uci::type::LAR_ReportMT::serialize(dynamic_cast<const uci::type::LAR_ReportMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_RequestMDT:
      return asb_uci::type::LAR_RequestMDT::serialize(dynamic_cast<const uci::type::LAR_RequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_RequestMT:
      return asb_uci::type::LAR_RequestMT::serialize(dynamic_cast<const uci::type::LAR_RequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_RequestStatusMDT:
      return asb_uci::type::LAR_RequestStatusMDT::serialize(dynamic_cast<const uci::type::LAR_RequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lAR_RequestStatusMT:
      return asb_uci::type::LAR_RequestStatusMT::serialize(dynamic_cast<const uci::type::LAR_RequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::launchObjectID_Type:
      return asb_uci::type::LaunchObjectID_Type::serialize(dynamic_cast<const uci::type::LaunchObjectID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::launchObservationID_Type:
      return asb_uci::type::LaunchObservationID_Type::serialize(dynamic_cast<const uci::type::LaunchObservationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::launchObservationMDT:
      return asb_uci::type::LaunchObservationMDT::serialize(dynamic_cast<const uci::type::LaunchObservationMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::launchObservationMT:
      return asb_uci::type::LaunchObservationMT::serialize(dynamic_cast<const uci::type::LaunchObservationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lineDataStatusType:
      return asb_uci::type::LineDataStatusType::serialize(dynamic_cast<const uci::type::LineDataStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::linePoint2D_Type:
      return asb_uci::type::LinePoint2D_Type::serialize(dynamic_cast<const uci::type::LinePoint2D_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lineTargetType:
      return asb_uci::type::LineTargetType::serialize(dynamic_cast<const uci::type::LineTargetType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::lineType:
      return asb_uci::type::LineType::serialize(dynamic_cast<const uci::type::LineType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link11DataLinkIdentifierType:
      return asb_uci::type::Link11DataLinkIdentifierType::serialize(dynamic_cast<const uci::type::Link11DataLinkIdentifierType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link11QuerySpecificDataType:
      return asb_uci::type::Link11QuerySpecificDataType::serialize(dynamic_cast<const uci::type::Link11QuerySpecificDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16DataLinkIdentifierType:
      return asb_uci::type::Link16DataLinkIdentifierType::serialize(dynamic_cast<const uci::type::Link16DataLinkIdentifierType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16DataLinkNativeInfoType:
      return asb_uci::type::Link16DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::Link16DataLinkNativeInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16EntityDataLinkNativeFilterType:
      return asb_uci::type::Link16EntityDataLinkNativeFilterType::serialize(dynamic_cast<const uci::type::Link16EntityDataLinkNativeFilterType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16EntityMetadataType:
      return asb_uci::type::Link16EntityMetadataType::serialize(dynamic_cast<const uci::type::Link16EntityMetadataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16GatewayConfigurationType:
      return asb_uci::type::Link16GatewayConfigurationType::serialize(dynamic_cast<const uci::type::Link16GatewayConfigurationType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16InterfaceDataLinkNativeInfoType:
      return asb_uci::type::Link16InterfaceDataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::Link16InterfaceDataLinkNativeInfoType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16SystemMetadataType:
      return asb_uci::type::Link16SystemMetadataType::serialize(dynamic_cast<const uci::type::Link16SystemMetadataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::link16TN_QuerySpecificDataType:
      return asb_uci::type::Link16TN_QuerySpecificDataType::serialize(dynamic_cast<const uci::type::Link16TN_QuerySpecificDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::locatedEllipseType:
      return asb_uci::type::LocatedEllipseType::serialize(dynamic_cast<const uci::type::LocatedEllipseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::locatedRectangleType:
      return asb_uci::type::LocatedRectangleType::serialize(dynamic_cast<const uci::type::LocatedRectangleType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::locationAndStatusBaseType:
      return asb_uci::type::LocationAndStatusBaseType::serialize(dynamic_cast<const uci::type::LocationAndStatusBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::locationAndStatusExpireType:
      return asb_uci::type::LocationAndStatusExpireType::serialize(dynamic_cast<const uci::type::LocationAndStatusExpireType&>(accessor), propTree, nodeName, createNode, true, false);
    default:
      return boost::none;
  }
}

} // namespace util

} // namespace asb_uci

