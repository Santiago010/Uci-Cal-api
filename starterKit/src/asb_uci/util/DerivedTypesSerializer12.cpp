/** @file DerivedTypesSerializer12.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer12.h"

#include <string>

#include <boost/none.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/OrbitChangeActivityMT.h"
#include "asb_uci/type/OrbitChangeActivityType.h"
#include "asb_uci/type/OrbitChangeCapabilityMDT.h"
#include "asb_uci/type/OrbitChangeCapabilityMT.h"
#include "asb_uci/type/OrbitChangeCapabilityStatusMDT.h"
#include "asb_uci/type/OrbitChangeCapabilityStatusMT.h"
#include "asb_uci/type/OrbitChangeCapabilityType.h"
#include "asb_uci/type/OrbitChangeTaskBaseType.h"
#include "asb_uci/type/OrbitChangeTaskType.h"
#include "asb_uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "asb_uci/type/OrbitConjunctionAssessmentMT.h"
#include "asb_uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "asb_uci/type/OrbitConjunctionAssessmentRequestMT.h"
#include "asb_uci/type/OrbitConjunctionAssessmentRequestStatusMDT.h"
#include "asb_uci/type/OrbitConjunctionAssessmentRequestStatusMT.h"
#include "asb_uci/type/OrbitExecutionPlanSetType.h"
#include "asb_uci/type/OrbitKinematicsParametersType.h"
#include "asb_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "asb_uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "asb_uci/type/OrbitKinematicsSequenceType.h"
#include "asb_uci/type/OrbitKinematicsType.h"
#include "asb_uci/type/OrbitManeuverSegmentID_Type.h"
#include "asb_uci/type/OrbitMetricsID_Type.h"
#include "asb_uci/type/OrbitMetricsMT.h"
#include "asb_uci/type/OrbitMetricsRequestMDT.h"
#include "asb_uci/type/OrbitMetricsRequestMT.h"
#include "asb_uci/type/OrbitMetricsRequestStatusMDT.h"
#include "asb_uci/type/OrbitMetricsRequestStatusMT.h"
#include "asb_uci/type/OrbitModificationRequestMDT.h"
#include "asb_uci/type/OrbitModificationRequestMT.h"
#include "asb_uci/type/OrbitModificationRequestStatusMDT.h"
#include "asb_uci/type/OrbitModificationRequestStatusMT.h"
#include "asb_uci/type/OrbitPlanApprovalStatusMT.h"
#include "asb_uci/type/OrbitPlanCommandID_Type.h"
#include "asb_uci/type/OrbitPlanCommandMT.h"
#include "asb_uci/type/OrbitPlanCommandStatusMT.h"
#include "asb_uci/type/OrbitPlanExecutionStatusMT.h"
#include "asb_uci/type/OrbitPlanID_Type.h"
#include "asb_uci/type/OrbitPlanInputsType.h"
#include "asb_uci/type/OrbitPlanMT.h"
#include "asb_uci/type/OrbitPlanProcessDescriptionType.h"
#include "asb_uci/type/OrbitPlanStatusMT.h"
#include "asb_uci/type/OrbitPlanStatusType.h"
#include "asb_uci/type/OrbitPlanValidationCommandMDT.h"
#include "asb_uci/type/OrbitPlanValidationCommandMT.h"
#include "asb_uci/type/OrbitPlanValidationCommandStatusMDT.h"
#include "asb_uci/type/OrbitPlanValidationCommandStatusMT.h"
#include "asb_uci/type/OrbitPlanValidationID_Type.h"
#include "asb_uci/type/OrbitPlanValidationInputsType.h"
#include "asb_uci/type/OrbitPlanValidationMT.h"
#include "asb_uci/type/OrbitPlanningCandidateType.h"
#include "asb_uci/type/OrbitSequenceCompletedType.h"
#include "asb_uci/type/OrbitSequenceEstimateType.h"
#include "asb_uci/type/OrbitalSurveillanceCapabilityMT.h"
#include "asb_uci/type/OrbitalSurveillanceCapabilityStatusMDT.h"
#include "asb_uci/type/OrbitalSurveillanceCapabilityStatusMT.h"
#include "asb_uci/type/OrbitalSurveillanceCapabilityType.h"
#include "asb_uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "asb_uci/type/OrbitalSurveillanceObjectType.h"
#include "asb_uci/type/OrbitalSurveillanceSensorActivityMT.h"
#include "asb_uci/type/OrbitalSurveillanceSensorActivityType.h"
#include "asb_uci/type/OrbitalSurveillanceSensorCapabilityMDT.h"
#include "asb_uci/type/OrbitalSurveillanceSensorCapabilityMT.h"
#include "asb_uci/type/OrbitalSurveillanceSensorCapabilityStatusMDT.h"
#include "asb_uci/type/OrbitalSurveillanceSensorCapabilityStatusMT.h"
#include "asb_uci/type/OrbitalSurveillanceSensorCapabilityType.h"
#include "asb_uci/type/OrbitalSurveillanceSensorTaskBaseType.h"
#include "asb_uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "asb_uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "asb_uci/type/OrbitalSurveillanceTaskType.h"
#include "asb_uci/type/OrderOfBattleC2_EmitterType.h"
#include "asb_uci/type/OrderOfBattleEmitterType.h"
#include "asb_uci/type/OrderOfBattleID_Type.h"
#include "asb_uci/type/OrderOfBattleMDT.h"
#include "asb_uci/type/OrderOfBattleMT.h"
#include "asb_uci/type/PackageID_Type.h"
#include "asb_uci/type/PackageMDT.h"
#include "asb_uci/type/PackageMT.h"
#include "asb_uci/type/PackageStatusMT.h"
#include "asb_uci/type/ParameterID_Type.h"
#include "asb_uci/type/PathID_Type.h"
#include "asb_uci/type/PixelCountSettingsType.h"
#include "asb_uci/type/PixelDataType.h"
#include "asb_uci/type/PixelOutputDataType.h"
#include "asb_uci/type/PlanInputsCoreType.h"
#include "asb_uci/type/PlanModificationRequestMDT.h"
#include "asb_uci/type/PlanModificationRequestMT.h"
#include "asb_uci/type/PlanModificationRequestStatusMDT.h"
#include "asb_uci/type/PlanModificationRequestStatusMT.h"
#include "asb_uci/type/PlannedActivityBaseType.h"
#include "asb_uci/type/PlannedActivityExecutionStatusType.h"
#include "asb_uci/type/PlannedActivityID_Type.h"
#include "asb_uci/type/PlannedActivityTriggerType.h"
#include "asb_uci/type/PlannedActivityType.h"
#include "asb_uci/type/PlannedCommActionExtendedType.h"
#include "asb_uci/type/PlannedCommActionType.h"
#include "asb_uci/type/PlanningAllowedType.h"
#include "asb_uci/type/PlanningApplicabilitySystemType.h"
#include "asb_uci/type/PlanningCandidateBaseType.h"
#include "asb_uci/type/PlanningDiscoveryBaseType.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrbitChangeActivityMT.h"
#include "uci/type/OrbitChangeActivityType.h"
#include "uci/type/OrbitChangeCapabilityMDT.h"
#include "uci/type/OrbitChangeCapabilityMT.h"
#include "uci/type/OrbitChangeCapabilityStatusMDT.h"
#include "uci/type/OrbitChangeCapabilityStatusMT.h"
#include "uci/type/OrbitChangeCapabilityType.h"
#include "uci/type/OrbitChangeTaskBaseType.h"
#include "uci/type/OrbitChangeTaskType.h"
#include "uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "uci/type/OrbitConjunctionAssessmentMT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestMT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestStatusMDT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestStatusMT.h"
#include "uci/type/OrbitExecutionPlanSetType.h"
#include "uci/type/OrbitKinematicsParametersType.h"
#include "uci/type/OrbitKinematicsSequenceID_Type.h"
#include "uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "uci/type/OrbitKinematicsSequenceType.h"
#include "uci/type/OrbitKinematicsType.h"
#include "uci/type/OrbitManeuverSegmentID_Type.h"
#include "uci/type/OrbitMetricsID_Type.h"
#include "uci/type/OrbitMetricsMT.h"
#include "uci/type/OrbitMetricsRequestMDT.h"
#include "uci/type/OrbitMetricsRequestMT.h"
#include "uci/type/OrbitMetricsRequestStatusMDT.h"
#include "uci/type/OrbitMetricsRequestStatusMT.h"
#include "uci/type/OrbitModificationRequestMDT.h"
#include "uci/type/OrbitModificationRequestMT.h"
#include "uci/type/OrbitModificationRequestStatusMDT.h"
#include "uci/type/OrbitModificationRequestStatusMT.h"
#include "uci/type/OrbitPlanApprovalStatusMT.h"
#include "uci/type/OrbitPlanCommandID_Type.h"
#include "uci/type/OrbitPlanCommandMT.h"
#include "uci/type/OrbitPlanCommandStatusMT.h"
#include "uci/type/OrbitPlanExecutionStatusMT.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/OrbitPlanInputsType.h"
#include "uci/type/OrbitPlanMT.h"
#include "uci/type/OrbitPlanProcessDescriptionType.h"
#include "uci/type/OrbitPlanStatusMT.h"
#include "uci/type/OrbitPlanStatusType.h"
#include "uci/type/OrbitPlanValidationCommandMDT.h"
#include "uci/type/OrbitPlanValidationCommandMT.h"
#include "uci/type/OrbitPlanValidationCommandStatusMDT.h"
#include "uci/type/OrbitPlanValidationCommandStatusMT.h"
#include "uci/type/OrbitPlanValidationID_Type.h"
#include "uci/type/OrbitPlanValidationInputsType.h"
#include "uci/type/OrbitPlanValidationMT.h"
#include "uci/type/OrbitPlanningCandidateType.h"
#include "uci/type/OrbitSequenceCompletedType.h"
#include "uci/type/OrbitSequenceEstimateType.h"
#include "uci/type/OrbitalSurveillanceCapabilityMT.h"
#include "uci/type/OrbitalSurveillanceCapabilityStatusMDT.h"
#include "uci/type/OrbitalSurveillanceCapabilityStatusMT.h"
#include "uci/type/OrbitalSurveillanceCapabilityType.h"
#include "uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "uci/type/OrbitalSurveillanceObjectType.h"
#include "uci/type/OrbitalSurveillanceSensorActivityMT.h"
#include "uci/type/OrbitalSurveillanceSensorActivityType.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityMDT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityMT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityStatusMDT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityStatusMT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityType.h"
#include "uci/type/OrbitalSurveillanceSensorTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceTaskType.h"
#include "uci/type/OrderOfBattleC2_EmitterType.h"
#include "uci/type/OrderOfBattleEmitterType.h"
#include "uci/type/OrderOfBattleID_Type.h"
#include "uci/type/OrderOfBattleMDT.h"
#include "uci/type/OrderOfBattleMT.h"
#include "uci/type/PackageID_Type.h"
#include "uci/type/PackageMDT.h"
#include "uci/type/PackageMT.h"
#include "uci/type/PackageStatusMT.h"
#include "uci/type/ParameterID_Type.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/PixelCountSettingsType.h"
#include "uci/type/PixelDataType.h"
#include "uci/type/PixelOutputDataType.h"
#include "uci/type/PlanInputsCoreType.h"
#include "uci/type/PlanModificationRequestMDT.h"
#include "uci/type/PlanModificationRequestMT.h"
#include "uci/type/PlanModificationRequestStatusMDT.h"
#include "uci/type/PlanModificationRequestStatusMT.h"
#include "uci/type/PlannedActivityBaseType.h"
#include "uci/type/PlannedActivityExecutionStatusType.h"
#include "uci/type/PlannedActivityID_Type.h"
#include "uci/type/PlannedActivityTriggerType.h"
#include "uci/type/PlannedActivityType.h"
#include "uci/type/PlannedCommActionExtendedType.h"
#include "uci/type/PlannedCommActionType.h"
#include "uci/type/PlanningAllowedType.h"
#include "uci/type/PlanningApplicabilitySystemType.h"
#include "uci/type/PlanningCandidateBaseType.h"
#include "uci/type/PlanningDiscoveryBaseType.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

boost::optional<std::string> DerivedTypesSerializer12::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::orbitalSurveillanceCapabilityMT:
      return asb_uci::type::OrbitalSurveillanceCapabilityMT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceCapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceCapabilityStatusMDT:
      return asb_uci::type::OrbitalSurveillanceCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceCapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceCapabilityStatusMT:
      return asb_uci::type::OrbitalSurveillanceCapabilityStatusMT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceCapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceCapabilityType:
      return asb_uci::type::OrbitalSurveillanceCapabilityType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceCapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceObjectBaseType:
      return asb_uci::type::OrbitalSurveillanceObjectBaseType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceObjectBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceObjectType:
      return asb_uci::type::OrbitalSurveillanceObjectType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceObjectType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityMT:
      return asb_uci::type::OrbitalSurveillanceSensorActivityMT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityType:
      return asb_uci::type::OrbitalSurveillanceSensorActivityType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityMDT:
      return asb_uci::type::OrbitalSurveillanceSensorCapabilityMDT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorCapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityMT:
      return asb_uci::type::OrbitalSurveillanceSensorCapabilityMT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorCapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMDT:
      return asb_uci::type::OrbitalSurveillanceSensorCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorCapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMT:
      return asb_uci::type::OrbitalSurveillanceSensorCapabilityStatusMT::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorCapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityType:
      return asb_uci::type::OrbitalSurveillanceSensorCapabilityType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorCapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorTaskBaseType:
      return asb_uci::type::OrbitalSurveillanceSensorTaskBaseType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorTaskBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceSensorTaskType:
      return asb_uci::type::OrbitalSurveillanceSensorTaskType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceSensorTaskType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceTaskBaseType:
      return asb_uci::type::OrbitalSurveillanceTaskBaseType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceTaskBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitalSurveillanceTaskType:
      return asb_uci::type::OrbitalSurveillanceTaskType::serialize(dynamic_cast<const uci::type::OrbitalSurveillanceTaskType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeActivityMT:
      return asb_uci::type::OrbitChangeActivityMT::serialize(dynamic_cast<const uci::type::OrbitChangeActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeActivityType:
      return asb_uci::type::OrbitChangeActivityType::serialize(dynamic_cast<const uci::type::OrbitChangeActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeCapabilityMDT:
      return asb_uci::type::OrbitChangeCapabilityMDT::serialize(dynamic_cast<const uci::type::OrbitChangeCapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeCapabilityMT:
      return asb_uci::type::OrbitChangeCapabilityMT::serialize(dynamic_cast<const uci::type::OrbitChangeCapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeCapabilityStatusMDT:
      return asb_uci::type::OrbitChangeCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::OrbitChangeCapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeCapabilityStatusMT:
      return asb_uci::type::OrbitChangeCapabilityStatusMT::serialize(dynamic_cast<const uci::type::OrbitChangeCapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeCapabilityType:
      return asb_uci::type::OrbitChangeCapabilityType::serialize(dynamic_cast<const uci::type::OrbitChangeCapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeTaskBaseType:
      return asb_uci::type::OrbitChangeTaskBaseType::serialize(dynamic_cast<const uci::type::OrbitChangeTaskBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitChangeTaskType:
      return asb_uci::type::OrbitChangeTaskType::serialize(dynamic_cast<const uci::type::OrbitChangeTaskType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitConjunctionAssessmentID_Type:
      return asb_uci::type::OrbitConjunctionAssessmentID_Type::serialize(dynamic_cast<const uci::type::OrbitConjunctionAssessmentID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitConjunctionAssessmentMT:
      return asb_uci::type::OrbitConjunctionAssessmentMT::serialize(dynamic_cast<const uci::type::OrbitConjunctionAssessmentMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestMDT:
      return asb_uci::type::OrbitConjunctionAssessmentRequestMDT::serialize(dynamic_cast<const uci::type::OrbitConjunctionAssessmentRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestMT:
      return asb_uci::type::OrbitConjunctionAssessmentRequestMT::serialize(dynamic_cast<const uci::type::OrbitConjunctionAssessmentRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMDT:
      return asb_uci::type::OrbitConjunctionAssessmentRequestStatusMDT::serialize(dynamic_cast<const uci::type::OrbitConjunctionAssessmentRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMT:
      return asb_uci::type::OrbitConjunctionAssessmentRequestStatusMT::serialize(dynamic_cast<const uci::type::OrbitConjunctionAssessmentRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitExecutionPlanSetType:
      return asb_uci::type::OrbitExecutionPlanSetType::serialize(dynamic_cast<const uci::type::OrbitExecutionPlanSetType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitKinematicsParametersType:
      return asb_uci::type::OrbitKinematicsParametersType::serialize(dynamic_cast<const uci::type::OrbitKinematicsParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitKinematicsSequenceID_Type:
      return asb_uci::type::OrbitKinematicsSequenceID_Type::serialize(dynamic_cast<const uci::type::OrbitKinematicsSequenceID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitKinematicsSequenceInsertionType:
      return asb_uci::type::OrbitKinematicsSequenceInsertionType::serialize(dynamic_cast<const uci::type::OrbitKinematicsSequenceInsertionType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitKinematicsSequenceType:
      return asb_uci::type::OrbitKinematicsSequenceType::serialize(dynamic_cast<const uci::type::OrbitKinematicsSequenceType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitKinematicsType:
      return asb_uci::type::OrbitKinematicsType::serialize(dynamic_cast<const uci::type::OrbitKinematicsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitManeuverSegmentID_Type:
      return asb_uci::type::OrbitManeuverSegmentID_Type::serialize(dynamic_cast<const uci::type::OrbitManeuverSegmentID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitMetricsID_Type:
      return asb_uci::type::OrbitMetricsID_Type::serialize(dynamic_cast<const uci::type::OrbitMetricsID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitMetricsMT:
      return asb_uci::type::OrbitMetricsMT::serialize(dynamic_cast<const uci::type::OrbitMetricsMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitMetricsRequestMDT:
      return asb_uci::type::OrbitMetricsRequestMDT::serialize(dynamic_cast<const uci::type::OrbitMetricsRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitMetricsRequestMT:
      return asb_uci::type::OrbitMetricsRequestMT::serialize(dynamic_cast<const uci::type::OrbitMetricsRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitMetricsRequestStatusMDT:
      return asb_uci::type::OrbitMetricsRequestStatusMDT::serialize(dynamic_cast<const uci::type::OrbitMetricsRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitMetricsRequestStatusMT:
      return asb_uci::type::OrbitMetricsRequestStatusMT::serialize(dynamic_cast<const uci::type::OrbitMetricsRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitModificationRequestMDT:
      return asb_uci::type::OrbitModificationRequestMDT::serialize(dynamic_cast<const uci::type::OrbitModificationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitModificationRequestMT:
      return asb_uci::type::OrbitModificationRequestMT::serialize(dynamic_cast<const uci::type::OrbitModificationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitModificationRequestStatusMDT:
      return asb_uci::type::OrbitModificationRequestStatusMDT::serialize(dynamic_cast<const uci::type::OrbitModificationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitModificationRequestStatusMT:
      return asb_uci::type::OrbitModificationRequestStatusMT::serialize(dynamic_cast<const uci::type::OrbitModificationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanApprovalStatusMT:
      return asb_uci::type::OrbitPlanApprovalStatusMT::serialize(dynamic_cast<const uci::type::OrbitPlanApprovalStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanCommandID_Type:
      return asb_uci::type::OrbitPlanCommandID_Type::serialize(dynamic_cast<const uci::type::OrbitPlanCommandID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanCommandMT:
      return asb_uci::type::OrbitPlanCommandMT::serialize(dynamic_cast<const uci::type::OrbitPlanCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanCommandStatusMT:
      return asb_uci::type::OrbitPlanCommandStatusMT::serialize(dynamic_cast<const uci::type::OrbitPlanCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanExecutionStatusMT:
      return asb_uci::type::OrbitPlanExecutionStatusMT::serialize(dynamic_cast<const uci::type::OrbitPlanExecutionStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanID_Type:
      return asb_uci::type::OrbitPlanID_Type::serialize(dynamic_cast<const uci::type::OrbitPlanID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanInputsType:
      return asb_uci::type::OrbitPlanInputsType::serialize(dynamic_cast<const uci::type::OrbitPlanInputsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanMT:
      return asb_uci::type::OrbitPlanMT::serialize(dynamic_cast<const uci::type::OrbitPlanMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanningCandidateType:
      return asb_uci::type::OrbitPlanningCandidateType::serialize(dynamic_cast<const uci::type::OrbitPlanningCandidateType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanProcessDescriptionType:
      return asb_uci::type::OrbitPlanProcessDescriptionType::serialize(dynamic_cast<const uci::type::OrbitPlanProcessDescriptionType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanStatusMT:
      return asb_uci::type::OrbitPlanStatusMT::serialize(dynamic_cast<const uci::type::OrbitPlanStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanStatusType:
      return asb_uci::type::OrbitPlanStatusType::serialize(dynamic_cast<const uci::type::OrbitPlanStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationCommandMDT:
      return asb_uci::type::OrbitPlanValidationCommandMDT::serialize(dynamic_cast<const uci::type::OrbitPlanValidationCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationCommandMT:
      return asb_uci::type::OrbitPlanValidationCommandMT::serialize(dynamic_cast<const uci::type::OrbitPlanValidationCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationCommandStatusMDT:
      return asb_uci::type::OrbitPlanValidationCommandStatusMDT::serialize(dynamic_cast<const uci::type::OrbitPlanValidationCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationCommandStatusMT:
      return asb_uci::type::OrbitPlanValidationCommandStatusMT::serialize(dynamic_cast<const uci::type::OrbitPlanValidationCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationID_Type:
      return asb_uci::type::OrbitPlanValidationID_Type::serialize(dynamic_cast<const uci::type::OrbitPlanValidationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationInputsType:
      return asb_uci::type::OrbitPlanValidationInputsType::serialize(dynamic_cast<const uci::type::OrbitPlanValidationInputsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitPlanValidationMT:
      return asb_uci::type::OrbitPlanValidationMT::serialize(dynamic_cast<const uci::type::OrbitPlanValidationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitSequenceCompletedType:
      return asb_uci::type::OrbitSequenceCompletedType::serialize(dynamic_cast<const uci::type::OrbitSequenceCompletedType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orbitSequenceEstimateType:
      return asb_uci::type::OrbitSequenceEstimateType::serialize(dynamic_cast<const uci::type::OrbitSequenceEstimateType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orderOfBattleC2_EmitterType:
      return asb_uci::type::OrderOfBattleC2_EmitterType::serialize(dynamic_cast<const uci::type::OrderOfBattleC2_EmitterType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orderOfBattleEmitterType:
      return asb_uci::type::OrderOfBattleEmitterType::serialize(dynamic_cast<const uci::type::OrderOfBattleEmitterType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orderOfBattleID_Type:
      return asb_uci::type::OrderOfBattleID_Type::serialize(dynamic_cast<const uci::type::OrderOfBattleID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orderOfBattleMDT:
      return asb_uci::type::OrderOfBattleMDT::serialize(dynamic_cast<const uci::type::OrderOfBattleMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::orderOfBattleMT:
      return asb_uci::type::OrderOfBattleMT::serialize(dynamic_cast<const uci::type::OrderOfBattleMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::packageID_Type:
      return asb_uci::type::PackageID_Type::serialize(dynamic_cast<const uci::type::PackageID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::packageMDT:
      return asb_uci::type::PackageMDT::serialize(dynamic_cast<const uci::type::PackageMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::packageMT:
      return asb_uci::type::PackageMT::serialize(dynamic_cast<const uci::type::PackageMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::packageStatusMT:
      return asb_uci::type::PackageStatusMT::serialize(dynamic_cast<const uci::type::PackageStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::parameterID_Type:
      return asb_uci::type::ParameterID_Type::serialize(dynamic_cast<const uci::type::ParameterID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::pathID_Type:
      return asb_uci::type::PathID_Type::serialize(dynamic_cast<const uci::type::PathID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::pixelCountSettingsType:
      return asb_uci::type::PixelCountSettingsType::serialize(dynamic_cast<const uci::type::PixelCountSettingsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::pixelDataType:
      return asb_uci::type::PixelDataType::serialize(dynamic_cast<const uci::type::PixelDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::pixelOutputDataType:
      return asb_uci::type::PixelOutputDataType::serialize(dynamic_cast<const uci::type::PixelOutputDataType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planInputsCoreType:
      return asb_uci::type::PlanInputsCoreType::serialize(dynamic_cast<const uci::type::PlanInputsCoreType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planModificationRequestMDT:
      return asb_uci::type::PlanModificationRequestMDT::serialize(dynamic_cast<const uci::type::PlanModificationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planModificationRequestMT:
      return asb_uci::type::PlanModificationRequestMT::serialize(dynamic_cast<const uci::type::PlanModificationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planModificationRequestStatusMDT:
      return asb_uci::type::PlanModificationRequestStatusMDT::serialize(dynamic_cast<const uci::type::PlanModificationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planModificationRequestStatusMT:
      return asb_uci::type::PlanModificationRequestStatusMT::serialize(dynamic_cast<const uci::type::PlanModificationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedActivityBaseType:
      return asb_uci::type::PlannedActivityBaseType::serialize(dynamic_cast<const uci::type::PlannedActivityBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedActivityExecutionStatusType:
      return asb_uci::type::PlannedActivityExecutionStatusType::serialize(dynamic_cast<const uci::type::PlannedActivityExecutionStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedActivityID_Type:
      return asb_uci::type::PlannedActivityID_Type::serialize(dynamic_cast<const uci::type::PlannedActivityID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedActivityTriggerType:
      return asb_uci::type::PlannedActivityTriggerType::serialize(dynamic_cast<const uci::type::PlannedActivityTriggerType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedActivityType:
      return asb_uci::type::PlannedActivityType::serialize(dynamic_cast<const uci::type::PlannedActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedCommActionExtendedType:
      return asb_uci::type::PlannedCommActionExtendedType::serialize(dynamic_cast<const uci::type::PlannedCommActionExtendedType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::plannedCommActionType:
      return asb_uci::type::PlannedCommActionType::serialize(dynamic_cast<const uci::type::PlannedCommActionType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planningAllowedType:
      return asb_uci::type::PlanningAllowedType::serialize(dynamic_cast<const uci::type::PlanningAllowedType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planningApplicabilitySystemType:
      return asb_uci::type::PlanningApplicabilitySystemType::serialize(dynamic_cast<const uci::type::PlanningApplicabilitySystemType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planningCandidateBaseType:
      return asb_uci::type::PlanningCandidateBaseType::serialize(dynamic_cast<const uci::type::PlanningCandidateBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::planningDiscoveryBaseType:
      return asb_uci::type::PlanningDiscoveryBaseType::serialize(dynamic_cast<const uci::type::PlanningDiscoveryBaseType&>(accessor), propTree, nodeName, createNode, true, false);
    default:
      return boost::none;
  }
}

} // namespace util

} // namespace asb_uci

