/** @file DerivedTypesDeserializer18.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesDeserializer18.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/STANAG_4607_PackingPlanPET.h"
#include "asb_uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "asb_uci/type/STANAG_4607_PackingPlanType.h"
#include "asb_uci/type/SpecialCodeDataLinkIdentifierType.h"
#include "asb_uci/type/SpecificBlueSeparationType.h"
#include "asb_uci/type/SpecificEmitterIdentityConfidenceType.h"
#include "asb_uci/type/SpecificEmitterIdentityType.h"
#include "asb_uci/type/SpecificIdentityConfidenceType.h"
#include "asb_uci/type/SpecificIdentityType.h"
#include "asb_uci/type/SpecificRedSeparationType.h"
#include "asb_uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "asb_uci/type/SpectralDensityReportID_Type.h"
#include "asb_uci/type/SpectralDensityReportMT.h"
#include "asb_uci/type/StandardIdentityConfidenceType.h"
#include "asb_uci/type/StandardIdentityType.h"
#include "asb_uci/type/StateCovarianceNED_Type.h"
#include "asb_uci/type/StoreCarriageCapabilityStatusBaseType.h"
#include "asb_uci/type/StoreCarriageCapabilityStatusMT.h"
#include "asb_uci/type/StoreCarriageCapabilityStatusType.h"
#include "asb_uci/type/StoreCarriageStatusType.h"
#include "asb_uci/type/StoreInformationBaseType.h"
#include "asb_uci/type/StoreInformationType.h"
#include "asb_uci/type/StoreLoadoutConfigurationID_Type.h"
#include "asb_uci/type/StoreLoadoutConfigurationMT.h"
#include "asb_uci/type/StoreLoadoutItemPET.h"
#include "asb_uci/type/StoreLoadoutItemType.h"
#include "asb_uci/type/StoreManagementCommandMT.h"
#include "asb_uci/type/StoreManagementCommandStatusMDT.h"
#include "asb_uci/type/StoreManagementCommandStatusMT.h"
#include "asb_uci/type/StoreManagementCommandType.h"
#include "asb_uci/type/StoreManagementReportID_Type.h"
#include "asb_uci/type/StoreManagementReportMT.h"
#include "asb_uci/type/StoreManagementStatusMDT.h"
#include "asb_uci/type/StoreManagementStatusMT.h"
#include "asb_uci/type/StoreStatusBaseType.h"
#include "asb_uci/type/StoreStatusType.h"
#include "asb_uci/type/StoreType.h"
#include "asb_uci/type/StrikeActivityCommandType.h"
#include "asb_uci/type/StrikeActivityMT.h"
#include "asb_uci/type/StrikeActivityType.h"
#include "asb_uci/type/StrikeCapabilityCommandType.h"
#include "asb_uci/type/StrikeCapabilityMDT.h"
#include "asb_uci/type/StrikeCapabilityMT.h"
#include "asb_uci/type/StrikeCapabilityStatusMDT.h"
#include "asb_uci/type/StrikeCapabilityStatusMT.h"
#include "asb_uci/type/StrikeCapabilityStatusType.h"
#include "asb_uci/type/StrikeCapabilityType.h"
#include "asb_uci/type/StrikeCommandMT.h"
#include "asb_uci/type/StrikeCommandStatusMDT.h"
#include "asb_uci/type/StrikeCommandStatusMT.h"
#include "asb_uci/type/StrikeConsentRequestMT.h"
#include "asb_uci/type/StrikeConsentRequestStatusMDT.h"
#include "asb_uci/type/StrikeConsentRequestStatusMT.h"
#include "asb_uci/type/StrikeConsentRequestType.h"
#include "asb_uci/type/StrikeSettingsCommandMDT.h"
#include "asb_uci/type/StrikeSettingsCommandMT.h"
#include "asb_uci/type/StrikeSettingsCommandStatusMDT.h"
#include "asb_uci/type/StrikeSettingsCommandStatusMT.h"
#include "asb_uci/type/StrikeTaskAchievabilityAssessmentRequestType.h"
#include "asb_uci/type/StrikeTaskAchievabilityAssessmentType.h"
#include "asb_uci/type/StrikeTaskWeaponType.h"
#include "asb_uci/type/SubCapabilityID_Type.h"
#include "asb_uci/type/SubsystemBIT_CommandMDT.h"
#include "asb_uci/type/SubsystemBIT_CommandMT.h"
#include "asb_uci/type/SubsystemBIT_CommandStatusMDT.h"
#include "asb_uci/type/SubsystemBIT_CommandStatusMT.h"
#include "asb_uci/type/SubsystemBIT_ConfigurationID_Type.h"
#include "asb_uci/type/SubsystemBIT_ConfigurationMT.h"
#include "asb_uci/type/SubsystemBIT_StatusMT.h"
#include "asb_uci/type/SubsystemCalibrationCommandMDT.h"
#include "asb_uci/type/SubsystemCalibrationCommandMT.h"
#include "asb_uci/type/SubsystemCalibrationCommandStatusMDT.h"
#include "asb_uci/type/SubsystemCalibrationCommandStatusMT.h"
#include "asb_uci/type/SubsystemCalibrationConfigurationID_Type.h"
#include "asb_uci/type/SubsystemCalibrationConfigurationMT.h"
#include "asb_uci/type/SubsystemCalibrationStatusMT.h"
#include "asb_uci/type/SubsystemCommandStatusBaseType.h"
#include "asb_uci/type/SubsystemConfigurationDataRequestMDT.h"
#include "asb_uci/type/SubsystemConfigurationDataRequestMT.h"
#include "asb_uci/type/SubsystemConfigurationDataRequestStatusMDT.h"
#include "asb_uci/type/SubsystemConfigurationDataRequestStatusMT.h"
#include "asb_uci/type/SubsystemConfigurationID_Type.h"
#include "asb_uci/type/SubsystemConfigurationMT.h"
#include "asb_uci/type/SubsystemEraseCommandMDT.h"
#include "asb_uci/type/SubsystemEraseCommandMT.h"
#include "asb_uci/type/SubsystemEraseCommandStatusMDT.h"
#include "asb_uci/type/SubsystemEraseCommandStatusMT.h"
#include "asb_uci/type/SubsystemExtendedStatusPET.h"
#include "asb_uci/type/SubsystemID_Type.h"
#include "asb_uci/type/SubsystemMaintenanceCommandMDT.h"
#include "asb_uci/type/SubsystemMaintenanceCommandMT.h"
#include "asb_uci/type/SubsystemMaintenanceCommandStatusMDT.h"
#include "asb_uci/type/SubsystemMaintenanceCommandStatusMT.h"
#include "asb_uci/type/SubsystemMaintenanceConfigurationID_Type.h"
#include "asb_uci/type/SubsystemMaintenanceConfigurationMT.h"
#include "asb_uci/type/SubsystemMaintenanceID_Type.h"
#include "asb_uci/type/SubsystemMaintenanceStatusMT.h"
#include "asb_uci/type/SubsystemMaintenanceTestCommandPET.h"
#include "asb_uci/type/SubsystemMaintenanceTestCommandType.h"
#include "asb_uci/type/SubsystemMaintenanceTestPET.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/STANAG_4607_PackingPlanPET.h"
#include "uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "uci/type/STANAG_4607_PackingPlanType.h"
#include "uci/type/SpecialCodeDataLinkIdentifierType.h"
#include "uci/type/SpecificBlueSeparationType.h"
#include "uci/type/SpecificEmitterIdentityConfidenceType.h"
#include "uci/type/SpecificEmitterIdentityType.h"
#include "uci/type/SpecificIdentityConfidenceType.h"
#include "uci/type/SpecificIdentityType.h"
#include "uci/type/SpecificRedSeparationType.h"
#include "uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "uci/type/SpectralDensityReportID_Type.h"
#include "uci/type/SpectralDensityReportMT.h"
#include "uci/type/StandardIdentityConfidenceType.h"
#include "uci/type/StandardIdentityType.h"
#include "uci/type/StateCovarianceNED_Type.h"
#include "uci/type/StoreCarriageCapabilityStatusBaseType.h"
#include "uci/type/StoreCarriageCapabilityStatusMT.h"
#include "uci/type/StoreCarriageCapabilityStatusType.h"
#include "uci/type/StoreCarriageStatusType.h"
#include "uci/type/StoreInformationBaseType.h"
#include "uci/type/StoreInformationType.h"
#include "uci/type/StoreLoadoutConfigurationID_Type.h"
#include "uci/type/StoreLoadoutConfigurationMT.h"
#include "uci/type/StoreLoadoutItemPET.h"
#include "uci/type/StoreLoadoutItemType.h"
#include "uci/type/StoreManagementCommandMT.h"
#include "uci/type/StoreManagementCommandStatusMDT.h"
#include "uci/type/StoreManagementCommandStatusMT.h"
#include "uci/type/StoreManagementCommandType.h"
#include "uci/type/StoreManagementReportID_Type.h"
#include "uci/type/StoreManagementReportMT.h"
#include "uci/type/StoreManagementStatusMDT.h"
#include "uci/type/StoreManagementStatusMT.h"
#include "uci/type/StoreStatusBaseType.h"
#include "uci/type/StoreStatusType.h"
#include "uci/type/StoreType.h"
#include "uci/type/StrikeActivityCommandType.h"
#include "uci/type/StrikeActivityMT.h"
#include "uci/type/StrikeActivityType.h"
#include "uci/type/StrikeCapabilityCommandType.h"
#include "uci/type/StrikeCapabilityMDT.h"
#include "uci/type/StrikeCapabilityMT.h"
#include "uci/type/StrikeCapabilityStatusMDT.h"
#include "uci/type/StrikeCapabilityStatusMT.h"
#include "uci/type/StrikeCapabilityStatusType.h"
#include "uci/type/StrikeCapabilityType.h"
#include "uci/type/StrikeCommandMT.h"
#include "uci/type/StrikeCommandStatusMDT.h"
#include "uci/type/StrikeCommandStatusMT.h"
#include "uci/type/StrikeConsentRequestMT.h"
#include "uci/type/StrikeConsentRequestStatusMDT.h"
#include "uci/type/StrikeConsentRequestStatusMT.h"
#include "uci/type/StrikeConsentRequestType.h"
#include "uci/type/StrikeSettingsCommandMDT.h"
#include "uci/type/StrikeSettingsCommandMT.h"
#include "uci/type/StrikeSettingsCommandStatusMDT.h"
#include "uci/type/StrikeSettingsCommandStatusMT.h"
#include "uci/type/StrikeTaskAchievabilityAssessmentRequestType.h"
#include "uci/type/StrikeTaskAchievabilityAssessmentType.h"
#include "uci/type/StrikeTaskWeaponType.h"
#include "uci/type/SubCapabilityID_Type.h"
#include "uci/type/SubsystemBIT_CommandMDT.h"
#include "uci/type/SubsystemBIT_CommandMT.h"
#include "uci/type/SubsystemBIT_CommandStatusMDT.h"
#include "uci/type/SubsystemBIT_CommandStatusMT.h"
#include "uci/type/SubsystemBIT_ConfigurationID_Type.h"
#include "uci/type/SubsystemBIT_ConfigurationMT.h"
#include "uci/type/SubsystemBIT_StatusMT.h"
#include "uci/type/SubsystemCalibrationCommandMDT.h"
#include "uci/type/SubsystemCalibrationCommandMT.h"
#include "uci/type/SubsystemCalibrationCommandStatusMDT.h"
#include "uci/type/SubsystemCalibrationCommandStatusMT.h"
#include "uci/type/SubsystemCalibrationConfigurationID_Type.h"
#include "uci/type/SubsystemCalibrationConfigurationMT.h"
#include "uci/type/SubsystemCalibrationStatusMT.h"
#include "uci/type/SubsystemCommandStatusBaseType.h"
#include "uci/type/SubsystemConfigurationDataRequestMDT.h"
#include "uci/type/SubsystemConfigurationDataRequestMT.h"
#include "uci/type/SubsystemConfigurationDataRequestStatusMDT.h"
#include "uci/type/SubsystemConfigurationDataRequestStatusMT.h"
#include "uci/type/SubsystemConfigurationID_Type.h"
#include "uci/type/SubsystemConfigurationMT.h"
#include "uci/type/SubsystemEraseCommandMDT.h"
#include "uci/type/SubsystemEraseCommandMT.h"
#include "uci/type/SubsystemEraseCommandStatusMDT.h"
#include "uci/type/SubsystemEraseCommandStatusMT.h"
#include "uci/type/SubsystemExtendedStatusPET.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemMaintenanceCommandMDT.h"
#include "uci/type/SubsystemMaintenanceCommandMT.h"
#include "uci/type/SubsystemMaintenanceCommandStatusMDT.h"
#include "uci/type/SubsystemMaintenanceCommandStatusMT.h"
#include "uci/type/SubsystemMaintenanceConfigurationID_Type.h"
#include "uci/type/SubsystemMaintenanceConfigurationMT.h"
#include "uci/type/SubsystemMaintenanceID_Type.h"
#include "uci/type/SubsystemMaintenanceStatusMT.h"
#include "uci/type/SubsystemMaintenanceTestCommandPET.h"
#include "uci/type/SubsystemMaintenanceTestCommandType.h"
#include "uci/type/SubsystemMaintenanceTestPET.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

bool DerivedTypesDeserializer18::deserialize(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::specialCodeDataLinkIdentifierType:
      asb_uci::type::SpecialCodeDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::SpecialCodeDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificBlueSeparationType:
      asb_uci::type::SpecificBlueSeparationType::deserialize(propTree, dynamic_cast<uci::type::SpecificBlueSeparationType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificEmitterIdentityConfidenceType:
      asb_uci::type::SpecificEmitterIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificEmitterIdentityType:
      asb_uci::type::SpecificEmitterIdentityType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificIdentityConfidenceType:
      asb_uci::type::SpecificIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificIdentityType:
      asb_uci::type::SpecificIdentityType::deserialize(propTree, dynamic_cast<uci::type::SpecificIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificRedSeparationType:
      asb_uci::type::SpecificRedSeparationType::deserialize(propTree, dynamic_cast<uci::type::SpecificRedSeparationType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::specificVehicleIdentityConfidenceType:
      asb_uci::type::SpecificVehicleIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificVehicleIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::spectralDensityReportID_Type:
      asb_uci::type::SpectralDensityReportID_Type::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::spectralDensityReportMT:
      asb_uci::type::SpectralDensityReportMT::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::sTANAG_4607_PackingPlanPET:
      asb_uci::type::STANAG_4607_PackingPlanPET::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::sTANAG_4607_PackingPlanRevA_Type:
      asb_uci::type::STANAG_4607_PackingPlanRevA_Type::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanRevA_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::sTANAG_4607_PackingPlanType:
      asb_uci::type::STANAG_4607_PackingPlanType::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::standardIdentityConfidenceType:
      asb_uci::type::StandardIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::standardIdentityType:
      asb_uci::type::StandardIdentityType::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::stateCovarianceNED_Type:
      asb_uci::type::StateCovarianceNED_Type::deserialize(propTree, dynamic_cast<uci::type::StateCovarianceNED_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeCarriageCapabilityStatusBaseType:
      asb_uci::type::StoreCarriageCapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeCarriageCapabilityStatusMT:
      asb_uci::type::StoreCarriageCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeCarriageCapabilityStatusType:
      asb_uci::type::StoreCarriageCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeCarriageStatusType:
      asb_uci::type::StoreCarriageStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeInformationBaseType:
      asb_uci::type::StoreInformationBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreInformationBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeInformationType:
      asb_uci::type::StoreInformationType::deserialize(propTree, dynamic_cast<uci::type::StoreInformationType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeLoadoutConfigurationID_Type:
      asb_uci::type::StoreLoadoutConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeLoadoutConfigurationMT:
      asb_uci::type::StoreLoadoutConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeLoadoutItemPET:
      asb_uci::type::StoreLoadoutItemPET::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutItemPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeLoadoutItemType:
      asb_uci::type::StoreLoadoutItemType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutItemType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementCommandMT:
      asb_uci::type::StoreManagementCommandMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementCommandStatusMDT:
      asb_uci::type::StoreManagementCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementCommandStatusMT:
      asb_uci::type::StoreManagementCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementCommandType:
      asb_uci::type::StoreManagementCommandType::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementReportID_Type:
      asb_uci::type::StoreManagementReportID_Type::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementReportMT:
      asb_uci::type::StoreManagementReportMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementStatusMDT:
      asb_uci::type::StoreManagementStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeManagementStatusMT:
      asb_uci::type::StoreManagementStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeStatusBaseType:
      asb_uci::type::StoreStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeStatusType:
      asb_uci::type::StoreStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::storeType:
      asb_uci::type::StoreType::deserialize(propTree, dynamic_cast<uci::type::StoreType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeActivityCommandType:
      asb_uci::type::StrikeActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeActivityMT:
      asb_uci::type::StrikeActivityMT::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeActivityType:
      asb_uci::type::StrikeActivityType::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityCommandType:
      asb_uci::type::StrikeCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityMDT:
      asb_uci::type::StrikeCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityMT:
      asb_uci::type::StrikeCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityStatusMDT:
      asb_uci::type::StrikeCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityStatusMT:
      asb_uci::type::StrikeCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityStatusType:
      asb_uci::type::StrikeCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCapabilityType:
      asb_uci::type::StrikeCapabilityType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCommandMT:
      asb_uci::type::StrikeCommandMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCommandStatusMDT:
      asb_uci::type::StrikeCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeCommandStatusMT:
      asb_uci::type::StrikeCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeConsentRequestMT:
      asb_uci::type::StrikeConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeConsentRequestStatusMDT:
      asb_uci::type::StrikeConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeConsentRequestStatusMT:
      asb_uci::type::StrikeConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeConsentRequestType:
      asb_uci::type::StrikeConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeSettingsCommandMDT:
      asb_uci::type::StrikeSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeSettingsCommandMT:
      asb_uci::type::StrikeSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeSettingsCommandStatusMDT:
      asb_uci::type::StrikeSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeSettingsCommandStatusMT:
      asb_uci::type::StrikeSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeTaskAchievabilityAssessmentRequestType:
      asb_uci::type::StrikeTaskAchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskAchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeTaskAchievabilityAssessmentType:
      asb_uci::type::StrikeTaskAchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskAchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::strikeTaskWeaponType:
      asb_uci::type::StrikeTaskWeaponType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskWeaponType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subCapabilityID_Type:
      asb_uci::type::SubCapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::SubCapabilityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_CommandMDT:
      asb_uci::type::SubsystemBIT_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_CommandMT:
      asb_uci::type::SubsystemBIT_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_CommandStatusMDT:
      asb_uci::type::SubsystemBIT_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_CommandStatusMT:
      asb_uci::type::SubsystemBIT_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_ConfigurationID_Type:
      asb_uci::type::SubsystemBIT_ConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_ConfigurationMT:
      asb_uci::type::SubsystemBIT_ConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemBIT_StatusMT:
      asb_uci::type::SubsystemBIT_StatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_StatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationCommandMDT:
      asb_uci::type::SubsystemCalibrationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationCommandMT:
      asb_uci::type::SubsystemCalibrationCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationCommandStatusMDT:
      asb_uci::type::SubsystemCalibrationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationCommandStatusMT:
      asb_uci::type::SubsystemCalibrationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationConfigurationID_Type:
      asb_uci::type::SubsystemCalibrationConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationConfigurationMT:
      asb_uci::type::SubsystemCalibrationConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCalibrationStatusMT:
      asb_uci::type::SubsystemCalibrationStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemCommandStatusBaseType:
      asb_uci::type::SubsystemCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemConfigurationDataRequestMDT:
      asb_uci::type::SubsystemConfigurationDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemConfigurationDataRequestMT:
      asb_uci::type::SubsystemConfigurationDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemConfigurationDataRequestStatusMDT:
      asb_uci::type::SubsystemConfigurationDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemConfigurationDataRequestStatusMT:
      asb_uci::type::SubsystemConfigurationDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemConfigurationID_Type:
      asb_uci::type::SubsystemConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemConfigurationMT:
      asb_uci::type::SubsystemConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemEraseCommandMDT:
      asb_uci::type::SubsystemEraseCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemEraseCommandMT:
      asb_uci::type::SubsystemEraseCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemEraseCommandStatusMDT:
      asb_uci::type::SubsystemEraseCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemEraseCommandStatusMT:
      asb_uci::type::SubsystemEraseCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemExtendedStatusPET:
      asb_uci::type::SubsystemExtendedStatusPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemExtendedStatusPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemID_Type:
      asb_uci::type::SubsystemID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceCommandMDT:
      asb_uci::type::SubsystemMaintenanceCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceCommandMT:
      asb_uci::type::SubsystemMaintenanceCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceCommandStatusMDT:
      asb_uci::type::SubsystemMaintenanceCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceCommandStatusMT:
      asb_uci::type::SubsystemMaintenanceCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceConfigurationID_Type:
      asb_uci::type::SubsystemMaintenanceConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceConfigurationMT:
      asb_uci::type::SubsystemMaintenanceConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceID_Type:
      asb_uci::type::SubsystemMaintenanceID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceStatusMT:
      asb_uci::type::SubsystemMaintenanceStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceTestCommandPET:
      asb_uci::type::SubsystemMaintenanceTestCommandPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestCommandPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceTestCommandType:
      asb_uci::type::SubsystemMaintenanceTestCommandType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::subsystemMaintenanceTestPET:
      asb_uci::type::SubsystemMaintenanceTestPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestPET&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    default:
      return false;
  }
}

} // namespace util

} // namespace asb_uci

