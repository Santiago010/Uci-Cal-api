/** @file DerivedTypesCopier20.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesCopier20.h"

#include "asb_uci/type/TLE_BaseType.h"
#include "asb_uci/type/TLE_Type.h"
#include "asb_uci/type/TLE_WithParametersType.h"
#include "asb_uci/type/TagAssociationMT.h"
#include "asb_uci/type/TaskAchievabilityAssessmentPET.h"
#include "asb_uci/type/TaskAchievabilityAssessmentRequestPET.h"
#include "asb_uci/type/TaskAllocationType.h"
#include "asb_uci/type/TaskCancelCommandMDT.h"
#include "asb_uci/type/TaskCancelCommandMT.h"
#include "asb_uci/type/TaskCancelCommandStatusMDT.h"
#include "asb_uci/type/TaskCancelCommandStatusMT.h"
#include "asb_uci/type/TaskCapabilityCommandType.h"
#include "asb_uci/type/TaskCommandMT.h"
#include "asb_uci/type/TaskCommandStatusMDT.h"
#include "asb_uci/type/TaskCommandStatusMT.h"
#include "asb_uci/type/TaskExecutionApprovalStatusMDT.h"
#include "asb_uci/type/TaskExecutionApprovalStatusMT.h"
#include "asb_uci/type/TaskID_Type.h"
#include "asb_uci/type/TaskMT.h"
#include "asb_uci/type/TaskPlanApprovalStatusMT.h"
#include "asb_uci/type/TaskPlanCommandID_Type.h"
#include "asb_uci/type/TaskPlanCommandMT.h"
#include "asb_uci/type/TaskPlanCommandStatusMT.h"
#include "asb_uci/type/TaskPlanExecutionStatusMT.h"
#include "asb_uci/type/TaskPlanID_Type.h"
#include "asb_uci/type/TaskPlanInputsType.h"
#include "asb_uci/type/TaskPlanMT.h"
#include "asb_uci/type/TaskPlanProcessDescriptionType.h"
#include "asb_uci/type/TaskPlanStatusMT.h"
#include "asb_uci/type/TaskPlanValidationCommandMDT.h"
#include "asb_uci/type/TaskPlanValidationCommandMT.h"
#include "asb_uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "asb_uci/type/TaskPlanValidationCommandStatusMT.h"
#include "asb_uci/type/TaskPlanValidationID_Type.h"
#include "asb_uci/type/TaskPlanValidationInputsType.h"
#include "asb_uci/type/TaskPlanValidationMT.h"
#include "asb_uci/type/TaskPlanningResultType.h"
#include "asb_uci/type/TaskPlanningStatusMDT.h"
#include "asb_uci/type/TaskPlanningStatusMT.h"
#include "asb_uci/type/TaskStatusMDT.h"
#include "asb_uci/type/TaskStatusMT.h"
#include "asb_uci/type/TemperatureStatusType.h"
#include "asb_uci/type/ThreatAssessmentRequestType.h"
#include "asb_uci/type/TimeAndPolarDataType.h"
#include "asb_uci/type/TimeAndPolarRecordType.h"
#include "asb_uci/type/TimedZoneType.h"
#include "asb_uci/type/TrackOptionsID_Type.h"
#include "asb_uci/type/TrackingOpZoneFilterAreaType.h"
#include "asb_uci/type/TurretCommandMT.h"
#include "asb_uci/type/TurretCommandStatusMDT.h"
#include "asb_uci/type/TurretCommandStatusMT.h"
#include "asb_uci/type/TurretCommandType.h"
#include "asb_uci/type/TurretReportID_Type.h"
#include "asb_uci/type/TurretReportMT.h"
#include "asb_uci/type/TurretStatusMDT.h"
#include "asb_uci/type/TurretStatusMT.h"
#include "asb_uci/type/UMID_AudioID_Type.h"
#include "asb_uci/type/UMID_DataID_Type.h"
#include "asb_uci/type/UMID_SystemID_Type.h"
#include "asb_uci/type/UMID_VideoID_Type.h"
#include "asb_uci/type/UnallocatedReasonType.h"
#include "asb_uci/type/UnitID_Type.h"
#include "asb_uci/type/UnitVectorType.h"
#include "asb_uci/type/UnsignedIntegerMinMaxType.h"
#include "asb_uci/type/ValidationCommandBaseType.h"
#include "asb_uci/type/ValidationCommandStatusBaseType.h"
#include "asb_uci/type/ValveDataStatusType.h"
#include "asb_uci/type/VehicleConfigurationType.h"
#include "asb_uci/type/VehicleIdentificationType.h"
#include "asb_uci/type/Velocity2D_Type.h"
#include "asb_uci/type/Velocity2D_UncertaintyType.h"
#include "asb_uci/type/VersionedID_Type.h"
#include "asb_uci/type/VideoAugmentationParametersType.h"
#include "asb_uci/type/WeaponeeringLocationType.h"
#include "asb_uci/type/WeaponeeringStoreType.h"
#include "asb_uci/type/WeaponeeringTargetType.h"
#include "asb_uci/type/WeaponeeringType.h"
#include "asb_uci/type/WeatherAugmentationParametersType.h"
#include "asb_uci/type/WeatherDatasetID_Type.h"
#include "asb_uci/type/WeatherDatasetMDT.h"
#include "asb_uci/type/WeatherDatasetMT.h"
#include "asb_uci/type/WeatherMT.h"
#include "asb_uci/type/WeatherObservationMT.h"
#include "asb_uci/type/WeatherRadarActivityMT.h"
#include "asb_uci/type/WeatherRadarActivityType.h"
#include "asb_uci/type/WeatherRadarCapabilityCommandType.h"
#include "asb_uci/type/WeatherRadarCapabilityMDT.h"
#include "asb_uci/type/WeatherRadarCapabilityMT.h"
#include "asb_uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "asb_uci/type/WeatherRadarCapabilityStatusMT.h"
#include "asb_uci/type/WeatherRadarCapabilityType.h"
#include "asb_uci/type/WeatherRadarCommandMT.h"
#include "asb_uci/type/WeatherRadarCommandStatusMDT.h"
#include "asb_uci/type/WeatherRadarCommandStatusMT.h"
#include "asb_uci/type/WeatherRadarObservationMT.h"
#include "asb_uci/type/WeatherRadarSettingsCommandMDT.h"
#include "asb_uci/type/WeatherRadarSettingsCommandMT.h"
#include "asb_uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "asb_uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "asb_uci/type/WeatherReportGridDataType.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/TLE_BaseType.h"
#include "uci/type/TLE_Type.h"
#include "uci/type/TLE_WithParametersType.h"
#include "uci/type/TagAssociationMT.h"
#include "uci/type/TaskAchievabilityAssessmentPET.h"
#include "uci/type/TaskAchievabilityAssessmentRequestPET.h"
#include "uci/type/TaskAllocationType.h"
#include "uci/type/TaskCancelCommandMDT.h"
#include "uci/type/TaskCancelCommandMT.h"
#include "uci/type/TaskCancelCommandStatusMDT.h"
#include "uci/type/TaskCancelCommandStatusMT.h"
#include "uci/type/TaskCapabilityCommandType.h"
#include "uci/type/TaskCommandMT.h"
#include "uci/type/TaskCommandStatusMDT.h"
#include "uci/type/TaskCommandStatusMT.h"
#include "uci/type/TaskExecutionApprovalStatusMDT.h"
#include "uci/type/TaskExecutionApprovalStatusMT.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/TaskMT.h"
#include "uci/type/TaskPlanApprovalStatusMT.h"
#include "uci/type/TaskPlanCommandID_Type.h"
#include "uci/type/TaskPlanCommandMT.h"
#include "uci/type/TaskPlanCommandStatusMT.h"
#include "uci/type/TaskPlanExecutionStatusMT.h"
#include "uci/type/TaskPlanID_Type.h"
#include "uci/type/TaskPlanInputsType.h"
#include "uci/type/TaskPlanMT.h"
#include "uci/type/TaskPlanProcessDescriptionType.h"
#include "uci/type/TaskPlanStatusMT.h"
#include "uci/type/TaskPlanValidationCommandMDT.h"
#include "uci/type/TaskPlanValidationCommandMT.h"
#include "uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "uci/type/TaskPlanValidationCommandStatusMT.h"
#include "uci/type/TaskPlanValidationID_Type.h"
#include "uci/type/TaskPlanValidationInputsType.h"
#include "uci/type/TaskPlanValidationMT.h"
#include "uci/type/TaskPlanningResultType.h"
#include "uci/type/TaskPlanningStatusMDT.h"
#include "uci/type/TaskPlanningStatusMT.h"
#include "uci/type/TaskStatusMDT.h"
#include "uci/type/TaskStatusMT.h"
#include "uci/type/TemperatureStatusType.h"
#include "uci/type/ThreatAssessmentRequestType.h"
#include "uci/type/TimeAndPolarDataType.h"
#include "uci/type/TimeAndPolarRecordType.h"
#include "uci/type/TimedZoneType.h"
#include "uci/type/TrackOptionsID_Type.h"
#include "uci/type/TrackingOpZoneFilterAreaType.h"
#include "uci/type/TurretCommandMT.h"
#include "uci/type/TurretCommandStatusMDT.h"
#include "uci/type/TurretCommandStatusMT.h"
#include "uci/type/TurretCommandType.h"
#include "uci/type/TurretReportID_Type.h"
#include "uci/type/TurretReportMT.h"
#include "uci/type/TurretStatusMDT.h"
#include "uci/type/TurretStatusMT.h"
#include "uci/type/UMID_AudioID_Type.h"
#include "uci/type/UMID_DataID_Type.h"
#include "uci/type/UMID_SystemID_Type.h"
#include "uci/type/UMID_VideoID_Type.h"
#include "uci/type/UnallocatedReasonType.h"
#include "uci/type/UnitID_Type.h"
#include "uci/type/UnitVectorType.h"
#include "uci/type/UnsignedIntegerMinMaxType.h"
#include "uci/type/ValidationCommandBaseType.h"
#include "uci/type/ValidationCommandStatusBaseType.h"
#include "uci/type/ValveDataStatusType.h"
#include "uci/type/VehicleConfigurationType.h"
#include "uci/type/VehicleIdentificationType.h"
#include "uci/type/Velocity2D_Type.h"
#include "uci/type/Velocity2D_UncertaintyType.h"
#include "uci/type/VersionedID_Type.h"
#include "uci/type/VideoAugmentationParametersType.h"
#include "uci/type/WeaponeeringLocationType.h"
#include "uci/type/WeaponeeringStoreType.h"
#include "uci/type/WeaponeeringTargetType.h"
#include "uci/type/WeaponeeringType.h"
#include "uci/type/WeatherAugmentationParametersType.h"
#include "uci/type/WeatherDatasetID_Type.h"
#include "uci/type/WeatherDatasetMDT.h"
#include "uci/type/WeatherDatasetMT.h"
#include "uci/type/WeatherMT.h"
#include "uci/type/WeatherObservationMT.h"
#include "uci/type/WeatherRadarActivityMT.h"
#include "uci/type/WeatherRadarActivityType.h"
#include "uci/type/WeatherRadarCapabilityCommandType.h"
#include "uci/type/WeatherRadarCapabilityMDT.h"
#include "uci/type/WeatherRadarCapabilityMT.h"
#include "uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "uci/type/WeatherRadarCapabilityStatusMT.h"
#include "uci/type/WeatherRadarCapabilityType.h"
#include "uci/type/WeatherRadarCommandMT.h"
#include "uci/type/WeatherRadarCommandStatusMDT.h"
#include "uci/type/WeatherRadarCommandStatusMT.h"
#include "uci/type/WeatherRadarObservationMT.h"
#include "uci/type/WeatherRadarSettingsCommandMDT.h"
#include "uci/type/WeatherRadarSettingsCommandMT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "uci/type/WeatherReportGridDataType.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

bool DerivedTypesCopier20::copy(const uci::base::Accessor& source, uci::base::Accessor& destination) {
  switch (source.getAccessorType()) {
    case uci::type::accessorType::tagAssociationMT:
      dynamic_cast<asb_uci::type::TagAssociationMT&>(destination).copyImpl(dynamic_cast<const uci::type::TagAssociationMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskAchievabilityAssessmentPET:
      dynamic_cast<asb_uci::type::TaskAchievabilityAssessmentPET&>(destination).copyImpl(dynamic_cast<const uci::type::TaskAchievabilityAssessmentPET&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskAchievabilityAssessmentRequestPET:
      dynamic_cast<asb_uci::type::TaskAchievabilityAssessmentRequestPET&>(destination).copyImpl(dynamic_cast<const uci::type::TaskAchievabilityAssessmentRequestPET&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskAllocationType:
      dynamic_cast<asb_uci::type::TaskAllocationType&>(destination).copyImpl(dynamic_cast<const uci::type::TaskAllocationType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCancelCommandMDT:
      dynamic_cast<asb_uci::type::TaskCancelCommandMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCancelCommandMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCancelCommandMT:
      dynamic_cast<asb_uci::type::TaskCancelCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCancelCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCancelCommandStatusMDT:
      dynamic_cast<asb_uci::type::TaskCancelCommandStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCancelCommandStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCancelCommandStatusMT:
      dynamic_cast<asb_uci::type::TaskCancelCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCancelCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCapabilityCommandType:
      dynamic_cast<asb_uci::type::TaskCapabilityCommandType&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCapabilityCommandType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCommandMT:
      dynamic_cast<asb_uci::type::TaskCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCommandStatusMDT:
      dynamic_cast<asb_uci::type::TaskCommandStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCommandStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskCommandStatusMT:
      dynamic_cast<asb_uci::type::TaskCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskExecutionApprovalStatusMDT:
      dynamic_cast<asb_uci::type::TaskExecutionApprovalStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskExecutionApprovalStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskExecutionApprovalStatusMT:
      dynamic_cast<asb_uci::type::TaskExecutionApprovalStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskExecutionApprovalStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskID_Type:
      dynamic_cast<asb_uci::type::TaskID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TaskID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskMT:
      dynamic_cast<asb_uci::type::TaskMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanApprovalStatusMT:
      dynamic_cast<asb_uci::type::TaskPlanApprovalStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanApprovalStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanCommandID_Type:
      dynamic_cast<asb_uci::type::TaskPlanCommandID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanCommandID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanCommandMT:
      dynamic_cast<asb_uci::type::TaskPlanCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanCommandStatusMT:
      dynamic_cast<asb_uci::type::TaskPlanCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanExecutionStatusMT:
      dynamic_cast<asb_uci::type::TaskPlanExecutionStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanExecutionStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanID_Type:
      dynamic_cast<asb_uci::type::TaskPlanID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanInputsType:
      dynamic_cast<asb_uci::type::TaskPlanInputsType&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanInputsType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanMT:
      dynamic_cast<asb_uci::type::TaskPlanMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanningResultType:
      dynamic_cast<asb_uci::type::TaskPlanningResultType&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanningResultType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanningStatusMDT:
      dynamic_cast<asb_uci::type::TaskPlanningStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanningStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanningStatusMT:
      dynamic_cast<asb_uci::type::TaskPlanningStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanningStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanProcessDescriptionType:
      dynamic_cast<asb_uci::type::TaskPlanProcessDescriptionType&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanProcessDescriptionType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanStatusMT:
      dynamic_cast<asb_uci::type::TaskPlanStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationCommandMDT:
      dynamic_cast<asb_uci::type::TaskPlanValidationCommandMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationCommandMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationCommandMT:
      dynamic_cast<asb_uci::type::TaskPlanValidationCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationCommandStatusMDT:
      dynamic_cast<asb_uci::type::TaskPlanValidationCommandStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationCommandStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationCommandStatusMT:
      dynamic_cast<asb_uci::type::TaskPlanValidationCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationID_Type:
      dynamic_cast<asb_uci::type::TaskPlanValidationID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationInputsType:
      dynamic_cast<asb_uci::type::TaskPlanValidationInputsType&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationInputsType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskPlanValidationMT:
      dynamic_cast<asb_uci::type::TaskPlanValidationMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskPlanValidationMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskStatusMDT:
      dynamic_cast<asb_uci::type::TaskStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::taskStatusMT:
      dynamic_cast<asb_uci::type::TaskStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TaskStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::temperatureStatusType:
      dynamic_cast<asb_uci::type::TemperatureStatusType&>(destination).copyImpl(dynamic_cast<const uci::type::TemperatureStatusType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::threatAssessmentRequestType:
      dynamic_cast<asb_uci::type::ThreatAssessmentRequestType&>(destination).copyImpl(dynamic_cast<const uci::type::ThreatAssessmentRequestType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::timeAndPolarDataType:
      dynamic_cast<asb_uci::type::TimeAndPolarDataType&>(destination).copyImpl(dynamic_cast<const uci::type::TimeAndPolarDataType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::timeAndPolarRecordType:
      dynamic_cast<asb_uci::type::TimeAndPolarRecordType&>(destination).copyImpl(dynamic_cast<const uci::type::TimeAndPolarRecordType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::timedZoneType:
      dynamic_cast<asb_uci::type::TimedZoneType&>(destination).copyImpl(dynamic_cast<const uci::type::TimedZoneType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::tLE_BaseType:
      dynamic_cast<asb_uci::type::TLE_BaseType&>(destination).copyImpl(dynamic_cast<const uci::type::TLE_BaseType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::tLE_Type:
      dynamic_cast<asb_uci::type::TLE_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TLE_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::tLE_WithParametersType:
      dynamic_cast<asb_uci::type::TLE_WithParametersType&>(destination).copyImpl(dynamic_cast<const uci::type::TLE_WithParametersType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::trackingOpZoneFilterAreaType:
      dynamic_cast<asb_uci::type::TrackingOpZoneFilterAreaType&>(destination).copyImpl(dynamic_cast<const uci::type::TrackingOpZoneFilterAreaType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::trackOptionsID_Type:
      dynamic_cast<asb_uci::type::TrackOptionsID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TrackOptionsID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretCommandMT:
      dynamic_cast<asb_uci::type::TurretCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::TurretCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretCommandStatusMDT:
      dynamic_cast<asb_uci::type::TurretCommandStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TurretCommandStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretCommandStatusMT:
      dynamic_cast<asb_uci::type::TurretCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TurretCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretCommandType:
      dynamic_cast<asb_uci::type::TurretCommandType&>(destination).copyImpl(dynamic_cast<const uci::type::TurretCommandType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretReportID_Type:
      dynamic_cast<asb_uci::type::TurretReportID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::TurretReportID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretReportMT:
      dynamic_cast<asb_uci::type::TurretReportMT&>(destination).copyImpl(dynamic_cast<const uci::type::TurretReportMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretStatusMDT:
      dynamic_cast<asb_uci::type::TurretStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::TurretStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::turretStatusMT:
      dynamic_cast<asb_uci::type::TurretStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::TurretStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::uMID_AudioID_Type:
      dynamic_cast<asb_uci::type::UMID_AudioID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::UMID_AudioID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::uMID_DataID_Type:
      dynamic_cast<asb_uci::type::UMID_DataID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::UMID_DataID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::uMID_SystemID_Type:
      dynamic_cast<asb_uci::type::UMID_SystemID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::UMID_SystemID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::uMID_VideoID_Type:
      dynamic_cast<asb_uci::type::UMID_VideoID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::UMID_VideoID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::unallocatedReasonType:
      dynamic_cast<asb_uci::type::UnallocatedReasonType&>(destination).copyImpl(dynamic_cast<const uci::type::UnallocatedReasonType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::unitID_Type:
      dynamic_cast<asb_uci::type::UnitID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::UnitID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::unitVectorType:
      dynamic_cast<asb_uci::type::UnitVectorType&>(destination).copyImpl(dynamic_cast<const uci::type::UnitVectorType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::unsignedIntegerMinMaxType:
      dynamic_cast<asb_uci::type::UnsignedIntegerMinMaxType&>(destination).copyImpl(dynamic_cast<const uci::type::UnsignedIntegerMinMaxType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::validationCommandBaseType:
      dynamic_cast<asb_uci::type::ValidationCommandBaseType&>(destination).copyImpl(dynamic_cast<const uci::type::ValidationCommandBaseType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::validationCommandStatusBaseType:
      dynamic_cast<asb_uci::type::ValidationCommandStatusBaseType&>(destination).copyImpl(dynamic_cast<const uci::type::ValidationCommandStatusBaseType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::valveDataStatusType:
      dynamic_cast<asb_uci::type::ValveDataStatusType&>(destination).copyImpl(dynamic_cast<const uci::type::ValveDataStatusType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::vehicleConfigurationType:
      dynamic_cast<asb_uci::type::VehicleConfigurationType&>(destination).copyImpl(dynamic_cast<const uci::type::VehicleConfigurationType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::vehicleIdentificationType:
      dynamic_cast<asb_uci::type::VehicleIdentificationType&>(destination).copyImpl(dynamic_cast<const uci::type::VehicleIdentificationType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::velocity2D_Type:
      dynamic_cast<asb_uci::type::Velocity2D_Type&>(destination).copyImpl(dynamic_cast<const uci::type::Velocity2D_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::velocity2D_UncertaintyType:
      dynamic_cast<asb_uci::type::Velocity2D_UncertaintyType&>(destination).copyImpl(dynamic_cast<const uci::type::Velocity2D_UncertaintyType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::versionedID_Type:
      dynamic_cast<asb_uci::type::VersionedID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::VersionedID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::videoAugmentationParametersType:
      dynamic_cast<asb_uci::type::VideoAugmentationParametersType&>(destination).copyImpl(dynamic_cast<const uci::type::VideoAugmentationParametersType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weaponeeringLocationType:
      dynamic_cast<asb_uci::type::WeaponeeringLocationType&>(destination).copyImpl(dynamic_cast<const uci::type::WeaponeeringLocationType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weaponeeringStoreType:
      dynamic_cast<asb_uci::type::WeaponeeringStoreType&>(destination).copyImpl(dynamic_cast<const uci::type::WeaponeeringStoreType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weaponeeringTargetType:
      dynamic_cast<asb_uci::type::WeaponeeringTargetType&>(destination).copyImpl(dynamic_cast<const uci::type::WeaponeeringTargetType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weaponeeringType:
      dynamic_cast<asb_uci::type::WeaponeeringType&>(destination).copyImpl(dynamic_cast<const uci::type::WeaponeeringType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherAugmentationParametersType:
      dynamic_cast<asb_uci::type::WeatherAugmentationParametersType&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherAugmentationParametersType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherDatasetID_Type:
      dynamic_cast<asb_uci::type::WeatherDatasetID_Type&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherDatasetID_Type&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherDatasetMDT:
      dynamic_cast<asb_uci::type::WeatherDatasetMDT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherDatasetMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherDatasetMT:
      dynamic_cast<asb_uci::type::WeatherDatasetMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherDatasetMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherMT:
      dynamic_cast<asb_uci::type::WeatherMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherObservationMT:
      dynamic_cast<asb_uci::type::WeatherObservationMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherObservationMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarActivityMT:
      dynamic_cast<asb_uci::type::WeatherRadarActivityMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarActivityMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarActivityType:
      dynamic_cast<asb_uci::type::WeatherRadarActivityType&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarActivityType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCapabilityCommandType:
      dynamic_cast<asb_uci::type::WeatherRadarCapabilityCommandType&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCapabilityCommandType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCapabilityMDT:
      dynamic_cast<asb_uci::type::WeatherRadarCapabilityMDT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCapabilityMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCapabilityMT:
      dynamic_cast<asb_uci::type::WeatherRadarCapabilityMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCapabilityMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCapabilityStatusMDT:
      dynamic_cast<asb_uci::type::WeatherRadarCapabilityStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCapabilityStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCapabilityStatusMT:
      dynamic_cast<asb_uci::type::WeatherRadarCapabilityStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCapabilityStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCapabilityType:
      dynamic_cast<asb_uci::type::WeatherRadarCapabilityType&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCapabilityType&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCommandMT:
      dynamic_cast<asb_uci::type::WeatherRadarCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCommandStatusMDT:
      dynamic_cast<asb_uci::type::WeatherRadarCommandStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCommandStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarCommandStatusMT:
      dynamic_cast<asb_uci::type::WeatherRadarCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarObservationMT:
      dynamic_cast<asb_uci::type::WeatherRadarObservationMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarObservationMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarSettingsCommandMDT:
      dynamic_cast<asb_uci::type::WeatherRadarSettingsCommandMDT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarSettingsCommandMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarSettingsCommandMT:
      dynamic_cast<asb_uci::type::WeatherRadarSettingsCommandMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarSettingsCommandMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMDT:
      dynamic_cast<asb_uci::type::WeatherRadarSettingsCommandStatusMDT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarSettingsCommandStatusMDT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMT:
      dynamic_cast<asb_uci::type::WeatherRadarSettingsCommandStatusMT&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherRadarSettingsCommandStatusMT&>(source), false);
      return true;
      break;
    case uci::type::accessorType::weatherReportGridDataType:
      dynamic_cast<asb_uci::type::WeatherReportGridDataType&>(destination).copyImpl(dynamic_cast<const uci::type::WeatherReportGridDataType&>(source), false);
      return true;
      break;
    default:
      return false;
  }
}

} // namespace util

} // namespace asb_uci

