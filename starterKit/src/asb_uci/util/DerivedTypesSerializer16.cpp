/** @file DerivedTypesSerializer16.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer16.h"

#include <string>

#include <boost/none.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/RFD_ComponentIdentifierType.h"
#include "asb_uci/type/RF_ControlCommandMDT.h"
#include "asb_uci/type/RF_ControlCommandMT.h"
#include "asb_uci/type/RF_ControlCommandStatusMDT.h"
#include "asb_uci/type/RF_ControlCommandStatusMT.h"
#include "asb_uci/type/RF_ProfileID_Type.h"
#include "asb_uci/type/RF_ProfileMT.h"
#include "asb_uci/type/RF_ReportID_Type.h"
#include "asb_uci/type/RF_ReportMT.h"
#include "asb_uci/type/RF_ResourceAllocationID_Type.h"
#include "asb_uci/type/RF_ResourceAllocationMT.h"
#include "asb_uci/type/RF_ResourceAllocationRequestMDT.h"
#include "asb_uci/type/RF_ResourceAllocationRequestMT.h"
#include "asb_uci/type/RF_ResourceAllocationRequestStatusMDT.h"
#include "asb_uci/type/RF_ResourceAllocationRequestStatusMT.h"
#include "asb_uci/type/RF_ThreadInstanceSetupCommandMDT.h"
#include "asb_uci/type/RF_ThreadInstanceSetupCommandMT.h"
#include "asb_uci/type/RF_ThreadInstanceSetupCommandStatusMDT.h"
#include "asb_uci/type/RF_ThreadInstanceSetupCommandStatusMT.h"
#include "asb_uci/type/RSO_ApproachType.h"
#include "asb_uci/type/RSTA_FileTraceabilityType.h"
#include "asb_uci/type/RSTA_TraceabilityType.h"
#include "asb_uci/type/ResponsePlanValidationMT.h"
#include "asb_uci/type/ResponseStatusMDT.h"
#include "asb_uci/type/ResponseStatusMT.h"
#include "asb_uci/type/RouteActivityExecutionStatusType.h"
#include "asb_uci/type/RouteActivityPlanApprovalStatusMT.h"
#include "asb_uci/type/RouteActivityPlanCommandID_Type.h"
#include "asb_uci/type/RouteActivityPlanCommandMT.h"
#include "asb_uci/type/RouteActivityPlanCommandStatusMT.h"
#include "asb_uci/type/RouteActivityPlanExecutionStatusMT.h"
#include "asb_uci/type/RouteActivityPlanID_Type.h"
#include "asb_uci/type/RouteActivityPlanInputsType.h"
#include "asb_uci/type/RouteActivityPlanMT.h"
#include "asb_uci/type/RouteActivityPlanStatusMT.h"
#include "asb_uci/type/RouteActivityPlanStatusType.h"
#include "asb_uci/type/RouteActivityPlanValidationCommandMDT.h"
#include "asb_uci/type/RouteActivityPlanValidationCommandMT.h"
#include "asb_uci/type/RouteActivityPlanValidationCommandStatusMDT.h"
#include "asb_uci/type/RouteActivityPlanValidationCommandStatusMT.h"
#include "asb_uci/type/RouteActivityPlanValidationID_Type.h"
#include "asb_uci/type/RouteActivityPlanValidationInputsType.h"
#include "asb_uci/type/RouteActivityPlanValidationMT.h"
#include "asb_uci/type/RouteActivityType.h"
#include "asb_uci/type/RouteExecutionPlanSetType.h"
#include "asb_uci/type/RouteMetricsID_Type.h"
#include "asb_uci/type/RouteMetricsMT.h"
#include "asb_uci/type/RouteMetricsRequestMDT.h"
#include "asb_uci/type/RouteMetricsRequestMT.h"
#include "asb_uci/type/RouteMetricsRequestStatusMDT.h"
#include "asb_uci/type/RouteMetricsRequestStatusMT.h"
#include "asb_uci/type/RouteModificationRequestMDT.h"
#include "asb_uci/type/RouteModificationRequestMT.h"
#include "asb_uci/type/RouteModificationRequestStatusMDT.h"
#include "asb_uci/type/RouteModificationRequestStatusMT.h"
#include "asb_uci/type/RoutePlanApprovalStatusMT.h"
#include "asb_uci/type/RoutePlanCommandID_Type.h"
#include "asb_uci/type/RoutePlanCommandMT.h"
#include "asb_uci/type/RoutePlanCommandStatusMT.h"
#include "asb_uci/type/RoutePlanExecutionStatusMT.h"
#include "asb_uci/type/RoutePlanID_Type.h"
#include "asb_uci/type/RoutePlanInputsType.h"
#include "asb_uci/type/RoutePlanMT.h"
#include "asb_uci/type/RoutePlanProcessDescriptionType.h"
#include "asb_uci/type/RoutePlanStatusMT.h"
#include "asb_uci/type/RoutePlanStatusType.h"
#include "asb_uci/type/RoutePlanValidationCommandMDT.h"
#include "asb_uci/type/RoutePlanValidationCommandMT.h"
#include "asb_uci/type/RoutePlanValidationCommandStatusMDT.h"
#include "asb_uci/type/RoutePlanValidationCommandStatusMT.h"
#include "asb_uci/type/RoutePlanValidationID_Type.h"
#include "asb_uci/type/RoutePlanValidationInputsType.h"
#include "asb_uci/type/RoutePlanValidationMT.h"
#include "asb_uci/type/RoutePlanningCandidateType.h"
#include "asb_uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "asb_uci/type/RunwayID_Type.h"
#include "asb_uci/type/SAR_ActivityCommandType.h"
#include "asb_uci/type/SAR_ActivityMT.h"
#include "asb_uci/type/SAR_ActivityType.h"
#include "asb_uci/type/SAR_AutomaticTargetDetectionParametersType.h"
#include "asb_uci/type/SAR_CapabilityCommandType.h"
#include "asb_uci/type/SAR_CapabilityMDT.h"
#include "asb_uci/type/SAR_CapabilityMT.h"
#include "asb_uci/type/SAR_CapabilityStatusMDT.h"
#include "asb_uci/type/SAR_CapabilityStatusMT.h"
#include "asb_uci/type/SAR_CapabilityStatusType.h"
#include "asb_uci/type/SAR_CapabilityType.h"
#include "asb_uci/type/SAR_CoherentChangeDetectionParametersType.h"
#include "asb_uci/type/SAR_CollectionConstraintsType.h"
#include "asb_uci/type/SAR_CollectionOptionsType.h"
#include "asb_uci/type/SAR_CommandMT.h"
#include "asb_uci/type/SAR_CommandStatusMDT.h"
#include "asb_uci/type/SAR_CommandStatusMT.h"
#include "asb_uci/type/SAR_DynamicImageParametersType.h"
#include "asb_uci/type/SAR_ProcessingParametersType.h"
#include "asb_uci/type/SAR_SettingsCommandMDT.h"
#include "asb_uci/type/SAR_SettingsCommandMT.h"
#include "asb_uci/type/SAR_SettingsCommandStatusMDT.h"
#include "asb_uci/type/SAR_SettingsCommandStatusMT.h"
#include "asb_uci/type/SAR_TaskAchievabilityAssessmentRequestType.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/RFD_ComponentIdentifierType.h"
#include "uci/type/RF_ControlCommandMDT.h"
#include "uci/type/RF_ControlCommandMT.h"
#include "uci/type/RF_ControlCommandStatusMDT.h"
#include "uci/type/RF_ControlCommandStatusMT.h"
#include "uci/type/RF_ProfileID_Type.h"
#include "uci/type/RF_ProfileMT.h"
#include "uci/type/RF_ReportID_Type.h"
#include "uci/type/RF_ReportMT.h"
#include "uci/type/RF_ResourceAllocationID_Type.h"
#include "uci/type/RF_ResourceAllocationMT.h"
#include "uci/type/RF_ResourceAllocationRequestMDT.h"
#include "uci/type/RF_ResourceAllocationRequestMT.h"
#include "uci/type/RF_ResourceAllocationRequestStatusMDT.h"
#include "uci/type/RF_ResourceAllocationRequestStatusMT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandMDT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandMT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandStatusMDT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandStatusMT.h"
#include "uci/type/RSO_ApproachType.h"
#include "uci/type/RSTA_FileTraceabilityType.h"
#include "uci/type/RSTA_TraceabilityType.h"
#include "uci/type/ResponsePlanValidationMT.h"
#include "uci/type/ResponseStatusMDT.h"
#include "uci/type/ResponseStatusMT.h"
#include "uci/type/RouteActivityExecutionStatusType.h"
#include "uci/type/RouteActivityPlanApprovalStatusMT.h"
#include "uci/type/RouteActivityPlanCommandID_Type.h"
#include "uci/type/RouteActivityPlanCommandMT.h"
#include "uci/type/RouteActivityPlanCommandStatusMT.h"
#include "uci/type/RouteActivityPlanExecutionStatusMT.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanInputsType.h"
#include "uci/type/RouteActivityPlanMT.h"
#include "uci/type/RouteActivityPlanStatusMT.h"
#include "uci/type/RouteActivityPlanStatusType.h"
#include "uci/type/RouteActivityPlanValidationCommandMDT.h"
#include "uci/type/RouteActivityPlanValidationCommandMT.h"
#include "uci/type/RouteActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/RouteActivityPlanValidationCommandStatusMT.h"
#include "uci/type/RouteActivityPlanValidationID_Type.h"
#include "uci/type/RouteActivityPlanValidationInputsType.h"
#include "uci/type/RouteActivityPlanValidationMT.h"
#include "uci/type/RouteActivityType.h"
#include "uci/type/RouteExecutionPlanSetType.h"
#include "uci/type/RouteMetricsID_Type.h"
#include "uci/type/RouteMetricsMT.h"
#include "uci/type/RouteMetricsRequestMDT.h"
#include "uci/type/RouteMetricsRequestMT.h"
#include "uci/type/RouteMetricsRequestStatusMDT.h"
#include "uci/type/RouteMetricsRequestStatusMT.h"
#include "uci/type/RouteModificationRequestMDT.h"
#include "uci/type/RouteModificationRequestMT.h"
#include "uci/type/RouteModificationRequestStatusMDT.h"
#include "uci/type/RouteModificationRequestStatusMT.h"
#include "uci/type/RoutePlanApprovalStatusMT.h"
#include "uci/type/RoutePlanCommandID_Type.h"
#include "uci/type/RoutePlanCommandMT.h"
#include "uci/type/RoutePlanCommandStatusMT.h"
#include "uci/type/RoutePlanExecutionStatusMT.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/RoutePlanInputsType.h"
#include "uci/type/RoutePlanMT.h"
#include "uci/type/RoutePlanProcessDescriptionType.h"
#include "uci/type/RoutePlanStatusMT.h"
#include "uci/type/RoutePlanStatusType.h"
#include "uci/type/RoutePlanValidationCommandMDT.h"
#include "uci/type/RoutePlanValidationCommandMT.h"
#include "uci/type/RoutePlanValidationCommandStatusMDT.h"
#include "uci/type/RoutePlanValidationCommandStatusMT.h"
#include "uci/type/RoutePlanValidationID_Type.h"
#include "uci/type/RoutePlanValidationInputsType.h"
#include "uci/type/RoutePlanValidationMT.h"
#include "uci/type/RoutePlanningCandidateType.h"
#include "uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "uci/type/RunwayID_Type.h"
#include "uci/type/SAR_ActivityCommandType.h"
#include "uci/type/SAR_ActivityMT.h"
#include "uci/type/SAR_ActivityType.h"
#include "uci/type/SAR_AutomaticTargetDetectionParametersType.h"
#include "uci/type/SAR_CapabilityCommandType.h"
#include "uci/type/SAR_CapabilityMDT.h"
#include "uci/type/SAR_CapabilityMT.h"
#include "uci/type/SAR_CapabilityStatusMDT.h"
#include "uci/type/SAR_CapabilityStatusMT.h"
#include "uci/type/SAR_CapabilityStatusType.h"
#include "uci/type/SAR_CapabilityType.h"
#include "uci/type/SAR_CoherentChangeDetectionParametersType.h"
#include "uci/type/SAR_CollectionConstraintsType.h"
#include "uci/type/SAR_CollectionOptionsType.h"
#include "uci/type/SAR_CommandMT.h"
#include "uci/type/SAR_CommandStatusMDT.h"
#include "uci/type/SAR_CommandStatusMT.h"
#include "uci/type/SAR_DynamicImageParametersType.h"
#include "uci/type/SAR_ProcessingParametersType.h"
#include "uci/type/SAR_SettingsCommandMDT.h"
#include "uci/type/SAR_SettingsCommandMT.h"
#include "uci/type/SAR_SettingsCommandStatusMDT.h"
#include "uci/type/SAR_SettingsCommandStatusMT.h"
#include "uci/type/SAR_TaskAchievabilityAssessmentRequestType.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

boost::optional<std::string> DerivedTypesSerializer16::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::responsePlanValidationMT:
      return asb_uci::type::ResponsePlanValidationMT::serialize(dynamic_cast<const uci::type::ResponsePlanValidationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::responseStatusMDT:
      return asb_uci::type::ResponseStatusMDT::serialize(dynamic_cast<const uci::type::ResponseStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::responseStatusMT:
      return asb_uci::type::ResponseStatusMT::serialize(dynamic_cast<const uci::type::ResponseStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ControlCommandMDT:
      return asb_uci::type::RF_ControlCommandMDT::serialize(dynamic_cast<const uci::type::RF_ControlCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ControlCommandMT:
      return asb_uci::type::RF_ControlCommandMT::serialize(dynamic_cast<const uci::type::RF_ControlCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ControlCommandStatusMDT:
      return asb_uci::type::RF_ControlCommandStatusMDT::serialize(dynamic_cast<const uci::type::RF_ControlCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ControlCommandStatusMT:
      return asb_uci::type::RF_ControlCommandStatusMT::serialize(dynamic_cast<const uci::type::RF_ControlCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ProfileID_Type:
      return asb_uci::type::RF_ProfileID_Type::serialize(dynamic_cast<const uci::type::RF_ProfileID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ProfileMT:
      return asb_uci::type::RF_ProfileMT::serialize(dynamic_cast<const uci::type::RF_ProfileMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ReportID_Type:
      return asb_uci::type::RF_ReportID_Type::serialize(dynamic_cast<const uci::type::RF_ReportID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ReportMT:
      return asb_uci::type::RF_ReportMT::serialize(dynamic_cast<const uci::type::RF_ReportMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ResourceAllocationID_Type:
      return asb_uci::type::RF_ResourceAllocationID_Type::serialize(dynamic_cast<const uci::type::RF_ResourceAllocationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ResourceAllocationMT:
      return asb_uci::type::RF_ResourceAllocationMT::serialize(dynamic_cast<const uci::type::RF_ResourceAllocationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ResourceAllocationRequestMDT:
      return asb_uci::type::RF_ResourceAllocationRequestMDT::serialize(dynamic_cast<const uci::type::RF_ResourceAllocationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ResourceAllocationRequestMT:
      return asb_uci::type::RF_ResourceAllocationRequestMT::serialize(dynamic_cast<const uci::type::RF_ResourceAllocationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ResourceAllocationRequestStatusMDT:
      return asb_uci::type::RF_ResourceAllocationRequestStatusMDT::serialize(dynamic_cast<const uci::type::RF_ResourceAllocationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ResourceAllocationRequestStatusMT:
      return asb_uci::type::RF_ResourceAllocationRequestStatusMT::serialize(dynamic_cast<const uci::type::RF_ResourceAllocationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandMDT:
      return asb_uci::type::RF_ThreadInstanceSetupCommandMDT::serialize(dynamic_cast<const uci::type::RF_ThreadInstanceSetupCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandMT:
      return asb_uci::type::RF_ThreadInstanceSetupCommandMT::serialize(dynamic_cast<const uci::type::RF_ThreadInstanceSetupCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMDT:
      return asb_uci::type::RF_ThreadInstanceSetupCommandStatusMDT::serialize(dynamic_cast<const uci::type::RF_ThreadInstanceSetupCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMT:
      return asb_uci::type::RF_ThreadInstanceSetupCommandStatusMT::serialize(dynamic_cast<const uci::type::RF_ThreadInstanceSetupCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rFD_ComponentIdentifierType:
      return asb_uci::type::RFD_ComponentIdentifierType::serialize(dynamic_cast<const uci::type::RFD_ComponentIdentifierType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityExecutionStatusType:
      return asb_uci::type::RouteActivityExecutionStatusType::serialize(dynamic_cast<const uci::type::RouteActivityExecutionStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanApprovalStatusMT:
      return asb_uci::type::RouteActivityPlanApprovalStatusMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanApprovalStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanCommandID_Type:
      return asb_uci::type::RouteActivityPlanCommandID_Type::serialize(dynamic_cast<const uci::type::RouteActivityPlanCommandID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanCommandMT:
      return asb_uci::type::RouteActivityPlanCommandMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanCommandStatusMT:
      return asb_uci::type::RouteActivityPlanCommandStatusMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanExecutionStatusMT:
      return asb_uci::type::RouteActivityPlanExecutionStatusMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanExecutionStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanID_Type:
      return asb_uci::type::RouteActivityPlanID_Type::serialize(dynamic_cast<const uci::type::RouteActivityPlanID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanInputsType:
      return asb_uci::type::RouteActivityPlanInputsType::serialize(dynamic_cast<const uci::type::RouteActivityPlanInputsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanMT:
      return asb_uci::type::RouteActivityPlanMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanStatusMT:
      return asb_uci::type::RouteActivityPlanStatusMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanStatusType:
      return asb_uci::type::RouteActivityPlanStatusType::serialize(dynamic_cast<const uci::type::RouteActivityPlanStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationCommandMDT:
      return asb_uci::type::RouteActivityPlanValidationCommandMDT::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationCommandMT:
      return asb_uci::type::RouteActivityPlanValidationCommandMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationCommandStatusMDT:
      return asb_uci::type::RouteActivityPlanValidationCommandStatusMDT::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationCommandStatusMT:
      return asb_uci::type::RouteActivityPlanValidationCommandStatusMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationID_Type:
      return asb_uci::type::RouteActivityPlanValidationID_Type::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationInputsType:
      return asb_uci::type::RouteActivityPlanValidationInputsType::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationInputsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityPlanValidationMT:
      return asb_uci::type::RouteActivityPlanValidationMT::serialize(dynamic_cast<const uci::type::RouteActivityPlanValidationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeActivityType:
      return asb_uci::type::RouteActivityType::serialize(dynamic_cast<const uci::type::RouteActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeExecutionPlanSetType:
      return asb_uci::type::RouteExecutionPlanSetType::serialize(dynamic_cast<const uci::type::RouteExecutionPlanSetType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeMetricsID_Type:
      return asb_uci::type::RouteMetricsID_Type::serialize(dynamic_cast<const uci::type::RouteMetricsID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeMetricsMT:
      return asb_uci::type::RouteMetricsMT::serialize(dynamic_cast<const uci::type::RouteMetricsMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeMetricsRequestMDT:
      return asb_uci::type::RouteMetricsRequestMDT::serialize(dynamic_cast<const uci::type::RouteMetricsRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeMetricsRequestMT:
      return asb_uci::type::RouteMetricsRequestMT::serialize(dynamic_cast<const uci::type::RouteMetricsRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeMetricsRequestStatusMDT:
      return asb_uci::type::RouteMetricsRequestStatusMDT::serialize(dynamic_cast<const uci::type::RouteMetricsRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeMetricsRequestStatusMT:
      return asb_uci::type::RouteMetricsRequestStatusMT::serialize(dynamic_cast<const uci::type::RouteMetricsRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeModificationRequestMDT:
      return asb_uci::type::RouteModificationRequestMDT::serialize(dynamic_cast<const uci::type::RouteModificationRequestMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeModificationRequestMT:
      return asb_uci::type::RouteModificationRequestMT::serialize(dynamic_cast<const uci::type::RouteModificationRequestMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeModificationRequestStatusMDT:
      return asb_uci::type::RouteModificationRequestStatusMDT::serialize(dynamic_cast<const uci::type::RouteModificationRequestStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeModificationRequestStatusMT:
      return asb_uci::type::RouteModificationRequestStatusMT::serialize(dynamic_cast<const uci::type::RouteModificationRequestStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanApprovalStatusMT:
      return asb_uci::type::RoutePlanApprovalStatusMT::serialize(dynamic_cast<const uci::type::RoutePlanApprovalStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanCommandID_Type:
      return asb_uci::type::RoutePlanCommandID_Type::serialize(dynamic_cast<const uci::type::RoutePlanCommandID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanCommandMT:
      return asb_uci::type::RoutePlanCommandMT::serialize(dynamic_cast<const uci::type::RoutePlanCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanCommandStatusMT:
      return asb_uci::type::RoutePlanCommandStatusMT::serialize(dynamic_cast<const uci::type::RoutePlanCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanExecutionStatusMT:
      return asb_uci::type::RoutePlanExecutionStatusMT::serialize(dynamic_cast<const uci::type::RoutePlanExecutionStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanID_Type:
      return asb_uci::type::RoutePlanID_Type::serialize(dynamic_cast<const uci::type::RoutePlanID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanInputsType:
      return asb_uci::type::RoutePlanInputsType::serialize(dynamic_cast<const uci::type::RoutePlanInputsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanMT:
      return asb_uci::type::RoutePlanMT::serialize(dynamic_cast<const uci::type::RoutePlanMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanningCandidateType:
      return asb_uci::type::RoutePlanningCandidateType::serialize(dynamic_cast<const uci::type::RoutePlanningCandidateType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanProcessDescriptionType:
      return asb_uci::type::RoutePlanProcessDescriptionType::serialize(dynamic_cast<const uci::type::RoutePlanProcessDescriptionType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanStatusMT:
      return asb_uci::type::RoutePlanStatusMT::serialize(dynamic_cast<const uci::type::RoutePlanStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanStatusType:
      return asb_uci::type::RoutePlanStatusType::serialize(dynamic_cast<const uci::type::RoutePlanStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationCommandMDT:
      return asb_uci::type::RoutePlanValidationCommandMDT::serialize(dynamic_cast<const uci::type::RoutePlanValidationCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationCommandMT:
      return asb_uci::type::RoutePlanValidationCommandMT::serialize(dynamic_cast<const uci::type::RoutePlanValidationCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationCommandStatusMDT:
      return asb_uci::type::RoutePlanValidationCommandStatusMDT::serialize(dynamic_cast<const uci::type::RoutePlanValidationCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationCommandStatusMT:
      return asb_uci::type::RoutePlanValidationCommandStatusMT::serialize(dynamic_cast<const uci::type::RoutePlanValidationCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationID_Type:
      return asb_uci::type::RoutePlanValidationID_Type::serialize(dynamic_cast<const uci::type::RoutePlanValidationID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationInputsType:
      return asb_uci::type::RoutePlanValidationInputsType::serialize(dynamic_cast<const uci::type::RoutePlanValidationInputsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routePlanValidationMT:
      return asb_uci::type::RoutePlanValidationMT::serialize(dynamic_cast<const uci::type::RoutePlanValidationMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::routeVulnerabilityMetricsRequestType:
      return asb_uci::type::RouteVulnerabilityMetricsRequestType::serialize(dynamic_cast<const uci::type::RouteVulnerabilityMetricsRequestType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rSO_ApproachType:
      return asb_uci::type::RSO_ApproachType::serialize(dynamic_cast<const uci::type::RSO_ApproachType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rSTA_FileTraceabilityType:
      return asb_uci::type::RSTA_FileTraceabilityType::serialize(dynamic_cast<const uci::type::RSTA_FileTraceabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::rSTA_TraceabilityType:
      return asb_uci::type::RSTA_TraceabilityType::serialize(dynamic_cast<const uci::type::RSTA_TraceabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::runwayID_Type:
      return asb_uci::type::RunwayID_Type::serialize(dynamic_cast<const uci::type::RunwayID_Type&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_ActivityCommandType:
      return asb_uci::type::SAR_ActivityCommandType::serialize(dynamic_cast<const uci::type::SAR_ActivityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_ActivityMT:
      return asb_uci::type::SAR_ActivityMT::serialize(dynamic_cast<const uci::type::SAR_ActivityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_ActivityType:
      return asb_uci::type::SAR_ActivityType::serialize(dynamic_cast<const uci::type::SAR_ActivityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_AutomaticTargetDetectionParametersType:
      return asb_uci::type::SAR_AutomaticTargetDetectionParametersType::serialize(dynamic_cast<const uci::type::SAR_AutomaticTargetDetectionParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityCommandType:
      return asb_uci::type::SAR_CapabilityCommandType::serialize(dynamic_cast<const uci::type::SAR_CapabilityCommandType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityMDT:
      return asb_uci::type::SAR_CapabilityMDT::serialize(dynamic_cast<const uci::type::SAR_CapabilityMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityMT:
      return asb_uci::type::SAR_CapabilityMT::serialize(dynamic_cast<const uci::type::SAR_CapabilityMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityStatusMDT:
      return asb_uci::type::SAR_CapabilityStatusMDT::serialize(dynamic_cast<const uci::type::SAR_CapabilityStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityStatusMT:
      return asb_uci::type::SAR_CapabilityStatusMT::serialize(dynamic_cast<const uci::type::SAR_CapabilityStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityStatusType:
      return asb_uci::type::SAR_CapabilityStatusType::serialize(dynamic_cast<const uci::type::SAR_CapabilityStatusType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CapabilityType:
      return asb_uci::type::SAR_CapabilityType::serialize(dynamic_cast<const uci::type::SAR_CapabilityType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CoherentChangeDetectionParametersType:
      return asb_uci::type::SAR_CoherentChangeDetectionParametersType::serialize(dynamic_cast<const uci::type::SAR_CoherentChangeDetectionParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CollectionConstraintsType:
      return asb_uci::type::SAR_CollectionConstraintsType::serialize(dynamic_cast<const uci::type::SAR_CollectionConstraintsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CollectionOptionsType:
      return asb_uci::type::SAR_CollectionOptionsType::serialize(dynamic_cast<const uci::type::SAR_CollectionOptionsType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CommandMT:
      return asb_uci::type::SAR_CommandMT::serialize(dynamic_cast<const uci::type::SAR_CommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CommandStatusMDT:
      return asb_uci::type::SAR_CommandStatusMDT::serialize(dynamic_cast<const uci::type::SAR_CommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_CommandStatusMT:
      return asb_uci::type::SAR_CommandStatusMT::serialize(dynamic_cast<const uci::type::SAR_CommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_DynamicImageParametersType:
      return asb_uci::type::SAR_DynamicImageParametersType::serialize(dynamic_cast<const uci::type::SAR_DynamicImageParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_ProcessingParametersType:
      return asb_uci::type::SAR_ProcessingParametersType::serialize(dynamic_cast<const uci::type::SAR_ProcessingParametersType&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_SettingsCommandMDT:
      return asb_uci::type::SAR_SettingsCommandMDT::serialize(dynamic_cast<const uci::type::SAR_SettingsCommandMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_SettingsCommandMT:
      return asb_uci::type::SAR_SettingsCommandMT::serialize(dynamic_cast<const uci::type::SAR_SettingsCommandMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_SettingsCommandStatusMDT:
      return asb_uci::type::SAR_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::SAR_SettingsCommandStatusMDT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_SettingsCommandStatusMT:
      return asb_uci::type::SAR_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::SAR_SettingsCommandStatusMT&>(accessor), propTree, nodeName, createNode, true, false);
    case uci::type::accessorType::sAR_TaskAchievabilityAssessmentRequestType:
      return asb_uci::type::SAR_TaskAchievabilityAssessmentRequestType::serialize(dynamic_cast<const uci::type::SAR_TaskAchievabilityAssessmentRequestType&>(accessor), propTree, nodeName, createNode, true, false);
    default:
      return boost::none;
  }
}

} // namespace util

} // namespace asb_uci

