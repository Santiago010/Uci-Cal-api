/** @file DerivedTypesDeserializer2.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesDeserializer2.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "asb_uci/type/AMTI_ActivityCommandType.h"
#include "asb_uci/type/AMTI_ActivityMT.h"
#include "asb_uci/type/AMTI_ActivityType.h"
#include "asb_uci/type/AMTI_CapabilityCommandType.h"
#include "asb_uci/type/AMTI_CapabilityMDT.h"
#include "asb_uci/type/AMTI_CapabilityMT.h"
#include "asb_uci/type/AMTI_CapabilityStatusMDT.h"
#include "asb_uci/type/AMTI_CapabilityStatusMT.h"
#include "asb_uci/type/AMTI_CapabilityType.h"
#include "asb_uci/type/AMTI_CollectionConstraintsType.h"
#include "asb_uci/type/AMTI_CommandMT.h"
#include "asb_uci/type/AMTI_CommandStatusMDT.h"
#include "asb_uci/type/AMTI_CommandStatusMT.h"
#include "asb_uci/type/AMTI_SettingsCommandMDT.h"
#include "asb_uci/type/AMTI_SettingsCommandMT.h"
#include "asb_uci/type/AMTI_SettingsCommandStatusMDT.h"
#include "asb_uci/type/AMTI_SettingsCommandStatusMT.h"
#include "asb_uci/type/AMTI_TaskBaseType.h"
#include "asb_uci/type/AMTI_TaskType.h"
#include "asb_uci/type/AO_ActivityCommandType.h"
#include "asb_uci/type/AO_ActivityMT.h"
#include "asb_uci/type/AO_ActivityType.h"
#include "asb_uci/type/AO_CapabilityCommandType.h"
#include "asb_uci/type/AO_CapabilityMDT.h"
#include "asb_uci/type/AO_CapabilityMT.h"
#include "asb_uci/type/AO_CapabilityStatusMDT.h"
#include "asb_uci/type/AO_CapabilityStatusMT.h"
#include "asb_uci/type/AO_CapabilityType.h"
#include "asb_uci/type/AO_CommandMT.h"
#include "asb_uci/type/AO_CommandStatusMDT.h"
#include "asb_uci/type/AO_CommandStatusMT.h"
#include "asb_uci/type/AO_ConsentRequestMT.h"
#include "asb_uci/type/AO_ConsentRequestStatusMDT.h"
#include "asb_uci/type/AO_ConsentRequestStatusMT.h"
#include "asb_uci/type/AO_ConsentRequestType.h"
#include "asb_uci/type/AO_SettingsCommandMDT.h"
#include "asb_uci/type/AO_SettingsCommandMT.h"
#include "asb_uci/type/AO_SettingsCommandStatusMDT.h"
#include "asb_uci/type/AO_SettingsCommandStatusMT.h"
#include "asb_uci/type/AO_TaskBaseType.h"
#include "asb_uci/type/AO_TaskType.h"
#include "asb_uci/type/ATO_FileTraceabilityType.h"
#include "asb_uci/type/ATO_TraceabilityType.h"
#include "asb_uci/type/ATR_ProcessingParametersType.h"
#include "asb_uci/type/ATR_ProcessingResultsType.h"
#include "asb_uci/type/AirSampleCommandStatusMDT.h"
#include "asb_uci/type/AirSampleCommandStatusMT.h"
#include "asb_uci/type/AirSampleSettingsCommandMDT.h"
#include "asb_uci/type/AirSampleSettingsCommandMT.h"
#include "asb_uci/type/AirSampleSettingsCommandStatusMDT.h"
#include "asb_uci/type/AirSampleSettingsCommandStatusMT.h"
#include "asb_uci/type/AirSampleTaskBaseType.h"
#include "asb_uci/type/AirSampleTaskType.h"
#include "asb_uci/type/AnalysisRouteID_Type.h"
#include "asb_uci/type/AnalysisRouteMT.h"
#include "asb_uci/type/AnalysisRouteRequestMDT.h"
#include "asb_uci/type/AnalysisRouteRequestMT.h"
#include "asb_uci/type/AnalysisRouteRequestStatusMDT.h"
#include "asb_uci/type/AnalysisRouteRequestStatusMT.h"
#include "asb_uci/type/AnglePairType.h"
#include "asb_uci/type/AntennaID_Type.h"
#include "asb_uci/type/AntennaResourceID_Type.h"
#include "asb_uci/type/ApplicabilityType.h"
#include "asb_uci/type/ApprovalAuthorityID_Type.h"
#include "asb_uci/type/ApprovalAuthorityMDT.h"
#include "asb_uci/type/ApprovalAuthorityMT.h"
#include "asb_uci/type/ApprovalAuthorityRequestMDT.h"
#include "asb_uci/type/ApprovalAuthorityRequestMT.h"
#include "asb_uci/type/ApprovalAuthorityRequestStatusMDT.h"
#include "asb_uci/type/ApprovalAuthorityRequestStatusMT.h"
#include "asb_uci/type/ApprovalManagementCommandMDT.h"
#include "asb_uci/type/ApprovalManagementCommandMT.h"
#include "asb_uci/type/ApprovalManagementCommandStatusMDT.h"
#include "asb_uci/type/ApprovalManagementCommandStatusMT.h"
#include "asb_uci/type/ApprovalPolicyBaseType.h"
#include "asb_uci/type/ApprovalPolicyID_Type.h"
#include "asb_uci/type/ApprovalPolicyMDT.h"
#include "asb_uci/type/ApprovalPolicyMT.h"
#include "asb_uci/type/ApprovalRequestMDT.h"
#include "asb_uci/type/ApprovalRequestMT.h"
#include "asb_uci/type/ApprovalRequestStatusMDT.h"
#include "asb_uci/type/ApprovalRequestStatusMT.h"
#include "asb_uci/type/AssessmentID_Type.h"
#include "asb_uci/type/AssessmentMT.h"
#include "asb_uci/type/AssessmentRequestMDT.h"
#include "asb_uci/type/AssessmentRequestMT.h"
#include "asb_uci/type/AssessmentRequestStatusMDT.h"
#include "asb_uci/type/AssessmentRequestStatusMT.h"
#include "asb_uci/type/AssessmentStatusType.h"
#include "asb_uci/type/AugmentationProcessingParametersType.h"
#include "asb_uci/type/AuthorizationID_Type.h"
#include "asb_uci/type/AuthorizationMDT.h"
#include "asb_uci/type/AuthorizationMT.h"
#include "asb_uci/type/AutonomousPlanCommandType.h"
#include "asb_uci/type/AutonomousPlanningActionID_Type.h"
#include "asb_uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "asb_uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "asb_uci/type/AzElRequiredReferenceType.h"
#include "asb_uci/type/BaseEOB_RecordType.h"
#include "asb_uci/type/BeamID_Type.h"
#include "uci/base/Accessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/AMTI_ActivityCommandType.h"
#include "uci/type/AMTI_ActivityMT.h"
#include "uci/type/AMTI_ActivityType.h"
#include "uci/type/AMTI_CapabilityCommandType.h"
#include "uci/type/AMTI_CapabilityMDT.h"
#include "uci/type/AMTI_CapabilityMT.h"
#include "uci/type/AMTI_CapabilityStatusMDT.h"
#include "uci/type/AMTI_CapabilityStatusMT.h"
#include "uci/type/AMTI_CapabilityType.h"
#include "uci/type/AMTI_CollectionConstraintsType.h"
#include "uci/type/AMTI_CommandMT.h"
#include "uci/type/AMTI_CommandStatusMDT.h"
#include "uci/type/AMTI_CommandStatusMT.h"
#include "uci/type/AMTI_SettingsCommandMDT.h"
#include "uci/type/AMTI_SettingsCommandMT.h"
#include "uci/type/AMTI_SettingsCommandStatusMDT.h"
#include "uci/type/AMTI_SettingsCommandStatusMT.h"
#include "uci/type/AMTI_TaskBaseType.h"
#include "uci/type/AMTI_TaskType.h"
#include "uci/type/AO_ActivityCommandType.h"
#include "uci/type/AO_ActivityMT.h"
#include "uci/type/AO_ActivityType.h"
#include "uci/type/AO_CapabilityCommandType.h"
#include "uci/type/AO_CapabilityMDT.h"
#include "uci/type/AO_CapabilityMT.h"
#include "uci/type/AO_CapabilityStatusMDT.h"
#include "uci/type/AO_CapabilityStatusMT.h"
#include "uci/type/AO_CapabilityType.h"
#include "uci/type/AO_CommandMT.h"
#include "uci/type/AO_CommandStatusMDT.h"
#include "uci/type/AO_CommandStatusMT.h"
#include "uci/type/AO_ConsentRequestMT.h"
#include "uci/type/AO_ConsentRequestStatusMDT.h"
#include "uci/type/AO_ConsentRequestStatusMT.h"
#include "uci/type/AO_ConsentRequestType.h"
#include "uci/type/AO_SettingsCommandMDT.h"
#include "uci/type/AO_SettingsCommandMT.h"
#include "uci/type/AO_SettingsCommandStatusMDT.h"
#include "uci/type/AO_SettingsCommandStatusMT.h"
#include "uci/type/AO_TaskBaseType.h"
#include "uci/type/AO_TaskType.h"
#include "uci/type/ATO_FileTraceabilityType.h"
#include "uci/type/ATO_TraceabilityType.h"
#include "uci/type/ATR_ProcessingParametersType.h"
#include "uci/type/ATR_ProcessingResultsType.h"
#include "uci/type/AirSampleCommandStatusMDT.h"
#include "uci/type/AirSampleCommandStatusMT.h"
#include "uci/type/AirSampleSettingsCommandMDT.h"
#include "uci/type/AirSampleSettingsCommandMT.h"
#include "uci/type/AirSampleSettingsCommandStatusMDT.h"
#include "uci/type/AirSampleSettingsCommandStatusMT.h"
#include "uci/type/AirSampleTaskBaseType.h"
#include "uci/type/AirSampleTaskType.h"
#include "uci/type/AnalysisRouteID_Type.h"
#include "uci/type/AnalysisRouteMT.h"
#include "uci/type/AnalysisRouteRequestMDT.h"
#include "uci/type/AnalysisRouteRequestMT.h"
#include "uci/type/AnalysisRouteRequestStatusMDT.h"
#include "uci/type/AnalysisRouteRequestStatusMT.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/AntennaID_Type.h"
#include "uci/type/AntennaResourceID_Type.h"
#include "uci/type/ApplicabilityType.h"
#include "uci/type/ApprovalAuthorityID_Type.h"
#include "uci/type/ApprovalAuthorityMDT.h"
#include "uci/type/ApprovalAuthorityMT.h"
#include "uci/type/ApprovalAuthorityRequestMDT.h"
#include "uci/type/ApprovalAuthorityRequestMT.h"
#include "uci/type/ApprovalAuthorityRequestStatusMDT.h"
#include "uci/type/ApprovalAuthorityRequestStatusMT.h"
#include "uci/type/ApprovalManagementCommandMDT.h"
#include "uci/type/ApprovalManagementCommandMT.h"
#include "uci/type/ApprovalManagementCommandStatusMDT.h"
#include "uci/type/ApprovalManagementCommandStatusMT.h"
#include "uci/type/ApprovalPolicyBaseType.h"
#include "uci/type/ApprovalPolicyID_Type.h"
#include "uci/type/ApprovalPolicyMDT.h"
#include "uci/type/ApprovalPolicyMT.h"
#include "uci/type/ApprovalRequestMDT.h"
#include "uci/type/ApprovalRequestMT.h"
#include "uci/type/ApprovalRequestStatusMDT.h"
#include "uci/type/ApprovalRequestStatusMT.h"
#include "uci/type/AssessmentID_Type.h"
#include "uci/type/AssessmentMT.h"
#include "uci/type/AssessmentRequestMDT.h"
#include "uci/type/AssessmentRequestMT.h"
#include "uci/type/AssessmentRequestStatusMDT.h"
#include "uci/type/AssessmentRequestStatusMT.h"
#include "uci/type/AssessmentStatusType.h"
#include "uci/type/AugmentationProcessingParametersType.h"
#include "uci/type/AuthorizationID_Type.h"
#include "uci/type/AuthorizationMDT.h"
#include "uci/type/AuthorizationMT.h"
#include "uci/type/AutonomousPlanCommandType.h"
#include "uci/type/AutonomousPlanningActionID_Type.h"
#include "uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "uci/type/AzElRequiredReferenceType.h"
#include "uci/type/BaseEOB_RecordType.h"
#include "uci/type/BeamID_Type.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

bool DerivedTypesDeserializer2::deserialize(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::airSampleCommandStatusMDT:
      asb_uci::type::AirSampleCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleCommandStatusMT:
      asb_uci::type::AirSampleCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleSettingsCommandMDT:
      asb_uci::type::AirSampleSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleSettingsCommandMT:
      asb_uci::type::AirSampleSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleSettingsCommandStatusMDT:
      asb_uci::type::AirSampleSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleSettingsCommandStatusMT:
      asb_uci::type::AirSampleSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleTaskBaseType:
      asb_uci::type::AirSampleTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AirSampleTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::airSampleTaskType:
      asb_uci::type::AirSampleTaskType::deserialize(propTree, dynamic_cast<uci::type::AirSampleTaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_ActivityCommandType:
      asb_uci::type::AMTI_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_ActivityMT:
      asb_uci::type::AMTI_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_ActivityType:
      asb_uci::type::AMTI_ActivityType::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CapabilityCommandType:
      asb_uci::type::AMTI_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CapabilityMDT:
      asb_uci::type::AMTI_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CapabilityMT:
      asb_uci::type::AMTI_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CapabilityStatusMDT:
      asb_uci::type::AMTI_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CapabilityStatusMT:
      asb_uci::type::AMTI_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CapabilityType:
      asb_uci::type::AMTI_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CollectionConstraintsType:
      asb_uci::type::AMTI_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CommandMT:
      asb_uci::type::AMTI_CommandMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CommandStatusMDT:
      asb_uci::type::AMTI_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_CommandStatusMT:
      asb_uci::type::AMTI_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_SettingsCommandMDT:
      asb_uci::type::AMTI_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_SettingsCommandMT:
      asb_uci::type::AMTI_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_SettingsCommandStatusMDT:
      asb_uci::type::AMTI_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_SettingsCommandStatusMT:
      asb_uci::type::AMTI_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_TaskBaseType:
      asb_uci::type::AMTI_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aMTI_TaskType:
      asb_uci::type::AMTI_TaskType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::analysisRouteID_Type:
      asb_uci::type::AnalysisRouteID_Type::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::analysisRouteMT:
      asb_uci::type::AnalysisRouteMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::analysisRouteRequestMDT:
      asb_uci::type::AnalysisRouteRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::analysisRouteRequestMT:
      asb_uci::type::AnalysisRouteRequestMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::analysisRouteRequestStatusMDT:
      asb_uci::type::AnalysisRouteRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::analysisRouteRequestStatusMT:
      asb_uci::type::AnalysisRouteRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::anglePairType:
      asb_uci::type::AnglePairType::deserialize(propTree, dynamic_cast<uci::type::AnglePairType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::antennaID_Type:
      asb_uci::type::AntennaID_Type::deserialize(propTree, dynamic_cast<uci::type::AntennaID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::antennaResourceID_Type:
      asb_uci::type::AntennaResourceID_Type::deserialize(propTree, dynamic_cast<uci::type::AntennaResourceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ActivityCommandType:
      asb_uci::type::AO_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ActivityMT:
      asb_uci::type::AO_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ActivityType:
      asb_uci::type::AO_ActivityType::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CapabilityCommandType:
      asb_uci::type::AO_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CapabilityMDT:
      asb_uci::type::AO_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CapabilityMT:
      asb_uci::type::AO_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CapabilityStatusMDT:
      asb_uci::type::AO_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CapabilityStatusMT:
      asb_uci::type::AO_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CapabilityType:
      asb_uci::type::AO_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CommandMT:
      asb_uci::type::AO_CommandMT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CommandStatusMDT:
      asb_uci::type::AO_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_CommandStatusMT:
      asb_uci::type::AO_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ConsentRequestMT:
      asb_uci::type::AO_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ConsentRequestStatusMDT:
      asb_uci::type::AO_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ConsentRequestStatusMT:
      asb_uci::type::AO_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_ConsentRequestType:
      asb_uci::type::AO_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_SettingsCommandMDT:
      asb_uci::type::AO_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_SettingsCommandMT:
      asb_uci::type::AO_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_SettingsCommandStatusMDT:
      asb_uci::type::AO_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_SettingsCommandStatusMT:
      asb_uci::type::AO_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_TaskBaseType:
      asb_uci::type::AO_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AO_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aO_TaskType:
      asb_uci::type::AO_TaskType::deserialize(propTree, dynamic_cast<uci::type::AO_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::applicabilityType:
      asb_uci::type::ApplicabilityType::deserialize(propTree, dynamic_cast<uci::type::ApplicabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityID_Type:
      asb_uci::type::ApprovalAuthorityID_Type::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityMDT:
      asb_uci::type::ApprovalAuthorityMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityMT:
      asb_uci::type::ApprovalAuthorityMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityRequestMDT:
      asb_uci::type::ApprovalAuthorityRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityRequestMT:
      asb_uci::type::ApprovalAuthorityRequestMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityRequestStatusMDT:
      asb_uci::type::ApprovalAuthorityRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalAuthorityRequestStatusMT:
      asb_uci::type::ApprovalAuthorityRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalManagementCommandMDT:
      asb_uci::type::ApprovalManagementCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalManagementCommandMT:
      asb_uci::type::ApprovalManagementCommandMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalManagementCommandStatusMDT:
      asb_uci::type::ApprovalManagementCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalManagementCommandStatusMT:
      asb_uci::type::ApprovalManagementCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalPolicyBaseType:
      asb_uci::type::ApprovalPolicyBaseType::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyBaseType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalPolicyID_Type:
      asb_uci::type::ApprovalPolicyID_Type::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalPolicyMDT:
      asb_uci::type::ApprovalPolicyMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalPolicyMT:
      asb_uci::type::ApprovalPolicyMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalRequestMDT:
      asb_uci::type::ApprovalRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalRequestMT:
      asb_uci::type::ApprovalRequestMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalRequestStatusMDT:
      asb_uci::type::ApprovalRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::approvalRequestStatusMT:
      asb_uci::type::ApprovalRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentID_Type:
      asb_uci::type::AssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::AssessmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentMT:
      asb_uci::type::AssessmentMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentRequestMDT:
      asb_uci::type::AssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentRequestMT:
      asb_uci::type::AssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentRequestStatusMDT:
      asb_uci::type::AssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentRequestStatusMT:
      asb_uci::type::AssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::assessmentStatusType:
      asb_uci::type::AssessmentStatusType::deserialize(propTree, dynamic_cast<uci::type::AssessmentStatusType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aTO_FileTraceabilityType:
      asb_uci::type::ATO_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ATO_FileTraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aTO_TraceabilityType:
      asb_uci::type::ATO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ATO_TraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aTR_ProcessingParametersType:
      asb_uci::type::ATR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::ATR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::aTR_ProcessingResultsType:
      asb_uci::type::ATR_ProcessingResultsType::deserialize(propTree, dynamic_cast<uci::type::ATR_ProcessingResultsType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::augmentationProcessingParametersType:
      asb_uci::type::AugmentationProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::AugmentationProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::authorizationID_Type:
      asb_uci::type::AuthorizationID_Type::deserialize(propTree, dynamic_cast<uci::type::AuthorizationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::authorizationMDT:
      asb_uci::type::AuthorizationMDT::deserialize(propTree, dynamic_cast<uci::type::AuthorizationMDT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::authorizationMT:
      asb_uci::type::AuthorizationMT::deserialize(propTree, dynamic_cast<uci::type::AuthorizationMT&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::autonomousPlanCommandType:
      asb_uci::type::AutonomousPlanCommandType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanCommandType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::autonomousPlanningActionID_Type:
      asb_uci::type::AutonomousPlanningActionID_Type::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningActionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::autonomousPlanningConstrainingPlansType:
      asb_uci::type::AutonomousPlanningConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningConstrainingPlansType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::autonomousPlanningOtherSystemConstrainingPlansType:
      asb_uci::type::AutonomousPlanningOtherSystemConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningOtherSystemConstrainingPlansType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::azElRequiredReferenceType:
      asb_uci::type::AzElRequiredReferenceType::deserialize(propTree, dynamic_cast<uci::type::AzElRequiredReferenceType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::baseEOB_RecordType:
      asb_uci::type::BaseEOB_RecordType::deserialize(propTree, dynamic_cast<uci::type::BaseEOB_RecordType&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    case uci::type::accessorType::beamID_Type:
      asb_uci::type::BeamID_Type::deserialize(propTree, dynamic_cast<uci::type::BeamID_Type&>(accessor), nodeName, nsPrefix, topLevel);
      return true;
      break;
    default:
      return false;
  }
}

} // namespace util

} // namespace asb_uci

