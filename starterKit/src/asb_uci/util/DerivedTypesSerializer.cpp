/** @file DerivedTypesSerializer.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:16 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "asb_uci/util/DerivedTypesSerializer.h"

#include <sstream>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "asb_uci/util/DerivedTypesSerializer1.h"
#include "asb_uci/util/DerivedTypesSerializer10.h"
#include "asb_uci/util/DerivedTypesSerializer11.h"
#include "asb_uci/util/DerivedTypesSerializer12.h"
#include "asb_uci/util/DerivedTypesSerializer13.h"
#include "asb_uci/util/DerivedTypesSerializer14.h"
#include "asb_uci/util/DerivedTypesSerializer15.h"
#include "asb_uci/util/DerivedTypesSerializer16.h"
#include "asb_uci/util/DerivedTypesSerializer17.h"
#include "asb_uci/util/DerivedTypesSerializer18.h"
#include "asb_uci/util/DerivedTypesSerializer19.h"
#include "asb_uci/util/DerivedTypesSerializer2.h"
#include "asb_uci/util/DerivedTypesSerializer20.h"
#include "asb_uci/util/DerivedTypesSerializer21.h"
#include "asb_uci/util/DerivedTypesSerializer3.h"
#include "asb_uci/util/DerivedTypesSerializer4.h"
#include "asb_uci/util/DerivedTypesSerializer5.h"
#include "asb_uci/util/DerivedTypesSerializer6.h"
#include "asb_uci/util/DerivedTypesSerializer7.h"
#include "asb_uci/util/DerivedTypesSerializer8.h"
#include "asb_uci/util/DerivedTypesSerializer9.h"
#include "uci/base/Accessor.h"
#include "uci/base/UCIException.h"

/**  */
namespace asb_uci {

/**  */
namespace util {

std::string DerivedTypesSerializer::serialize(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode) {
  boost::optional<std::string> serializedNodeName;
  serializedNodeName = DerivedTypesSerializer1::serialize(accessor, propTree, nodeName, createNode);
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer2::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer3::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer4::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer5::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer6::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer7::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer8::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer9::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer10::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer11::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer12::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer13::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer14::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer15::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer16::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer17::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer18::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer19::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer20::serialize(accessor, propTree, nodeName, createNode);
  }
  if (!static_cast<bool>(serializedNodeName)) {
    serializedNodeName = DerivedTypesSerializer21::serialize(accessor, propTree, nodeName, createNode);
  }
  if (static_cast<bool>(serializedNodeName)) {
    return *serializedNodeName;
  }
  std::ostringstream errMsg;
  errMsg << "Unexpected accessor type " << accessor.getAccessorType() << " encountered during derived type serialization";
  throw uci::base::UCIException(errMsg);
}

} // namespace util

} // namespace asb_uci

